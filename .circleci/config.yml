version: 2.1

orbs:
  codecov: codecov/codecov@3.2.2
  discord: antonioned/discord@0.1.0

parameters:
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  branch:
    type: string
    default: "main"

workflows:
  version: 2
  build-and-commit:
    when:
      equal: ["build_wasms", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - build-branch
      - build-framework:
          requires:
            - build-branch
      - build-modules:
          requires:
            - build-branch
      - merge-build-branch:
          requires:
            - build-framework
            - build-modules

  modules-coverage:
    when:
      equal: ["modules_coverage", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - modules-coverage

  framework-coverage:
    when:
      equal: ["framework_coverage", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - framework-coverage

  modules-tests:
    when:
      equal: ["modules_tests", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - tests

  # add this to give green ci when nothing is ran
  pass:
    jobs:
      - pass

  build-commit-deploy:
    when:
      equal: ["build_commit_deploy", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - build-branch
      - build-framework:
          requires:
            - build-branch
      - build-modules:
          requires:
            - build-branch
      - merge-build-branch:
          requires:
            - build-framework
            - build-modules
      - deploy:
          requires:
            - merge-build-branch

jobs:
  build-branch:
    docker:
      - image: cimg/base:2024.01
    resource_class: small
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: "Create build branch"
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            # Pull latest changes
            git pull origin $CIRCLE_BRANCH
            git checkout -b "$CIRCLE_BRANCH-build"
            git push origin "$CIRCLE_BRANCH-build"

  build-framework:
    docker:
      - image: cimg/rust:1.75.0
    resource_class: xlarge
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: "Check for newer workflow"
          background: true
          command: |
            while true; do
              sleep 5
              LATEST_COMMIT=$(git ls-remote $CIRCLE_REPOSITORY_URL | grep "$CIRCLE_BRANCH$" | cut -f 1)
              if [ "$LATEST_COMMIT" != "$CIRCLE_SHA1" ]; then
                echo "more recent commit to branch, exiting"
                # Remove temporary branch
                git push origin --delete "$CIRCLE_BRANCH-build" || true
                curl -X POST "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_API_TOKEN"
              fi
            done
      - run:
          name: Generate lockfiles
          command: |
            set -e
            if [ ! -f framework/Cargo.lock ]; then
              (cd framework ; cargo generate-lockfile)
            fi
      - run:
          name: Checkout temporary branch
          command: |
            git fetch origin "$CIRCLE_BRANCH-build"
            git checkout "$CIRCLE_BRANCH-build"
      - restore_cache:
          keys:
            - cargocache-v2-build-rust:1.75.0-{{ checksum "framework/Cargo.lock" }}
      - run:
          name: Build framework WASM artifacts
          command: |
            set -e
            ./scripts/wasm-framework-ci.sh
      - run:
          name: Generate schemas
          command: |
            # Install deps
            cargo install cargo-workspaces
            cargo install just
            # Run script
            just schema
      - save_cache:
          paths:
            # Cargo registry
            - ~/.cargo/registry
            - framework/target/debug/.fingerprint
            - framework/target/debug/build
            - framework/target/debug/deps
          key: cargocache-v2-build-rust:1.75.0-{{ checksum "framework/Cargo.lock" }}
      - run:
          name: Commit and push framework artifacts
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            # Pull latest changes
            git pull
            # Check for wasm changes
            git add framework/artifacts --force
            # Check for schema changes
            git add schema --force
            git commit -m 'Update framework WASM & Schemas [skip ci]' || true
            git push origin "$CIRCLE_BRANCH-build" || true
      - run:
          name: Remove temporary branch if it failed during build framework
          when: on_fail
          command: git push origin --delete "$CIRCLE_BRANCH-build" || true
      - discord/status:
          fail_only: true
          failure_message: "**${CIRCLE_USERNAME}**'s framework WASM build failed. Please check why! ðŸ˜­"
          webhook: "${DISCORD_STATUS_WEBHOOK}"

  build-modules:
    docker:
      - image: cimg/rust:1.75.0
    resource_class: xlarge
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: "Check for newer workflow"
          background: true
          command: |
            while true; do
              sleep 5
              LATEST_COMMIT=$(git ls-remote $CIRCLE_REPOSITORY_URL | grep "$CIRCLE_BRANCH$" | cut -f 1)
              if [ "$LATEST_COMMIT" != "$CIRCLE_SHA1" ]; then
                echo "more recent commit to branch, exiting"
                # Remove temporary branch
                git push origin --delete "$CIRCLE_BRANCH-build" || true
                curl -X POST "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_API_TOKEN"
              fi
            done
      - run:
          name: Generate module lockfiles
          command: |
            set -e
            if [ ! -f modules/Cargo.lock ]; then
              (cd modules ; cargo generate-lockfile)
            fi
      - run:
          name: Checkout temporary branch
          command: |
            git fetch origin "$CIRCLE_BRANCH-build"
            git checkout "$CIRCLE_BRANCH-build"
      - run:
          name: Build module WASM artifacts
          command: |
            set -e
            ./scripts/wasm-modules-ci.sh
      - run:
          name: Commit and push module artifacts
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            # Pull latest changes
            git pull
            # Check for wasm changes
            git add modules/artifacts --force
            git commit -m 'Update modules WASM [skip ci]' || true
            git push origin "$CIRCLE_BRANCH-build" || true
      - run:
          name: Remove temporary branch if it failed during building modules
          when: on_fail
          command: git push origin --delete "$CIRCLE_BRANCH-build" || true
      - discord/status:
          fail_only: true
          failure_message: "**${CIRCLE_USERNAME}**'s modules WASM build failed. Please check why! ðŸ˜­"
          webhook: "${DISCORD_STATUS_WEBHOOK}"

  merge-build-branch:
    docker:
      - image: cimg/base:2024.01
    resource_class: small
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: "Merge build branch"
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            # Pull latest changes
            git pull origin $CIRCLE_BRANCH
            git fetch origin "$CIRCLE_BRANCH-build"
            # Merge artifacts to a branch
            git merge "origin/$CIRCLE_BRANCH-build" --squash
            git commit -m "Update WASM & Schemas [skip ci]" || echo "No changes to commit"
            git push origin $CIRCLE_BRANCH || true
            # Delete temporary branch
            git push origin --delete "$CIRCLE_BRANCH-build"

  tests:
    docker:
      - image: cimg/rust:1.75.0
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Generate lockfile
          command: |
            cd modules
            cargo generate-lockfile
      - restore_cache:
          keys:
            - cargocache-v2-tests-rust:1.75.0-{{ checksum "modules/Cargo.lock" }}
      - run:
          name: Modules tests
          command: |
            ./scripts/modules-tests.sh
      - save_cache:
          paths:
            - ~/.cargo/registry
            - modules/target/debug/.fingerprint
            - modules/target/debug/build
            - modules/target/debug/deps
          key: cargocache-v2-tests-rust:1.75.0-{{ checksum "modules/Cargo.lock" }}

  deploy:
    docker:
      - image: cimg/rust:1.75.0
    resource_class: large
    steps:
      - checkout
      - run:
          name: Generate lockfile
          command: |
            set -e
            if [ ! -f framework/Cargo.lock ]; then
              (cd framework ; cargo generate-lockfile)
            fi
      - restore_cache:
          keys:
            - cargocache-v2-deploy-rust:1.75.0-{{ checksum "framework/Cargo.lock" }}
      - run:
          name: Decode and Deploy
          command: |
            decoded_value=$(echo "$TEST_MNEMONIC_BASE64" | base64 --decode)
            export TEST_MNEMONIC="$decoded_value"
            cd framework
            cargo run --bin full_deploy -- --network-ids $NETWORKS
      - run:
          name: Commit and push deploy file
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            git add framework/scripts --force
            git commit -m 'Update deploy deploy file [skip ci]'
            git push origin $CIRCLE_BRANCH
      - run:
          name: Commit and push state file
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            cp ~/.cw-orchestrator/state.json ./framework/scripts/
            git add ./framework/scripts/state.json
            git commit -m 'Update deploy deploy file [skip ci]'
            git push origin $CIRCLE_BRANCH
      - save_cache:
          paths:
            - ~/.cargo/registry
            - framework/target/debug/.fingerprint
            - framework/target/debug/build
            - framework/target/debug/deps
          key: cargocache-v2-deploy-rust:1.75.0-{{ checksum "framework/Cargo.lock" }}

  modules-coverage:
    docker:
      - image: cimg/rust:1.75.0
    resource_class: xlarge
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Generate lockfile
          command: |
            set -e
            if [ ! -f modules/Cargo.lock ]; then
              (cd modules ; cargo generate-lockfile)
            fi
      - restore_cache:
          keys:
            - cargocache-v2-coverage-rust:1.75.0-{{ checksum "modules/Cargo.lock" }}
      - run:
          name: Run tests with coverage for modules
          command: |
            ./scripts/modules-coverage.sh
      - codecov/upload:
          file: ./modules/lcov.info
      - save_cache:
          paths:
            - ~/.cargo/registry
            - modules/target/debug/.fingerprint
            - modules/target/debug/build
            - modules/target/debug/deps
          key: cargocache-v2-deploy-rust:1.75.0-{{ checksum "modules/Cargo.lock" }}

  framework-coverage:
    docker:
      - image: cimg/rust:1.75.0
    resource_class: xlarge
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Generate lockfile
          command: |
            set -e
            if [ ! -f framework/Cargo.lock ]; then
              (cd framework ; cargo generate-lockfile)
            fi
      - restore_cache:
          keys:
            - cargocache-v2-coverage-rust:1.75.0-{{ checksum "framework/Cargo.lock" }}
      - run:
          name: Run tests with coverage for framework
          command: |
            ./scripts/framework-coverage.sh
      - codecov/upload:
          file: ./framework/lcov.info
      - save_cache:
          paths:
            - ~/.cargo/registry
            - framework/target/debug/.fingerprint
            - framework/target/debug/build
            - framework/target/debug/deps
          key: cargocache-v2-deploy-rust:1.75.0-{{ checksum "framework/Cargo.lock" }}

  pass:
    docker:
      # Primary container image where all steps run
      - image: cimg/base:2024.01
    steps:
      - run:
          name: Pass
          command: |
            echo "Pass."
