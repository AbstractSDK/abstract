version: 2.1

orbs:
  codecov: codecov/codecov@3.2.2
  discord: antonioned/discord@0.1.0

parameters:
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""
  branch:
    type: string
    default: "main"

workflows:
  version: 2
  build-and-commit:
    when:
      equal: [ "build_wasms", << pipeline.parameters.GHA_Meta >>]
    jobs:
      - build
              
  modules-coverage:
    when: 
      equal: [ "modules_coverage", << pipeline.parameters.GHA_Meta >>]
    jobs: 
      - coverage
  # add this to give green ci when nothing is ran
  pass:
    jobs:
      - pass

  build-commit-deploy:
    when:
      equal: ["build_commit_deploy", << pipeline.parameters.GHA_Meta >>]
    jobs: 
      - build
      - deploy:
          requires:
            - build

jobs:
  build:
    docker:
      - image: cimg/rust:1.72.0
    resource_class: xlarge
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - checkout
      - run:
          name: "Check for newer workflow"
          background: true
          command: |
            while true; do
              sleep 5
              LATEST_COMMIT=$(git ls-remote $CIRCLE_REPOSITORY_URL | grep $CIRCLE_BRANCH | cut -f 1)
              if [ "$LATEST_COMMIT" != "$CIRCLE_SHA1" ]; then
                echo "more recent commit to branch, exiting"
                curl -X POST "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_API_TOKEN"
              fi
            done
      - run:
          name: Build WASM artifacts
          command: |
            set -e
            ./scripts/wasm-all-ci.sh
      - run:
          name: Commit and push artifacts
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            # Pull latest changes
            git pull origin $CIRCLE_BRANCH
            # Check for changes
            git add framework/artifacts --force
            git add modules/artifacts --force
            git commit -m 'Update WASM binaries [skip ci]'  || true
            git push origin $CIRCLE_BRANCH || true
      - discord/status:
          fail_only: true
          failure_message: "**${CIRCLE_USERNAME}**'s WASM build failed. Please check why! ðŸ˜­"
          webhook: "${DISCORD_STATUS_WEBHOOK}"

  deploy:
    docker:
      - image: cimg/rust:1.72.0
    resource_class: large
    steps:
      - checkout
      - run:
          name: Decode and Deploy 
          command: |
            decoded_value=$(echo "$TEST_MNEMONIC_BASE64" | base64 --decode)
            export TEST_MNEMONIC="$decoded_value"
            cd framework
            cargo run --bin full_deploy -- --network-ids $NETWORKS 
      - run:
          name: Commit and push deploy file
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            git add framework/scripts --force
            git commit -m 'Update deploy deploy file [skip ci]'
            git push origin $CIRCLE_BRANCH
      - run:
          name: Commit and push state file
          command: |
            git config --global user.name 'CircleCI'
            git config --global user.email 'circleci@example.com'
            cp ~/.cw-orchestrator/state.json ./framework/scripts/
            git add ./framework/scripts/state.json
            git commit -m 'Update deploy deploy file [skip ci]'
            git push origin $CIRCLE_BRANCH

  coverage:
    docker:
      - image: cimg/rust:1.72.0
    resource_class: xlarge
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - checkout
      - run:
          name: Run tests with coverage for modules
          command: |
            ./scripts/modules-coverage.sh
      - codecov/upload:
          file: ./modules/lcov.info

  pass: 
    docker:
    # Primary container image where all steps run
     - image: cimg/base:2022.05
    steps:
      - run:
          name: Pass
          command: |
            echo "Pass."
