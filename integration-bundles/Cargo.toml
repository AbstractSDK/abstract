[workspace]
members = ["bundles/*"]

# Enable the version 2 feature resolver, which avoids unifying features for targets that are not being built
#
# Critically this prevents dev-dependencies from enabling features even when not building a target that
# uses dev-dependencies, e.g. the library crate. This in turn ensures that we can catch invalid feature
# flag combinations that would otherwise only surface in dependent crates
#
# Reference - https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2
# See - https://github.com/apache/arrow-rs/pull/1822/files
resolver = "2"

[workspace.package]
version = "0.3.1"
authors = [
  "CyberHoward <cyberhoward@protonmail.com>",
  "Riada <riada@abstract.money>",
  "Abstract Money <contact@abstract.money>",
]
edition = "2021"
homepage = "https://abstract.money"
documentation = "https://docs.abstract.money/"
repository = "https://github.com/AbstractSDK/integration-bundles"
license = "GPL-3.0-or-later"
keywords = ["integration", "testing", "CosmWasm"]

[workspace.dependencies]
cosmwasm-std = { version = "1.1.9" }
cosmwasm-schema = { version = "1.1.9" }
cw-storage-plus = "1.0.1"
cw20-base = { package = "abstract-cw20-base", version = "1.0.1", features = [
  "interface",
] }
cw20 = { package = "abstract-cw20", version = "1.0.1", features = [
  "interface",
] }
cw-asset = { version = "3.0" }
cw-semver = { version = "1.0" }
cw-orch = { version = "0.13" }

abstract-core = { version = "0.17.0" }
abstract-interface = { version = "0.17.0" }

## Testing
cw-multi-test = { version = "0.16.2" }
anyhow = "1"
