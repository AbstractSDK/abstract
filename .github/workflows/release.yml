name: Release and Publish 

# Job that updates the wasms of the mono-repo after a PR is merged to main.
# Or if it is triggerd manually.

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
    branches:
      - 'release/*'

jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Tickle CircleCI to Build Wasm Binaries
        env:
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF}" | sed -e "s/refs\/heads\///")
          
          curl -X POST \
          -H "Circle-Token: ${CCI_TOKEN}" \
          -H 'Content-Type: application/json' \
          -H 'Accept: application/json' \
          -d '{
          "branch": "'"$BRANCH_NAME"'",
          "parameters": {
            "GHA_Meta": "build_wasms"
          }
          }' https://circleci.com/api/v2/project/gh/AbstractSDK/abstract/pipeline

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Tickle CircleCI for Deploy and Wait for Completion of Build
        env:
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF}" | sed -e "s/refs\/heads\///")
          
          # Trigger the CircleCI pipeline and get the pipeline ID
          RESPONSE=$(curl -X POST \
            -H "Circle-Token: ${CCI_TOKEN}" \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -d '{
              "branch": "'"$BRANCH_NAME"'",
              "parameters": {
                "GHA_Meta": "deploy_all"
              }
            }' https://circleci.com/api/v2/project/gh/AbstractSDK/abstract/pipeline)

          PIPELINE_ID=$(echo $RESPONSE | jq -r '.id')

          if [[ "$PIPELINE_ID" == "null" ]]; then
            echo "Failed to get PIPELINE_ID. Exiting."
            exit 1
          fi

          # Waiting for potential propagation delay
          echo "Waiting for potential propagation delay..."
          sleep 30

          # Now, start polling CircleCI for the workflow status
          while true; do
            WORKFLOWS=$(curl -H "Circle-Token: ${CCI_TOKEN}" \
              https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow)

            # Log the pipeline ID and the entire items array for diagnosis
            echo "PIPELINE_ID: $PIPELINE_ID"
            echo "Items in Workflow Data: $(echo $WORKFLOWS | jq -r '.items[]')"

            LAST_WORKFLOW=$(echo $WORKFLOWS | jq -r '.items[0]')
            WORKFLOW_NAME=$(echo $LAST_WORKFLOW | jq -r '.name')
            WORKFLOW_STATUS=$(echo $LAST_WORKFLOW | jq -r '.status')
            WORKFLOW_PIPELINE_ID=$(echo $LAST_WORKFLOW | jq -r '.pipeline_id')

            if [[ "$LAST_WORKFLOW" == "null" || "$WORKFLOW_NAME" == "null" || "$WORKFLOW_STATUS" == "null" || "$WORKFLOW_PIPELINE_ID" == "null" ]]; then
              echo "Received null values. Dumping workflow data:"
              echo "$WORKFLOWS"
              exit 1
          fi

          # Check if the last workflow's name matches and has the correct pipeline id
          if [[ "$WORKFLOW_NAME" == "build-and-commit" && "$WORKFLOW_PIPELINE_ID" == "$PIPELINE_ID" ]]; then
              case "$WORKFLOW_STATUS" in
                  "success")
                      echo "Workflow 'build-and-commit' completed successfully!"
                      break
                      ;;
                  "running")
                      echo "Workflow 'build-and-commit' is currently running..."
                      ;;
                  "not_run")
                      echo "Workflow 'build-and-commit' has not run yet..."
                      ;;
                  "failed")
                      echo "Workflow 'build-and-commit' failed. Exiting."
                      exit 1
                      ;;
                  "error")
                      echo "Workflow 'build-and-commit' ended with an error. Exiting."
                      exit 1
                      ;;
                  "failing")
                      echo "Workflow 'build-and-commit' is currently failing..."
                      ;;
                  "on_hold")
                      echo "Workflow 'build-and-commit' is currently on hold..."
                      ;;
                  "canceled")
                      echo "Workflow 'build-and-commit' was canceled. Exiting."
                      exit 1
                      ;;
                  "unauthorized")
                      echo "Unauthorized to access workflow 'build-and-commit'. Exiting."
                      exit 1
                      ;;
                  *)
                      echo "Unknown workflow status for 'build-and-commit': $WORKFLOW_STATUS. Waiting..."
                      ;;
              esac

              sleep 30  # Wait for 30 seconds before checking again
          else
              echo "Waiting for 'build-and-commit' workflow to start..."
              sleep 30  # Wait for 30 seconds before checking again
          fi
          done

          echo "Workflow 'build-and-commit' has completed successfully!"
