name: Release and Publish 

# Job that updates the wasms of the mono-repo after a PR is merged to main.
# Or if it is triggerd manually.

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
    branches:
      - 'release/*'

jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Tickle CircleCI to Build Wasm Binaries
        env:
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF}" | sed -e "s/refs\/heads\///")
          
          curl -X POST \
          -H "Circle-Token: ${CCI_TOKEN}" \
          -H 'Content-Type: application/json' \
          -H 'Accept: application/json' \
          -d '{
          "branch": "'"$BRANCH_NAME"'",
          "parameters": {
            "GHA_Meta": "build_wasms"
          }
          }' https://circleci.com/api/v2/project/gh/AbstractSDK/abstract/pipeline

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Tickle CircleCI for Deploy and Wait for Completion of Build
        env:
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF}" | sed -e "s/refs\/heads\///")
          
          # Trigger the CircleCI pipeline
          RESPONSE=$(curl -X POST \
            -H "Circle-Token: ${CCI_TOKEN}" \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -d '{
              "branch": "'"$BRANCH_NAME"'",
              "parameters": {
                "GHA_Meta": "deploy_all"
              }
            }' https://circleci.com/api/v2/project/gh/AbstractSDK/abstract/pipeline)

          PIPELINE_ID=$(echo $RESPONSE | jq -r '.id')

          # Wait a bit to ensure the workflow is created
          sleep 20

          # Fetch the workflow ID associated with the triggered pipeline
          WORKFLOWS=$(curl -H "Circle-Token: ${CCI_TOKEN}" \
            https://circleci.com/api/v2/pipeline/$PIPELINE_ID/workflow)
          WORKFLOW_ID=$(echo $WORKFLOWS | jq -r '.items[0].id')

          # Poll the status of the workflow
          while true; do
            STATUS=$(curl -H "Circle-Token: ${CCI_TOKEN}" \
              https://circleci.com/api/v2/workflow/$WORKFLOW_ID | jq -r '.status')
            
            if [[ "$STATUS" == "success" || "$STATUS" == "failed" || "$STATUS" == "canceled" || "$STATUS" == "error" ]]; then
              break
            fi

            echo "CircleCI workflow status: $STATUS. Waiting for completion of build"
            sleep 30
          done

          # Fail the GitHub Action if the CircleCI workflow failed
          if [[ "$STATUS" != "success" ]]; then
            exit 1
          fi
