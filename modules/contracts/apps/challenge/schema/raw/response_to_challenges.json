{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ChallengesResponse",
  "description": "Response for challenges query Returns a list of challenges",
  "type": "object",
  "required": [
    "challenges"
  ],
  "properties": {
    "challenges": {
      "description": "List of indexed challenges",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ChallengeEntryResponse"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AdminStrikes": {
      "type": "object",
      "required": [
        "limit",
        "num_strikes"
      ],
      "properties": {
        "limit": {
          "description": "When num_strikes reached the limit, the challenge will be cancelled.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "num_strikes": {
          "description": "The number of strikes the admin has incurred.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "ChallengeEntryResponse": {
      "description": "Response struct for challenge entry",
      "type": "object",
      "required": [
        "admin_strikes",
        "challenge_id",
        "description",
        "end",
        "name",
        "status",
        "strike_asset",
        "strike_strategy"
      ],
      "properties": {
        "admin_strikes": {
          "description": "State of strikes of admin for this challenge",
          "allOf": [
            {
              "$ref": "#/definitions/AdminStrikes"
            }
          ]
        },
        "challenge_id": {
          "description": "Id of the challenge,",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "description": {
          "description": "Description of the challenge",
          "type": "string"
        },
        "end": {
          "description": "When challenge ends",
          "allOf": [
            {
              "$ref": "#/definitions/Expiration"
            }
          ]
        },
        "name": {
          "description": "Name of challenge",
          "type": "string"
        },
        "status": {
          "description": "Status of the current vote",
          "allOf": [
            {
              "$ref": "#/definitions/ProposalStatus"
            }
          ]
        },
        "strike_asset": {
          "description": "Asset for punishment for failing a challenge",
          "allOf": [
            {
              "$ref": "#/definitions/AssetEntry"
            }
          ]
        },
        "strike_strategy": {
          "description": "How strike will get distributed between friends",
          "allOf": [
            {
              "$ref": "#/definitions/StrikeStrategy"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "oneOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ProposalOutcome": {
      "type": "string",
      "enum": [
        "passed",
        "failed",
        "canceled",
        "vetoed"
      ]
    },
    "ProposalStatus": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "active"
          ]
        },
        {
          "type": "object",
          "required": [
            "veto_period"
          ],
          "properties": {
            "veto_period": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Expiration"
                },
                {
                  "$ref": "#/definitions/ProposalOutcome"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "finished"
          ],
          "properties": {
            "finished": {
              "$ref": "#/definitions/ProposalOutcome"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StrikeStrategy": {
      "description": "Strategy for striking the admin",
      "oneOf": [
        {
          "description": "Split amount between friends",
          "type": "object",
          "required": [
            "split"
          ],
          "properties": {
            "split": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Amount for every friend",
          "type": "object",
          "required": [
            "per_friend"
          ],
          "properties": {
            "per_friend": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
