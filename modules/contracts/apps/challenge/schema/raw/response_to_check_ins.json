{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CheckInsResponse",
  "type": "array",
  "items": {
    "$ref": "#/definitions/CheckIn"
  },
  "definitions": {
    "CheckIn": {
      "description": "The check in struct is used to track the admin's check ins. The admin must check in every 24 hours, otherwise they get a strike.",
      "type": "object",
      "required": [
        "last",
        "next",
        "status"
      ],
      "properties": {
        "last": {
          "description": "The blockheight of the last check in.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "metadata": {
          "description": "Optional metadata for the check in. For example, a link to a tweet.",
          "type": [
            "string",
            "null"
          ]
        },
        "next": {
          "description": "The blockheight of the next check in. In the case of a missed check in, this will always be pushed forward internally by the contract.",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "status": {
          "description": "The vote status of the CheckIn.",
          "allOf": [
            {
              "$ref": "#/definitions/CheckInStatus"
            }
          ]
        },
        "tally_result": {
          "description": "The final result of the votes for this check in.",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "CheckInStatus": {
      "oneOf": [
        {
          "description": "The admin has not yet checked in, therefore no voting or tallying has occured for this check in.",
          "type": "string",
          "enum": [
            "not_checked_in"
          ]
        },
        {
          "description": "The admin has checked in, but all friends have not yet all voted. Some friends may have voted, but not all.",
          "type": "string",
          "enum": [
            "checked_in_not_yet_voted"
          ]
        },
        {
          "description": "The admin mised their check in and got a strike.",
          "type": "string",
          "enum": [
            "missed_check_in"
          ]
        },
        {
          "description": "The admin has checked in and all friends have voted. But the check in has not yet been tallied.",
          "type": "string",
          "enum": [
            "voted_not_yet_tallied"
          ]
        },
        {
          "description": "The check in has been voted and tallied.",
          "type": "string",
          "enum": [
            "voted_and_tallied"
          ]
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
