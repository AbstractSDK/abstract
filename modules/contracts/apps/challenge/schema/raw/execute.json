{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Challenge execute messages",
  "oneOf": [
    {
      "description": "Update challenge config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "required": [
            "new_vote_config"
          ],
          "properties": {
            "new_vote_config": {
              "description": "New config for vote",
              "allOf": [
                {
                  "$ref": "#/definitions/VoteConfig"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Create new challenge",
      "type": "object",
      "required": [
        "create_challenge"
      ],
      "properties": {
        "create_challenge": {
          "type": "object",
          "required": [
            "challenge_req"
          ],
          "properties": {
            "challenge_req": {
              "description": "New challenge arguments",
              "allOf": [
                {
                  "$ref": "#/definitions/ChallengeRequest"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update existing challenge",
      "type": "object",
      "required": [
        "update_challenge"
      ],
      "properties": {
        "update_challenge": {
          "type": "object",
          "required": [
            "challenge",
            "challenge_id"
          ],
          "properties": {
            "challenge": {
              "description": "Updates to this challenge",
              "allOf": [
                {
                  "$ref": "#/definitions/ChallengeEntryUpdate"
                }
              ]
            },
            "challenge_id": {
              "description": "Id of the challenge to update",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Cancel challenge",
      "type": "object",
      "required": [
        "cancel_challenge"
      ],
      "properties": {
        "cancel_challenge": {
          "type": "object",
          "required": [
            "challenge_id"
          ],
          "properties": {
            "challenge_id": {
              "description": "Challenge Id to cancel",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update list of friends for challenge",
      "type": "object",
      "required": [
        "update_friends_for_challenge"
      ],
      "properties": {
        "update_friends_for_challenge": {
          "type": "object",
          "required": [
            "challenge_id",
            "friends",
            "op_kind"
          ],
          "properties": {
            "challenge_id": {
              "description": "Id of the challenge to update",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "friends": {
              "description": "List of added or removed Friends",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Friend_for_String"
              }
            },
            "op_kind": {
              "description": "Kind of operation: add or remove friends",
              "allOf": [
                {
                  "$ref": "#/definitions/UpdateFriendsOpKind"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Cast vote as a friend",
      "type": "object",
      "required": [
        "cast_vote"
      ],
      "properties": {
        "cast_vote": {
          "type": "object",
          "required": [
            "challenge_id",
            "vote_to_punish"
          ],
          "properties": {
            "challenge_id": {
              "description": "Challenge Id to cast vote on",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote_to_punish": {
              "description": "Wether voter thinks admin deserves punishment",
              "allOf": [
                {
                  "$ref": "#/definitions/Vote"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Count votes for challenge id",
      "type": "object",
      "required": [
        "count_votes"
      ],
      "properties": {
        "count_votes": {
          "type": "object",
          "required": [
            "challenge_id"
          ],
          "properties": {
            "challenge_id": {
              "description": "Challenge Id for counting votes",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Veto the last vote",
      "type": "object",
      "required": [
        "veto"
      ],
      "properties": {
        "veto": {
          "type": "object",
          "required": [
            "challenge_id"
          ],
          "properties": {
            "challenge_id": {
              "description": "Challenge id to do the veto",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AccountId": {
      "description": "Unique identifier for an account. On each chain this is unique.",
      "type": "object",
      "required": [
        "seq",
        "trace"
      ],
      "properties": {
        "seq": {
          "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trace": {
          "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
          "allOf": [
            {
              "$ref": "#/definitions/AccountTrace"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AccountTrace": {
      "description": "The identifier of chain that triggered the account creation",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "local"
          ]
        },
        {
          "type": "object",
          "required": [
            "remote"
          ],
          "properties": {
            "remote": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "ChainName": {
      "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
      "type": "string"
    },
    "ChallengeEntryUpdate": {
      "description": "Only this struct and these fields are allowed to be updated. The status cannot be externally updated, it is updated by the contract.",
      "type": "object",
      "properties": {
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ChallengeRequest": {
      "description": "Arguments for new challenge",
      "type": "object",
      "required": [
        "challenge_duration_seconds",
        "init_friends",
        "name",
        "proposal_duration_seconds",
        "strike_asset",
        "strike_strategy"
      ],
      "properties": {
        "challenge_duration_seconds": {
          "description": "In what duration challenge should end",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "description": {
          "description": "Description of the challenge",
          "type": [
            "string",
            "null"
          ]
        },
        "init_friends": {
          "description": "Initial list of friends",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Friend_for_String"
          }
        },
        "name": {
          "description": "Name of challenge",
          "type": "string"
        },
        "proposal_duration_seconds": {
          "description": "Duration set for each proposal Proposals starts after one vote initiated by any of the friends",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "strike_asset": {
          "description": "Asset for punishment for failing a challenge",
          "allOf": [
            {
              "$ref": "#/definitions/AssetEntry"
            }
          ]
        },
        "strike_strategy": {
          "description": "How strike will get distributed between friends",
          "allOf": [
            {
              "$ref": "#/definitions/StrikeStrategy"
            }
          ]
        },
        "strikes_limit": {
          "description": "Strike limit, defaults to 1",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "FriendByAddr_for_String": {
      "description": "Friend by address",
      "type": "object",
      "required": [
        "address",
        "name"
      ],
      "properties": {
        "address": {
          "description": "Address of the friend",
          "type": "string"
        },
        "name": {
          "description": "Name of the friend",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Friend_for_String": {
      "description": "Friend object",
      "oneOf": [
        {
          "description": "Friend with address and a name",
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "$ref": "#/definitions/FriendByAddr_for_String"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Abstract Account Id of the friend",
          "type": "object",
          "required": [
            "abstract_account"
          ],
          "properties": {
            "abstract_account": {
              "$ref": "#/definitions/AccountId"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StrikeStrategy": {
      "description": "Strategy for striking the admin",
      "oneOf": [
        {
          "description": "Split amount between friends",
          "type": "object",
          "required": [
            "split"
          ],
          "properties": {
            "split": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Amount for every friend",
          "type": "object",
          "required": [
            "per_friend"
          ],
          "properties": {
            "per_friend": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Threshold": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "majority"
          ],
          "properties": {
            "majority": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "percentage"
          ],
          "properties": {
            "percentage": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateFriendsOpKind": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "add"
          ],
          "properties": {
            "add": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "remove"
          ],
          "properties": {
            "remove": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Vote": {
      "description": "Vote struct",
      "type": "object",
      "required": [
        "vote"
      ],
      "properties": {
        "memo": {
          "description": "memo for the vote",
          "type": [
            "string",
            "null"
          ]
        },
        "vote": {
          "description": "true: Vote for false: Vote against",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "VoteConfig": {
      "type": "object",
      "required": [
        "threshold"
      ],
      "properties": {
        "threshold": {
          "$ref": "#/definitions/Threshold"
        },
        "veto_duration_seconds": {
          "description": "Veto duration after the first vote None disables veto",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
