{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Wrapper around all possible messages that can be sent to the module.",
  "oneOf": [
    {
      "description": "A configuration message, defined by the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "An app request defined by a base consumer.",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/ChallengeExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "IbcReceive to process IBC callbacks",
      "type": "object",
      "required": [
        "ibc_callback"
      ],
      "properties": {
        "ibc_callback": {
          "$ref": "#/definitions/IbcResponseMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receive endpoint for CW20 / external service integrations",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Empty"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "BaseExecuteMsg": {
      "oneOf": [
        {
          "description": "Updates the base config",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "ans_host_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "version_control_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ChallengeEntryUpdate": {
      "description": "Only this struct and these fields are allowed to be updated. The status cannot be externally updated, it is updated by the contract.",
      "type": "object",
      "properties": {
        "collateral": {
          "anyOf": [
            {
              "$ref": "#/definitions/AnsAsset"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "end": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ChallengeExecuteMsg": {
      "description": "App execute messages",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "create_challenge"
          ],
          "properties": {
            "create_challenge": {
              "type": "object",
              "required": [
                "challenge_req"
              ],
              "properties": {
                "challenge_req": {
                  "$ref": "#/definitions/ChallengeRequest"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_challenge"
          ],
          "properties": {
            "update_challenge": {
              "type": "object",
              "required": [
                "challenge",
                "challenge_id"
              ],
              "properties": {
                "challenge": {
                  "$ref": "#/definitions/ChallengeEntryUpdate"
                },
                "challenge_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cancel_challenge"
          ],
          "properties": {
            "cancel_challenge": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_friends_for_challenge"
          ],
          "properties": {
            "update_friends_for_challenge": {
              "type": "object",
              "required": [
                "challenge_id",
                "friends",
                "op_kind"
              ],
              "properties": {
                "challenge_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "friends": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Friend_for_String"
                  }
                },
                "op_kind": {
                  "$ref": "#/definitions/UpdateFriendsOpKind"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "daily_check_in"
          ],
          "properties": {
            "daily_check_in": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "metadata": {
                  "description": "metadata can be added for extra description of the check-in. For example, if the check-in is a photo, the metadata can be a link to the photo.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cast_vote"
          ],
          "properties": {
            "cast_vote": {
              "type": "object",
              "required": [
                "challenge_id",
                "vote"
              ],
              "properties": {
                "challenge_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "vote": {
                  "description": "If the vote.approval is None, we assume the voter approves, and the contract will internally set the approval field to Some(true). This is because we assume that if a friend didn't vote, the friend approves, otherwise the voter would Vote with approval set to Some(false).",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Vote_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ChallengeRequest": {
      "type": "object",
      "required": [
        "collateral",
        "description",
        "end",
        "name"
      ],
      "properties": {
        "collateral": {
          "$ref": "#/definitions/AnsAsset"
        },
        "description": {
          "type": "string"
        },
        "end": {
          "$ref": "#/definitions/DurationChoice"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "DurationChoice": {
      "type": "string",
      "enum": [
        "week",
        "month",
        "quarter",
        "year",
        "one_hundred_years"
      ]
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "Friend_for_String": {
      "type": "object",
      "required": [
        "address",
        "name"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "IbcResponseMsg": {
      "description": "IbcResponseMsg should be de/serialized under `IbcCallback()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "id",
        "msg"
      ],
      "properties": {
        "id": {
          "description": "The ID chosen by the caller in the `callback_id`",
          "type": "string"
        },
        "msg": {
          "$ref": "#/definitions/StdAck"
        }
      },
      "additionalProperties": false
    },
    "StdAck": {
      "description": "This is a generic ICS acknowledgement format. Proto defined [here](https://github.com/cosmos/cosmos-sdk/blob/v0.42.0/proto/ibc/core/channel/v1/channel.proto#L141-L147) If ibc_receive_packet returns Err(), then x/wasm runtime will rollback the state and return an error message in this format",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "result"
          ],
          "properties": {
            "result": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "error"
          ],
          "properties": {
            "error": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateFriendsOpKind": {
      "type": "string",
      "enum": [
        "add",
        "remove"
      ]
    },
    "Vote_for_String": {
      "type": "object",
      "required": [
        "voter"
      ],
      "properties": {
        "approval": {
          "description": "The vote result",
          "type": [
            "boolean",
            "null"
          ]
        },
        "for_check_in": {
          "description": "Correlates to the last_checked_in field of the CheckIn struct.",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "voter": {
          "description": "The address of the voter",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
