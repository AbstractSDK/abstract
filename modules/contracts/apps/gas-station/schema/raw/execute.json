{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Messages that can be executed in the GasStationApp. These messages define the actions that can be taken within the contract.",
  "oneOf": [
    {
      "description": "Create a new gas pump with a specific grade and amount. This allows the contract owner or privileged accounts to define new gas grades.",
      "type": "object",
      "required": [
        "create_grade"
      ],
      "properties": {
        "create_grade": {
          "type": "object",
          "required": [
            "fuel_mix",
            "grade"
          ],
          "properties": {
            "fuel_mix": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnsAsset"
              }
            },
            "grade": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Activate a gas pass for a specific recipient.",
      "type": "object",
      "required": [
        "activate_gas_pass"
      ],
      "properties": {
        "activate_gas_pass": {
          "type": "object",
          "required": [
            "grade",
            "recipient"
          ],
          "properties": {
            "bypass_pass_check": {
              "default": false,
              "type": "boolean"
            },
            "expiration": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "grade": {
              "type": "string"
            },
            "recipient": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Revoke a gas pass from a specific recipient.",
      "type": "object",
      "required": [
        "deactivate_gas_pass"
      ],
      "properties": {
        "deactivate_gas_pass": {
          "type": "object",
          "required": [
            "holder"
          ],
          "properties": {
            "holder": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
