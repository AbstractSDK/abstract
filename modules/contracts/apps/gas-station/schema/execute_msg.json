{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Wrapper around all possible messages that can be sent to the module.",
  "oneOf": [
    {
      "description": "A configuration message, defined by the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "An app request defined by a base consumer.",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/GasStationExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "IbcReceive to process IBC callbacks",
      "type": "object",
      "required": [
        "ibc_callback"
      ],
      "properties": {
        "ibc_callback": {
          "$ref": "#/definitions/IbcResponseMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receive endpoint for CW20 / external service integrations",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Empty"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "BaseExecuteMsg": {
      "oneOf": [
        {
          "description": "Updates the base config",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "ans_host_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "GasStationExecuteMsg": {
      "description": "Messages that can be executed in the GasStationApp. These messages define the actions that can be taken within the contract.",
      "oneOf": [
        {
          "description": "Create a new gas pump with a specific grade and amount. This allows the contract owner or privileged accounts to define new gas grades.",
          "type": "object",
          "required": [
            "create_grade"
          ],
          "properties": {
            "create_grade": {
              "type": "object",
              "required": [
                "fuel_mix",
                "grade"
              ],
              "properties": {
                "fuel_mix": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnsAsset"
                  }
                },
                "grade": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Activate a gas pass for a specific recipient.",
          "type": "object",
          "required": [
            "activate_gas_pass"
          ],
          "properties": {
            "activate_gas_pass": {
              "type": "object",
              "required": [
                "grade",
                "recipient"
              ],
              "properties": {
                "bypass_pass_check": {
                  "default": false,
                  "type": "boolean"
                },
                "create_if_missing": {
                  "default": false,
                  "type": "boolean"
                },
                "expiration": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Timestamp"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "grade": {
                  "type": "string"
                },
                "recipient": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Revoke a gas pass from a specific recipient.",
          "type": "object",
          "required": [
            "deactivate_gas_pass"
          ],
          "properties": {
            "deactivate_gas_pass": {
              "type": "object",
              "required": [
                "holder"
              ],
              "properties": {
                "holder": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcResponseMsg": {
      "description": "IbcResponseMsg should be de/serialized under `IbcCallback()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "id",
        "msg"
      ],
      "properties": {
        "id": {
          "description": "The ID chosen by the caller in the `callback_id`",
          "type": "string"
        },
        "msg": {
          "$ref": "#/definitions/StdAck"
        }
      },
      "additionalProperties": false
    },
    "StdAck": {
      "description": "This is a generic ICS acknowledgement format. Proto defined [here](https://github.com/cosmos/cosmos-sdk/blob/v0.42.0/proto/ibc/core/channel/v1/channel.proto#L141-L147) If ibc_receive_packet returns Err(), then x/wasm runtime will rollback the state and return an error message in this format",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "result"
          ],
          "properties": {
            "result": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "error"
          ],
          "properties": {
            "error": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
