{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RoundResponse",
  "type": "object",
  "required": [
    "bet_count",
    "description",
    "id",
    "name",
    "status",
    "teams",
    "total_bet"
  ],
  "properties": {
    "bet_count": {
      "type": "integer",
      "format": "uint128",
      "minimum": 0.0
    },
    "description": {
      "type": "string"
    },
    "id": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "name": {
      "type": "string"
    },
    "status": {
      "$ref": "#/definitions/RoundStatus"
    },
    "teams": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccountId"
      }
    },
    "total_bet": {
      "$ref": "#/definitions/AnsAsset"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AccountId": {
      "description": "Unique identifier for an account. On each chain this is unique.",
      "type": "object",
      "required": [
        "seq",
        "trace"
      ],
      "properties": {
        "seq": {
          "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trace": {
          "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
          "allOf": [
            {
              "$ref": "#/definitions/AccountTrace"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AccountTrace": {
      "description": "The identifier of chain that triggered the account creation",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "local"
          ]
        },
        {
          "type": "object",
          "required": [
            "remote"
          ],
          "properties": {
            "remote": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "ChainName": {
      "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
      "type": "string"
    },
    "RoundStatus": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "open",
            "rewards_distributed"
          ]
        },
        {
          "description": "Round is closed, and there may or may not be a winning team",
          "type": "object",
          "required": [
            "closed"
          ],
          "properties": {
            "closed": {
              "type": "object",
              "properties": {
                "winning_team": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AccountId"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
