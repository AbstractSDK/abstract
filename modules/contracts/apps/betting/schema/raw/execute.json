{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Execute Msg",
  "oneOf": [
    {
      "description": "Create a round of betting Admin only",
      "type": "object",
      "required": [
        "create_round"
      ],
      "properties": {
        "create_round": {
          "type": "object",
          "required": [
            "base_bet_token",
            "description",
            "name"
          ],
          "properties": {
            "base_bet_token": {
              "$ref": "#/definitions/AssetEntry"
            },
            "description": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Register as a team for the hackathon Uses the account caller to find the account id",
      "type": "object",
      "required": [
        "register"
      ],
      "properties": {
        "register": {
          "type": "object",
          "required": [
            "round_id"
          ],
          "properties": {
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Register teams manually for the round, with predefined odds set. Good for creating games with predefined odds, but payout can exceed account balance.",
      "type": "object",
      "required": [
        "update_accounts"
      ],
      "properties": {
        "update_accounts": {
          "type": "object",
          "required": [
            "round_id",
            "to_add",
            "to_remove"
          ],
          "properties": {
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "to_add": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountOdds"
              }
            },
            "to_remove": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountId"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "place_bet"
      ],
      "properties": {
        "place_bet": {
          "type": "object",
          "required": [
            "bet"
          ],
          "properties": {
            "bet": {
              "$ref": "#/definitions/NewBet"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Distribute winnings to the winners of the round",
      "type": "object",
      "required": [
        "distribute_winnings"
      ],
      "properties": {
        "distribute_winnings": {
          "type": "object",
          "required": [
            "round_id"
          ],
          "properties": {
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Admin only",
      "type": "object",
      "required": [
        "close_round"
      ],
      "properties": {
        "close_round": {
          "type": "object",
          "required": [
            "round_id"
          ],
          "properties": {
            "round_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "winner": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AccountId"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "rake": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AccountId": {
      "description": "Unique identifier for an account. On each chain this is unique.",
      "type": "object",
      "required": [
        "seq",
        "trace"
      ],
      "properties": {
        "seq": {
          "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trace": {
          "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
          "allOf": [
            {
              "$ref": "#/definitions/AccountTrace"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AccountOdds": {
      "type": "object",
      "required": [
        "account_id",
        "odds"
      ],
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "odds": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "AccountTrace": {
      "description": "The identifier of chain that triggered the account creation",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "local"
          ]
        },
        {
          "type": "object",
          "required": [
            "remote"
          ],
          "properties": {
            "remote": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "ChainName": {
      "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "NewBet": {
      "type": "object",
      "required": [
        "account_id",
        "asset",
        "round_id"
      ],
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "asset": {
          "$ref": "#/definitions/AnsAsset"
        },
        "round_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
