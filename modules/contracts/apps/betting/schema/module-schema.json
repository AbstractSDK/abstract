{
  "contract_name": "module-schema",
  "contract_version": "0.19.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Init msg",
    "type": "object",
    "properties": {
      "rake": {
        "anyOf": [
          {
            "$ref": "#/definitions/Decimal"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Execute Msg",
    "oneOf": [
      {
        "description": "Create a round of betting Admin only",
        "type": "object",
        "required": [
          "create_round"
        ],
        "properties": {
          "create_round": {
            "type": "object",
            "required": [
              "base_bet_token",
              "description",
              "name"
            ],
            "properties": {
              "base_bet_token": {
                "$ref": "#/definitions/AssetEntry"
              },
              "description": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Register as a team for the hackathon Uses the account caller to find the account id",
        "type": "object",
        "required": [
          "register"
        ],
        "properties": {
          "register": {
            "type": "object",
            "required": [
              "round_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Register teams manually for the round, with predefined odds set. Good for creating games with predefined odds, but payout can exceed account balance.",
        "type": "object",
        "required": [
          "update_accounts"
        ],
        "properties": {
          "update_accounts": {
            "type": "object",
            "required": [
              "round_id",
              "to_add",
              "to_remove"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "to_add": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AccountOdds"
                }
              },
              "to_remove": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AccountId"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Place a new bet for a round",
        "type": "object",
        "required": [
          "place_bet"
        ],
        "properties": {
          "place_bet": {
            "type": "object",
            "required": [
              "bet",
              "round_id"
            ],
            "properties": {
              "bet": {
                "$ref": "#/definitions/Bet"
              },
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Distribute winnings to the winners of the round",
        "type": "object",
        "required": [
          "distribute_winnings"
        ],
        "properties": {
          "distribute_winnings": {
            "type": "object",
            "required": [
              "round_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Admin only",
        "type": "object",
        "required": [
          "close_round"
        ],
        "properties": {
          "close_round": {
            "type": "object",
            "required": [
              "round_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "winner": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AccountId"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the config of the contract",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "rake": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountOdds": {
        "type": "object",
        "required": [
          "account_id",
          "odds"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/definitions/AccountId"
          },
          "odds": {
            "$ref": "#/definitions/Decimal"
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ChainName"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AnsAsset": {
        "type": "object",
        "required": [
          "amount",
          "name"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "name": {
            "$ref": "#/definitions/AssetEntry"
          }
        }
      },
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "Bet": {
        "description": "TODO: remove round ID and replace this tuple",
        "type": "object",
        "required": [
          "account_id",
          "asset"
        ],
        "properties": {
          "account_id": {
            "$ref": "#/definitions/AccountId"
          },
          "asset": {
            "$ref": "#/definitions/AnsAsset"
          }
        },
        "additionalProperties": false
      },
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Query Msg",
    "oneOf": [
      {
        "description": "Returns [`RoundResponse`]",
        "type": "object",
        "required": [
          "round"
        ],
        "properties": {
          "round": {
            "type": "object",
            "required": [
              "round_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`RoundsResponse`]",
        "type": "object",
        "required": [
          "list_rounds"
        ],
        "properties": {
          "list_rounds": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`OddsResponse`]",
        "type": "object",
        "required": [
          "odds"
        ],
        "properties": {
          "odds": {
            "type": "object",
            "required": [
              "round_id",
              "team_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "team_id": {
                "$ref": "#/definitions/AccountId"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`ListOddsResponse`]",
        "type": "object",
        "required": [
          "list_odds"
        ],
        "properties": {
          "list_odds": {
            "type": "object",
            "required": [
              "round_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`ConfigResponse`]",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`BetsResponse`]",
        "type": "object",
        "required": [
          "bets"
        ],
        "properties": {
          "bets": {
            "type": "object",
            "required": [
              "round_id"
            ],
            "properties": {
              "round_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ChainName"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "sudo": null,
  "responses": {
    "bets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BetsResponse",
      "type": "object",
      "required": [
        "bets",
        "round_id"
      ],
      "properties": {
        "bets": {
          "description": "Address of the LP token",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "$ref": "#/definitions/Uint128"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "round_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "rake"
      ],
      "properties": {
        "rake": {
          "description": "Address of the LP token",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "list_odds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ListOddsResponse",
      "type": "object",
      "required": [
        "odds",
        "round_id"
      ],
      "properties": {
        "odds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountOdds"
          }
        },
        "round_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountId": {
          "description": "Unique identifier for an account. On each chain this is unique.",
          "type": "object",
          "required": [
            "seq",
            "trace"
          ],
          "properties": {
            "seq": {
              "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "trace": {
              "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
              "allOf": [
                {
                  "$ref": "#/definitions/AccountTrace"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AccountOdds": {
          "type": "object",
          "required": [
            "account_id",
            "odds"
          ],
          "properties": {
            "account_id": {
              "$ref": "#/definitions/AccountId"
            },
            "odds": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "AccountTrace": {
          "description": "The identifier of chain that triggered the account creation",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "local"
              ]
            },
            {
              "type": "object",
              "required": [
                "remote"
              ],
              "properties": {
                "remote": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ChainName"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "list_rounds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RoundsResponse",
      "type": "object",
      "required": [
        "rounds"
      ],
      "properties": {
        "rounds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoundResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountId": {
          "description": "Unique identifier for an account. On each chain this is unique.",
          "type": "object",
          "required": [
            "seq",
            "trace"
          ],
          "properties": {
            "seq": {
              "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "trace": {
              "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
              "allOf": [
                {
                  "$ref": "#/definitions/AccountTrace"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AccountTrace": {
          "description": "The identifier of chain that triggered the account creation",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "local"
              ]
            },
            {
              "type": "object",
              "required": [
                "remote"
              ],
              "properties": {
                "remote": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ChainName"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "AnsAsset": {
          "type": "object",
          "required": [
            "amount",
            "name"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "name": {
              "$ref": "#/definitions/AssetEntry"
            }
          }
        },
        "AssetEntry": {
          "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
          "type": "string"
        },
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "RoundResponse": {
          "type": "object",
          "required": [
            "bet_count",
            "description",
            "id",
            "name",
            "status",
            "teams",
            "total_bet"
          ],
          "properties": {
            "bet_count": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "description": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "name": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/RoundStatus"
            },
            "teams": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccountId"
              }
            },
            "total_bet": {
              "$ref": "#/definitions/AnsAsset"
            }
          },
          "additionalProperties": false
        },
        "RoundStatus": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "open",
                "rewards_distributed"
              ]
            },
            {
              "description": "Round is closed, and there may or may not be a winning team",
              "type": "object",
              "required": [
                "closed"
              ],
              "properties": {
                "closed": {
                  "type": "object",
                  "properties": {
                    "winning_team": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/AccountId"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "odds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OddsResponse",
      "description": "State query response",
      "type": "object",
      "required": [
        "odds",
        "round_id"
      ],
      "properties": {
        "odds": {
          "$ref": "#/definitions/Decimal"
        },
        "round_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "round": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RoundResponse",
      "type": "object",
      "required": [
        "bet_count",
        "description",
        "id",
        "name",
        "status",
        "teams",
        "total_bet"
      ],
      "properties": {
        "bet_count": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/RoundStatus"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountId"
          }
        },
        "total_bet": {
          "$ref": "#/definitions/AnsAsset"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountId": {
          "description": "Unique identifier for an account. On each chain this is unique.",
          "type": "object",
          "required": [
            "seq",
            "trace"
          ],
          "properties": {
            "seq": {
              "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "trace": {
              "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
              "allOf": [
                {
                  "$ref": "#/definitions/AccountTrace"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AccountTrace": {
          "description": "The identifier of chain that triggered the account creation",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "local"
              ]
            },
            {
              "type": "object",
              "required": [
                "remote"
              ],
              "properties": {
                "remote": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ChainName"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "AnsAsset": {
          "type": "object",
          "required": [
            "amount",
            "name"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "name": {
              "$ref": "#/definitions/AssetEntry"
            }
          }
        },
        "AssetEntry": {
          "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
          "type": "string"
        },
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "RoundStatus": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "open",
                "rewards_distributed"
              ]
            },
            {
              "description": "Round is closed, and there may or may not be a winning team",
              "type": "object",
              "required": [
                "closed"
              ],
              "properties": {
                "closed": {
                  "type": "object",
                  "properties": {
                    "winning_team": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/AccountId"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
