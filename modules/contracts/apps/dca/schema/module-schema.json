{
  "contract_name": "module-schema",
  "contract_version": "0.17.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "App instantiate message",
    "type": "object",
    "required": [
      "dca_creation_amount",
      "max_spread",
      "native_asset",
      "refill_threshold"
    ],
    "properties": {
      "dca_creation_amount": {
        "description": "Amount in native coins for creation dca task and refill amount",
        "allOf": [
          {
            "$ref": "#/definitions/Uint128"
          }
        ]
      },
      "max_spread": {
        "description": "Max spread",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "native_asset": {
        "description": "Native gas/stake asset for this chain",
        "allOf": [
          {
            "$ref": "#/definitions/AssetEntry"
          }
        ]
      },
      "refill_threshold": {
        "description": "Task balance threshold to trigger refill, put it at zero if you consider to never refill your tasks",
        "allOf": [
          {
            "$ref": "#/definitions/Uint128"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "App execute messages",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "new_dca_creation_amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "new_max_spread": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "new_native_denom": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "new_refill_threshold": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to create a new DCA",
        "type": "object",
        "required": [
          "create_d_c_a"
        ],
        "properties": {
          "create_d_c_a": {
            "type": "object",
            "required": [
              "dex",
              "frequency",
              "source_asset",
              "target_asset"
            ],
            "properties": {
              "dex": {
                "description": "The DEX to be used for the swap",
                "type": "string"
              },
              "frequency": {
                "description": "The frequency of purchase",
                "allOf": [
                  {
                    "$ref": "#/definitions/Frequency"
                  }
                ]
              },
              "source_asset": {
                "description": "The name of the asset to be used for purchasing",
                "allOf": [
                  {
                    "$ref": "#/definitions/AnsAsset"
                  }
                ]
              },
              "target_asset": {
                "description": "The name of the asset to be purchased",
                "allOf": [
                  {
                    "$ref": "#/definitions/AssetEntry"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to update an existing DCA",
        "type": "object",
        "required": [
          "update_d_c_a"
        ],
        "properties": {
          "update_d_c_a": {
            "type": "object",
            "required": [
              "dca_id"
            ],
            "properties": {
              "dca_id": {
                "description": "Unique identifier for the DCA",
                "type": "string"
              },
              "new_dex": {
                "description": "Optional new DEX to be used for the swap",
                "type": [
                  "string",
                  "null"
                ]
              },
              "new_frequency": {
                "description": "Optional new frequency of purchase",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Frequency"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "new_source_asset": {
                "description": "Optional new name of the asset to be used for purchasing",
                "anyOf": [
                  {
                    "$ref": "#/definitions/AnsAsset"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "new_target_asset": {
                "description": "Optional new name of the asset to be purchased",
                "anyOf": [
                  {
                    "$ref": "#/definitions/AssetEntry"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to cancel an existing DCA",
        "type": "object",
        "required": [
          "cancel_d_c_a"
        ],
        "properties": {
          "cancel_d_c_a": {
            "type": "object",
            "required": [
              "dca_id"
            ],
            "properties": {
              "dca_id": {
                "description": "Unique identifier for the DCA",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Internal method for triggering swap. It can be called only by the Croncat Manager",
        "type": "object",
        "required": [
          "convert"
        ],
        "properties": {
          "convert": {
            "type": "object",
            "required": [
              "dca_id"
            ],
            "properties": {
              "dca_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AnsAsset": {
        "type": "object",
        "required": [
          "amount",
          "name"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "name": {
            "$ref": "#/definitions/AssetEntry"
          }
        }
      },
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Frequency": {
        "oneOf": [
          {
            "description": "Blocks will schedule the next DCA purchase every `n` blocks.",
            "type": "object",
            "required": [
              "every_n_blocks"
            ],
            "properties": {
              "every_n_blocks": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Time will schedule the next DCA purchase using crontab.",
            "type": "object",
            "required": [
              "cron"
            ],
            "properties": {
              "cron": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "d_c_a"
        ],
        "properties": {
          "d_c_a": {
            "type": "object",
            "required": [
              "dca_id"
            ],
            "properties": {
              "dca_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "dca_creation_amount",
        "max_spread",
        "native_asset",
        "refill_threshold"
      ],
      "properties": {
        "dca_creation_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "max_spread": {
          "$ref": "#/definitions/Decimal"
        },
        "native_asset": {
          "$ref": "#/definitions/AssetEntry"
        },
        "refill_threshold": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "d_c_a": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DCAResponse",
      "type": "object",
      "required": [
        "pool_references"
      ],
      "properties": {
        "dca": {
          "anyOf": [
            {
              "$ref": "#/definitions/DCAEntry"
            },
            {
              "type": "null"
            }
          ]
        },
        "pool_references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PoolReference"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AnsAsset": {
          "type": "object",
          "required": [
            "amount",
            "name"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "name": {
              "$ref": "#/definitions/AssetEntry"
            }
          }
        },
        "AssetEntry": {
          "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
          "type": "string"
        },
        "DCAEntry": {
          "type": "object",
          "required": [
            "dex",
            "frequency",
            "source_asset",
            "target_asset"
          ],
          "properties": {
            "dex": {
              "type": "string"
            },
            "frequency": {
              "$ref": "#/definitions/Frequency"
            },
            "source_asset": {
              "$ref": "#/definitions/AnsAsset"
            },
            "target_asset": {
              "$ref": "#/definitions/AssetEntry"
            }
          },
          "additionalProperties": false
        },
        "Frequency": {
          "oneOf": [
            {
              "description": "Blocks will schedule the next DCA purchase every `n` blocks.",
              "type": "object",
              "required": [
                "every_n_blocks"
              ],
              "properties": {
                "every_n_blocks": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time will schedule the next DCA purchase using crontab.",
              "type": "object",
              "required": [
                "cron"
              ],
              "properties": {
                "cron": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolAddressBase_for_Addr": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "separate_addresses"
              ],
              "properties": {
                "separate_addresses": {
                  "type": "object",
                  "required": [
                    "liquidity",
                    "swap"
                  ],
                  "properties": {
                    "liquidity": {
                      "$ref": "#/definitions/Addr"
                    },
                    "swap": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "contract"
              ],
              "properties": {
                "contract": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolReference": {
          "type": "object",
          "required": [
            "pool_address",
            "unique_id"
          ],
          "properties": {
            "pool_address": {
              "$ref": "#/definitions/PoolAddressBase_for_Addr"
            },
            "unique_id": {
              "$ref": "#/definitions/UniquePoolId"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UniquePoolId": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    }
  }
}
