/**
* This file was automatically generated by @abstract-money/ts-codegen@0.28.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx.js";
import { toUtf8 } from "@cosmjs/encoding";
import { AppExecuteMsg, AppExecuteMsgFactory } from "@abstract-money/abstract.js";
import { AssetEntry, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ConfigResponse, Addr, Uint128, TippersResponse, TipperResponse, TipCountResponse } from "./Template.types";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
export interface TemplateMessage {
  contractAddress: string;
  sender: string;
  tip: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    exchanges
  }: {
    exchanges?: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class TemplateMessageComposer implements TemplateMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.tip = this.tip.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  tip = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      tip: {}
    };
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    exchanges
  }: {
    exchanges?: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      update_config: {
        exchanges
      }
    };
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds
      })
    };
  };
}