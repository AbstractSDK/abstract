/**
* This file was automatically generated by @abstract-money/ts-codegen@0.28.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { CamelCasedProperties } from "type-fest";
import { SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { AbstractQueryClient, AbstractAccountQueryClient, AbstractAccountClient, AppExecuteMsg, AppExecuteMsgFactory, AbstractClient } from "@abstract-money/abstract.js";
import { StdFee, Coin } from "@cosmjs/amino";
import { AssetEntry, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, ConfigResponse, Addr, Uint128, TippersResponse, TipperResponse, TipCountResponse } from "./Template.types";
import { TemplateQueryMsgBuilder, TemplateExecuteMsgBuilder } from "./Template.msg-builder";
export interface ITemplateQueryClient {
  moduleId: string;
  accountQueryClient: AbstractAccountQueryClient;
  _moduleAddress: string | undefined;
  config: () => Promise<ConfigResponse>;
  tipper: (params: CamelCasedProperties<Extract<QueryMsg, {
    tipper: unknown;
  }>["tipper"]>) => Promise<TipperResponse>;
  tipCount: () => Promise<TipCountResponse>;
  listTippers: (params: CamelCasedProperties<Extract<QueryMsg, {
    list_tippers: unknown;
  }>["list_tippers"]>) => Promise<TippersResponse>;
  connectSigningClient: (signingClient: SigningCosmWasmClient, address: string) => TemplateClient;
  getAddress: () => Promise<string>;
}
export class TemplateQueryClient implements ITemplateQueryClient {
  accountQueryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    abstractQueryClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractQueryClient: AbstractQueryClient;
    accountId: number;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    this.accountQueryClient = new AbstractAccountQueryClient({
      abstract: abstractQueryClient,
      accountId,
      managerAddress,
      proxyAddress
    });
    this.moduleId = moduleId;
    this.config = this.config.bind(this);
    this.tipper = this.tipper.bind(this);
    this.tipCount = this.tipCount.bind(this);
    this.listTippers = this.listTippers.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this._query(TemplateQueryMsgBuilder.config());
  };
  tipper = async (params: CamelCasedProperties<Extract<QueryMsg, {
    tipper: unknown;
  }>["tipper"]>): Promise<TipperResponse> => {
    return this._query(TemplateQueryMsgBuilder.tipper(params));
  };
  tipCount = async (): Promise<TipCountResponse> => {
    return this._query(TemplateQueryMsgBuilder.tipCount());
  };
  listTippers = async (params: CamelCasedProperties<Extract<QueryMsg, {
    list_tippers: unknown;
  }>["list_tippers"]>): Promise<TippersResponse> => {
    return this._query(TemplateQueryMsgBuilder.listTippers(params));
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      this._moduleAddress = await this.accountQueryClient.getModuleAddress(this.moduleId);
    }

    return this._moduleAddress!;
  };
  connectSigningClient = (signingClient: SigningCosmWasmClient, address: string): TemplateClient => {
    return new TemplateClient({
      accountId: this.accountQueryClient.accountId,
      managerAddress: this.accountQueryClient.managerAddress,
      proxyAddress: this.accountQueryClient.proxyAddress,
      moduleId: this.moduleId,
      abstractClient: this.accountQueryClient.abstract.connectSigningClient(signingClient, address)
    });
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountQueryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "app",
      queryMsg
    });
  };
}
export interface ITemplateClient extends ITemplateQueryClient {
  accountClient: AbstractAccountClient;
  tip: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>["update_config"]>, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TemplateClient extends TemplateQueryClient implements ITemplateClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractClient: AbstractClient;
    accountId: number;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId
    });
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, abstractClient);
    this.tip = this.tip.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  tip = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(TemplateExecuteMsgBuilder.tip(), fee, memo, _funds);
  };
  updateConfig = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>["update_config"]>, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(TemplateExecuteMsgBuilder.updateConfig(params), fee, memo, _funds);
  };
  _execute = async (msg: ExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await this.accountClient.abstract.client.execute(this.accountClient.sender, await this.getAddress(), moduleMsg, fee, memo, _funds);
  };
}