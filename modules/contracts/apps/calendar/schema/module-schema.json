{
  "contract_name": "module-schema",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "denom",
      "end_time",
      "price_per_minute",
      "start_time",
      "utc_offset"
    ],
    "properties": {
      "denom": {
        "description": "The denom of the staked asset.",
        "allOf": [
          {
            "$ref": "#/definitions/AssetEntry"
          }
        ]
      },
      "end_time": {
        "description": "The end time for each day that meetings can be scheduled.",
        "allOf": [
          {
            "$ref": "#/definitions/Time"
          }
        ]
      },
      "price_per_minute": {
        "description": "The price per minute charged to determine the amount of stake necessary to request a meeting for a given length.",
        "allOf": [
          {
            "$ref": "#/definitions/Uint128"
          }
        ]
      },
      "start_time": {
        "description": "The start time for each day that meetings can be scheduled.",
        "allOf": [
          {
            "$ref": "#/definitions/Time"
          }
        ]
      },
      "utc_offset": {
        "description": "The utc offset of the timezone.",
        "type": "integer",
        "format": "int32"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "Time": {
        "description": "App instantiate message",
        "type": "object",
        "required": [
          "hour",
          "minute"
        ],
        "properties": {
          "hour": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          },
          "minute": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "App execute messages",
    "oneOf": [
      {
        "description": "Request a new meeting.",
        "type": "object",
        "required": [
          "request_meeting"
        ],
        "properties": {
          "request_meeting": {
            "type": "object",
            "required": [
              "end_time",
              "start_time"
            ],
            "properties": {
              "end_time": {
                "description": "The unix timestamp of the end datetime of the meeting.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Int64"
                  }
                ]
              },
              "start_time": {
                "description": "The unix timestamp of the start datetime of the meeting.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Int64"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Fully slashes the stake for a completed meeting. Admin only.",
        "type": "object",
        "required": [
          "slash_full_stake"
        ],
        "properties": {
          "slash_full_stake": {
            "type": "object",
            "required": [
              "day_datetime",
              "meeting_index"
            ],
            "properties": {
              "day_datetime": {
                "description": "The unix timestamp denoting the start of the day the meeting is on. This is equivalent to the \"time\" portion being all zero with respect to the `config.utc_offset`.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Int64"
                  }
                ]
              },
              "meeting_index": {
                "description": "The index of the meeting to be slashed.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Partially slashes the stake for a completed meeting based on how many minutes the requester was late by. Admin only.",
        "type": "object",
        "required": [
          "slash_partial_stake"
        ],
        "properties": {
          "slash_partial_stake": {
            "type": "object",
            "required": [
              "day_datetime",
              "meeting_index",
              "minutes_late"
            ],
            "properties": {
              "day_datetime": {
                "description": "The unix timestamp denoting the start of the day the meeting is on. This is equivalent to the \"time\" portion being all zero with respect to the `config.utc_offset`.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Int64"
                  }
                ]
              },
              "meeting_index": {
                "description": "The index of the meeting to be slashed.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              },
              "minutes_late": {
                "description": "The number of minutes the requester was late by resulting in a prorated slash.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the full stake for a completed meeting. Admin only.",
        "type": "object",
        "required": [
          "return_stake"
        ],
        "properties": {
          "return_stake": {
            "type": "object",
            "required": [
              "day_datetime",
              "meeting_index"
            ],
            "properties": {
              "day_datetime": {
                "description": "The unix timestamp denoting the start of the day the meeting is on. This is equivalent to the \"time\" portion being all zero with respect to the `config.utc_offset`.",
                "allOf": [
                  {
                    "$ref": "#/definitions/Int64"
                  }
                ]
              },
              "meeting_index": {
                "description": "The index of the meeting whose stake should be returned.",
                "type": "integer",
                "format": "uint32",
                "minimum": 0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the config. Admin only.",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "denom": {
                "description": "The updated denom.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/AssetEntry"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "price_per_minute": {
                "description": "The updated price per minute.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "Int64": {
        "description": "An implementation of i64 that is using strings for JSON encoding/decoding, such that the full i64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `i64` to get the value out:\n\n``` # use cosmwasm_std::Int64; let a = Int64::from(258i64); assert_eq!(a.i64(), 258); ```",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "App query messages",
    "oneOf": [
      {
        "description": "Returns the config.",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the meetings for a given day.",
        "type": "object",
        "required": [
          "meetings"
        ],
        "properties": {
          "meetings": {
            "type": "object",
            "required": [
              "day_datetime"
            ],
            "properties": {
              "day_datetime": {
                "$ref": "#/definitions/Int64"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Int64": {
        "description": "An implementation of i64 that is using strings for JSON encoding/decoding, such that the full i64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `i64` to get the value out:\n\n``` # use cosmwasm_std::Int64; let a = Int64::from(258i64); assert_eq!(a.i64(), 258); ```",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "string",
    "enum": []
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "end_time",
        "price_per_minute",
        "start_time",
        "utc_offset"
      ],
      "properties": {
        "end_time": {
          "$ref": "#/definitions/Time"
        },
        "price_per_minute": {
          "$ref": "#/definitions/Uint128"
        },
        "start_time": {
          "$ref": "#/definitions/Time"
        },
        "utc_offset": {
          "type": "integer",
          "format": "int32"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Time": {
          "description": "App instantiate message",
          "type": "object",
          "required": [
            "hour",
            "minute"
          ],
          "properties": {
            "hour": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            },
            "minute": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "meetings": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MeetingsResponse",
      "type": "object",
      "required": [
        "meetings"
      ],
      "properties": {
        "meetings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Meeting"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Meeting": {
          "type": "object",
          "required": [
            "amount_staked",
            "end_time",
            "requester",
            "start_time"
          ],
          "properties": {
            "amount_staked": {
              "$ref": "#/definitions/Uint128"
            },
            "end_time": {
              "type": "integer",
              "format": "int64"
            },
            "requester": {
              "$ref": "#/definitions/Addr"
            },
            "start_time": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
