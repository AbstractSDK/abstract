{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "type": "object",
  "required": [
    "end_time",
    "price_per_minute",
    "start_time",
    "utc_offset"
  ],
  "properties": {
    "end_time": {
      "$ref": "#/definitions/Time"
    },
    "price_per_minute": {
      "$ref": "#/definitions/Uint128"
    },
    "start_time": {
      "$ref": "#/definitions/Time"
    },
    "utc_offset": {
      "type": "integer",
      "format": "int32"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Time": {
      "description": "App instantiate message",
      "type": "object",
      "required": [
        "hour",
        "minute"
      ],
      "properties": {
        "hour": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "minute": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
