{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Wrapper around all possible messages that can be sent to the module.",
  "oneOf": [
    {
      "description": "A configuration message, defined by the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "An app request defined by a base consumer.",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/AdapterRequestMsg_for_DexExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "IbcReceive to process IBC callbacks In order to trust this, the apps and adapters verify this comes from the ibc-client contract.",
      "type": "object",
      "required": [
        "ibc_callback"
      ],
      "properties": {
        "ibc_callback": {
          "$ref": "#/definitions/IbcResponseMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ModuleIbc endpoint to receive messages from modules on other chains In order to trust this, the apps and adapters verify this comes from the ibc-host contract. They should also trust the sending chain",
      "type": "object",
      "required": [
        "module_ibc"
      ],
      "properties": {
        "module_ibc": {
          "$ref": "#/definitions/ModuleIbcMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receive endpoint for CW20 / external service integrations",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Empty"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AccountId": {
      "description": "Unique identifier for an account. On each chain this is unique.",
      "type": "object",
      "required": [
        "seq",
        "trace"
      ],
      "properties": {
        "seq": {
          "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trace": {
          "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
          "allOf": [
            {
              "$ref": "#/definitions/AccountTrace"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AccountTrace": {
      "description": "The identifier of chain that triggered the account creation",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "local"
          ]
        },
        {
          "type": "object",
          "required": [
            "remote"
          ],
          "properties": {
            "remote": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AdapterBaseMsg": {
      "description": "Configuration message for the adapter",
      "oneOf": [
        {
          "description": "Add or remove authorized addresses If an authorized address is both in to_add and to_remove, it will be removed.",
          "type": "object",
          "required": [
            "update_authorized_addresses"
          ],
          "properties": {
            "update_authorized_addresses": {
              "type": "object",
              "required": [
                "to_add",
                "to_remove"
              ],
              "properties": {
                "to_add": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "to_remove": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AdapterRequestMsg_for_DexExecuteMsg": {
      "description": "An adapter request. If proxy is None, then the sender must be an Account manager and the proxy address is extrapolated from the Account id.",
      "type": "object",
      "required": [
        "request"
      ],
      "properties": {
        "proxy_address": {
          "type": [
            "string",
            "null"
          ]
        },
        "request": {
          "description": "The actual request",
          "allOf": [
            {
              "$ref": "#/definitions/DexExecuteMsg"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetBase_for_String": {
      "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Specifies the asset's amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Specifies the asset's type (CW20 or native)",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "AssetInfoBase_for_String": {
      "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Attribute": {
      "description": "An key value pair that is used in the context of event attributes in logs",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "BankQuery": {
      "oneOf": [
        {
          "description": "This calls into the native bank module for querying the total supply of one denomination. It does the same as the SupplyOf call in Cosmos SDK's RPC API. Return value is of type SupplyResponse.",
          "type": "object",
          "required": [
            "supply"
          ],
          "properties": {
            "supply": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This calls into the native bank module for one denomination Return value is BalanceResponse",
          "type": "object",
          "required": [
            "balance"
          ],
          "properties": {
            "balance": {
              "type": "object",
              "required": [
                "address",
                "denom"
              ],
              "properties": {
                "address": {
                  "type": "string"
                },
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This calls into the native bank module for all denominations. Note that this may be much more expensive than Balance and should be avoided if possible. Return value is AllBalanceResponse.",
          "type": "object",
          "required": [
            "all_balances"
          ],
          "properties": {
            "all_balances": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This calls into the native bank module for querying metadata for a specific bank token. Return value is DenomMetadataResponse",
          "type": "object",
          "required": [
            "denom_metadata"
          ],
          "properties": {
            "denom_metadata": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This calls into the native bank module for querying metadata for all bank tokens that have a metadata entry. Return value is AllDenomMetadataResponse",
          "type": "object",
          "required": [
            "all_denom_metadata"
          ],
          "properties": {
            "all_denom_metadata": {
              "type": "object",
              "properties": {
                "pagination": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/PageRequest"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BaseExecuteMsg": {
      "type": "object",
      "required": [
        "msg"
      ],
      "properties": {
        "msg": {
          "$ref": "#/definitions/AdapterBaseMsg"
        },
        "proxy_address": {
          "description": "The Proxy address for which to apply the configuration If None, the sender must be an Account manager and the configuration is applied to its associated proxy. If Some, the sender must be a direct or indirect owner (through sub-accounts) of the specified proxy.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Callback": {
      "description": "Callback from modules, that is turned into an IbcResponseMsg by the ibc client A callback can only be sent to itself",
      "type": "object",
      "required": [
        "msg"
      ],
      "properties": {
        "msg": {
          "description": "Used to add information to the callback. This is usually used to provide information to the ibc callback function for context",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ChainName": {
      "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DexAnsAction": {
      "description": "Possible actions to perform on the DEX",
      "oneOf": [
        {
          "description": "Provide arbitrary liquidity",
          "type": "object",
          "required": [
            "provide_liquidity"
          ],
          "properties": {
            "provide_liquidity": {
              "type": "object",
              "required": [
                "assets"
              ],
              "properties": {
                "assets": {
                  "description": "Assets to add",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnsAsset"
                  }
                },
                "max_spread": {
                  "description": "Max spread to accept, is a percentage represented as a decimal.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Provide liquidity equally between assets to a pool",
          "type": "object",
          "required": [
            "provide_liquidity_symmetric"
          ],
          "properties": {
            "provide_liquidity_symmetric": {
              "type": "object",
              "required": [
                "offer_asset",
                "paired_assets"
              ],
              "properties": {
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                },
                "paired_assets": {
                  "description": "Assets that are paired with the offered asset Should exclude the offer asset",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetEntry"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Withdraw liquidity from a pool",
          "type": "object",
          "required": [
            "withdraw_liquidity"
          ],
          "properties": {
            "withdraw_liquidity": {
              "type": "object",
              "required": [
                "lp_token"
              ],
              "properties": {
                "lp_token": {
                  "description": "The asset LP token that is provided.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Standard swap between one asset to another",
          "type": "object",
          "required": [
            "swap"
          ],
          "properties": {
            "swap": {
              "type": "object",
              "required": [
                "ask_asset",
                "offer_asset"
              ],
              "properties": {
                "ask_asset": {
                  "description": "The asset to receive",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetEntry"
                    }
                  ]
                },
                "belief_price": {
                  "description": "The belief price when submitting the transaction.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "max_spread": {
                  "description": "The percentage of spread compared to pre-swap price or belief price (if provided)",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DexExecuteMsg": {
      "description": "Dex Execute msg",
      "oneOf": [
        {
          "description": "Update the fee",
          "type": "object",
          "required": [
            "update_fee"
          ],
          "properties": {
            "update_fee": {
              "type": "object",
              "properties": {
                "recipient_account": {
                  "description": "New recipient account for fees",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "swap_fee": {
                  "description": "New fee to set",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Action to perform on the DEX with ans asset denomination",
          "type": "object",
          "required": [
            "ans_action"
          ],
          "properties": {
            "ans_action": {
              "type": "object",
              "required": [
                "action",
                "dex"
              ],
              "properties": {
                "action": {
                  "description": "The action to perform",
                  "allOf": [
                    {
                      "$ref": "#/definitions/DexAnsAction"
                    }
                  ]
                },
                "dex": {
                  "description": "The name of the dex to interact with",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Action to perform on the DEX with raw asset denominations",
          "type": "object",
          "required": [
            "raw_action"
          ],
          "properties": {
            "raw_action": {
              "type": "object",
              "required": [
                "action",
                "dex"
              ],
              "properties": {
                "action": {
                  "description": "The action to perform",
                  "allOf": [
                    {
                      "$ref": "#/definitions/DexRawAction"
                    }
                  ]
                },
                "dex": {
                  "description": "The name of the dex to interact with",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DexRawAction": {
      "description": "Possible raw actions to perform on the DEX",
      "oneOf": [
        {
          "description": "Provide arbitrary liquidity",
          "type": "object",
          "required": [
            "provide_liquidity"
          ],
          "properties": {
            "provide_liquidity": {
              "type": "object",
              "required": [
                "assets",
                "pool"
              ],
              "properties": {
                "assets": {
                  "description": "Assets to add",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetBase_for_String"
                  }
                },
                "max_spread": {
                  "description": "Max spread to accept, is a percentage represented as a decimal.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "pool": {
                  "description": "Pool to provide liquidity to",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Provide liquidity equally between assets to a pool",
          "type": "object",
          "required": [
            "provide_liquidity_symmetric"
          ],
          "properties": {
            "provide_liquidity_symmetric": {
              "type": "object",
              "required": [
                "offer_asset",
                "paired_assets",
                "pool"
              ],
              "properties": {
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetBase_for_String"
                    }
                  ]
                },
                "paired_assets": {
                  "description": "Assets that are paired with the offered asset Should exclude the offer asset",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetInfoBase_for_String"
                  }
                },
                "pool": {
                  "description": "Pool to provide liquidity to",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Withdraw liquidity from a pool",
          "type": "object",
          "required": [
            "withdraw_liquidity"
          ],
          "properties": {
            "withdraw_liquidity": {
              "type": "object",
              "required": [
                "lp_token",
                "pool"
              ],
              "properties": {
                "lp_token": {
                  "description": "The asset LP token that is provided.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetBase_for_String"
                    }
                  ]
                },
                "pool": {
                  "description": "Pool to withdraw liquidity from",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Standard swap between one asset to another",
          "type": "object",
          "required": [
            "swap"
          ],
          "properties": {
            "swap": {
              "type": "object",
              "required": [
                "ask_asset",
                "offer_asset",
                "pool"
              ],
              "properties": {
                "ask_asset": {
                  "description": "The asset to receive",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetInfoBase_for_String"
                    }
                  ]
                },
                "belief_price": {
                  "description": "The belief price when submitting the transaction.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "max_spread": {
                  "description": "The percentage of spread compared to pre-swap price or belief price (if provided)",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetBase_for_String"
                    }
                  ]
                },
                "pool": {
                  "description": "Pool used to swap",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DistributionQuery": {
      "oneOf": [
        {
          "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L222-L230>",
          "type": "object",
          "required": [
            "delegator_withdraw_address"
          ],
          "properties": {
            "delegator_withdraw_address": {
              "type": "object",
              "required": [
                "delegator_address"
              ],
              "properties": {
                "delegator_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L157-L167>",
          "type": "object",
          "required": [
            "delegation_rewards"
          ],
          "properties": {
            "delegation_rewards": {
              "type": "object",
              "required": [
                "delegator_address",
                "validator_address"
              ],
              "properties": {
                "delegator_address": {
                  "type": "string"
                },
                "validator_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "See <https://github.com/cosmos/cosmos-sdk/blob/c74e2887b0b73e81d48c2f33e6b1020090089ee0/proto/cosmos/distribution/v1beta1/query.proto#L180-L187>",
          "type": "object",
          "required": [
            "delegation_total_rewards"
          ],
          "properties": {
            "delegation_total_rewards": {
              "type": "object",
              "required": [
                "delegator_address"
              ],
              "properties": {
                "delegator_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "See <https://github.com/cosmos/cosmos-sdk/blob/b0acf60e6c39f7ab023841841fc0b751a12c13ff/proto/cosmos/distribution/v1beta1/query.proto#L202-L210>",
          "type": "object",
          "required": [
            "delegator_validators"
          ],
          "properties": {
            "delegator_validators": {
              "type": "object",
              "required": [
                "delegator_address"
              ],
              "properties": {
                "delegator_address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "error",
        "message_index"
      ],
      "properties": {
        "error": {
          "description": "The error that occured executing the message.",
          "type": "string"
        },
        "message_index": {
          "description": "The index of the first message who's execution failed.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Event": {
      "description": "A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]), which then get magically converted to bytes for Tendermint somewhere between the Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/main/learn/advanced/events [*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70",
      "type": "object",
      "required": [
        "attributes",
        "type"
      ],
      "properties": {
        "attributes": {
          "description": "The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/main/learn/advanced/events",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "type": {
          "description": "The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.",
          "type": "string"
        }
      }
    },
    "ExecutionResponse": {
      "type": "object",
      "required": [
        "executed_by",
        "result"
      ],
      "properties": {
        "executed_by": {
          "description": "The address on the remote chain that executed the messages.",
          "type": "string"
        },
        "result": {
          "description": "Index `i` corresponds to the result of executing the `i`th message.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubMsgResponse"
          }
        }
      },
      "additionalProperties": false
    },
    "IbcQuery": {
      "description": "These are queries to the various IBC modules to see the state of the contract's IBC connection. These will return errors if the contract is not \"ibc enabled\"",
      "oneOf": [
        {
          "description": "Gets the Port ID the current contract is bound to.\n\nReturns a `PortIdResponse`.",
          "type": "object",
          "required": [
            "port_id"
          ],
          "properties": {
            "port_id": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Lists all channels that are bound to a given port. If `port_id` is omitted, this list all channels bound to the contract's port.\n\nReturns a `ListChannelsResponse`.",
          "type": "object",
          "required": [
            "list_channels"
          ],
          "properties": {
            "list_channels": {
              "type": "object",
              "properties": {
                "port_id": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Lists all information for a (portID, channelID) pair. If port_id is omitted, it will default to the contract's own channel. (To save a PortId{} call)\n\nReturns a `ChannelResponse`.",
          "type": "object",
          "required": [
            "channel"
          ],
          "properties": {
            "channel": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "type": "string"
                },
                "port_id": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcResponseMsg": {
      "description": "IbcResponseMsg should be de/serialized under `IbcCallback()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "callback",
        "result"
      ],
      "properties": {
        "callback": {
          "description": "The msg sent with the callback request.",
          "allOf": [
            {
              "$ref": "#/definitions/Callback"
            }
          ]
        },
        "result": {
          "$ref": "#/definitions/IbcResult"
        }
      },
      "additionalProperties": false
    },
    "IbcResult": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "query": {
              "type": "object",
              "required": [
                "queries",
                "results"
              ],
              "properties": {
                "queries": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/QueryRequest_for_ModuleQuery"
                  }
                },
                "results": {
                  "$ref": "#/definitions/Result_of_Array_of_Binary_or_ErrorResponse"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "type": "object",
              "required": [
                "initiator_msg",
                "result"
              ],
              "properties": {
                "initiator_msg": {
                  "$ref": "#/definitions/Binary"
                },
                "result": {
                  "$ref": "#/definitions/Result_of_ExecutionResponse_or_String"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "An error occured that could not be recovered from. The only known way that this can occur is message handling running out of gas, in which case the error will be `codespace: sdk, code: 11`.\n\nThis error is not named becuase it could also occur due to a panic or unhandled error during message processing. We don't expect this to happen and have carefully written the code to avoid it.",
          "type": "object",
          "required": [
            "fatal_error"
          ],
          "properties": {
            "fatal_error": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "InstalledModuleIdentification": {
      "description": "This is used for identifying calling modules For adapters, we don't need the account id because it's independent of an account For apps and standalone, the account id is used to identify the calling module",
      "type": "object",
      "required": [
        "module_info"
      ],
      "properties": {
        "account_id": {
          "anyOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "type": "null"
            }
          ]
        },
        "module_info": {
          "$ref": "#/definitions/ModuleInfo"
        }
      },
      "additionalProperties": false
    },
    "ModuleIbcInfo": {
      "type": "object",
      "required": [
        "chain",
        "module"
      ],
      "properties": {
        "chain": {
          "description": "Remote chain identification",
          "allOf": [
            {
              "$ref": "#/definitions/ChainName"
            }
          ]
        },
        "module": {
          "description": "Information about the module that called ibc action on this module",
          "allOf": [
            {
              "$ref": "#/definitions/ModuleInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModuleIbcMsg": {
      "type": "object",
      "required": [
        "msg",
        "src_module_info"
      ],
      "properties": {
        "msg": {
          "description": "The message sent by the module",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "src_module_info": {
          "description": "Sender Module Identification",
          "allOf": [
            {
              "$ref": "#/definitions/ModuleIbcInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModuleInfo": {
      "description": "Stores the namespace, name, and version of an Abstract module.",
      "type": "object",
      "required": [
        "name",
        "namespace",
        "version"
      ],
      "properties": {
        "name": {
          "description": "Name of the contract",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the module",
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            }
          ]
        },
        "version": {
          "description": "Version of the module",
          "allOf": [
            {
              "$ref": "#/definitions/ModuleVersion"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModuleQuery": {
      "type": "object",
      "required": [
        "msg",
        "target_module"
      ],
      "properties": {
        "msg": {
          "description": "The WasmQuery::Smart request to the module",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "target_module": {
          "description": "Information about the module that gets queried through ibc",
          "allOf": [
            {
              "$ref": "#/definitions/InstalledModuleIdentification"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModuleVersion": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "latest"
          ]
        },
        {
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "version": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Namespace": {
      "description": "Represents an Abstract namespace for modules",
      "type": "string"
    },
    "PageRequest": {
      "description": "Simplified version of the PageRequest type for pagination from the cosmos-sdk",
      "type": "object",
      "required": [
        "limit",
        "reverse"
      ],
      "properties": {
        "key": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "limit": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "reverse": {
          "type": "boolean"
        }
      }
    },
    "PoolAddressBase_for_String": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "separate_addresses"
          ],
          "properties": {
            "separate_addresses": {
              "type": "object",
              "required": [
                "liquidity",
                "swap"
              ],
              "properties": {
                "liquidity": {
                  "type": "string"
                },
                "swap": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract"
          ],
          "properties": {
            "contract": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "QueryRequest_for_ModuleQuery": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/ModuleQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "$ref": "#/definitions/StakingQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "distribution"
          ],
          "properties": {
            "distribution": {
              "$ref": "#/definitions/DistributionQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "A Stargate query is encoded the same way as abci_query, with path and protobuf encoded request data. The format is defined in [ADR-21](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-021-protobuf-query-encoding.md). The response is protobuf encoded data directly without a JSON response wrapper. The caller is responsible for compiling the proper protobuf definitions for both requests and responses.",
          "type": "object",
          "required": [
            "stargate"
          ],
          "properties": {
            "stargate": {
              "type": "object",
              "required": [
                "data",
                "path"
              ],
              "properties": {
                "data": {
                  "description": "this is the expected protobuf message type (not any), binary encoded",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                },
                "path": {
                  "description": "this is the fully qualified service path used for routing, eg. custom/cosmos_sdk.x.bank.v1.Query/QueryBalance",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ibc"
          ],
          "properties": {
            "ibc": {
              "$ref": "#/definitions/IbcQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmQuery"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Result_of_Array_of_Binary_or_ErrorResponse": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Ok"
          ],
          "properties": {
            "Ok": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Binary"
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "Err"
          ],
          "properties": {
            "Err": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      ]
    },
    "Result_of_ExecutionResponse_or_String": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Ok"
          ],
          "properties": {
            "Ok": {
              "$ref": "#/definitions/ExecutionResponse"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "Err"
          ],
          "properties": {
            "Err": {
              "type": "string"
            }
          }
        }
      ]
    },
    "StakingQuery": {
      "oneOf": [
        {
          "description": "Returns the denomination that can be bonded (if there are multiple native tokens on the chain)",
          "type": "object",
          "required": [
            "bonded_denom"
          ],
          "properties": {
            "bonded_denom": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AllDelegations will return all delegations by the delegator",
          "type": "object",
          "required": [
            "all_delegations"
          ],
          "properties": {
            "all_delegations": {
              "type": "object",
              "required": [
                "delegator"
              ],
              "properties": {
                "delegator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Delegation will return more detailed info on a particular delegation, defined by delegator/validator pair",
          "type": "object",
          "required": [
            "delegation"
          ],
          "properties": {
            "delegation": {
              "type": "object",
              "required": [
                "delegator",
                "validator"
              ],
              "properties": {
                "delegator": {
                  "type": "string"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns all validators in the currently active validator set.\n\nThe query response type is `AllValidatorsResponse`.",
          "type": "object",
          "required": [
            "all_validators"
          ],
          "properties": {
            "all_validators": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns the validator at the given address. Returns None if the validator is not part of the currently active validator set.\n\nThe query response type is `ValidatorResponse`.",
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "The validator's address (e.g. (e.g. cosmosvaloper1...))",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SubMsgResponse": {
      "description": "The information we get back from a successful sub message execution, with full Cosmos SDK events.",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "data": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "WasmQuery": {
      "oneOf": [
        {
          "description": "this queries the public API of another contract at a known address (with known ABI) Return value is whatever the contract returns (caller should know), wrapped in a ContractResult that is JSON encoded.",
          "type": "object",
          "required": [
            "smart"
          ],
          "properties": {
            "smart": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the json-encoded QueryMsg struct",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "this queries the raw kv-store of the contract. returns the raw, unparsed data stored at that key, which may be an empty vector if not present",
          "type": "object",
          "required": [
            "raw"
          ],
          "properties": {
            "raw": {
              "type": "object",
              "required": [
                "contract_addr",
                "key"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "key": {
                  "description": "Key is the raw key used in the contracts Storage",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns a [`ContractInfoResponse`] with metadata on the contract from the runtime",
          "type": "object",
          "required": [
            "contract_info"
          ],
          "properties": {
            "contract_info": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns a [`CodeInfoResponse`] with metadata of the code",
          "type": "object",
          "required": [
            "code_info"
          ],
          "properties": {
            "code_info": {
              "type": "object",
              "required": [
                "code_id"
              ],
              "properties": {
                "code_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
