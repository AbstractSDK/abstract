[workspace]
members = [
  "packages/abstract-*",
  "packages/standards/*",
  "contracts/native/*",
  "contracts/account/",
]

# Enable the version 2 feature resolver, which avoids unifying features for targets that are not being built
#
# Critically this prevents dev-dependencies from enabling features even when not building a target that
# uses dev-dependencies, e.g. the library crate. This in turn ensures that we can catch invalid feature
# flag combinations that would otherwise only surface in dependent crates
#
# Reference - https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2
# See - https://github.com/apache/arrow-rs/pull/1822/files
resolver = "2"

[workspace.package]
authors = [
  "CyberHoward <cyberhoward@protonmail.com>",
  "Riada <riada@abstract.money>",
  "Abstract Money <contact@abstract.money>",
]
documentation = "https://docs.abstract.money/"
edition = "2021"
homepage = "https://abstract.money"
keywords = ["cosmos", "cosmwasm", "framework"]
license = "LGPL-3.0"
repository = "https://github.com/AbstractSDK/abstract"
version = "0.26.1"

[workspace.dependencies]
cosmwasm-schema = { version = "2.0" }
cosmwasm-std    = { version = "2.0.0", features = ["cosmwasm_2_0"] }
cw-controllers  = { version = "2.0" }
cw-storage-plus = "2.0.0"
cw-utils        = { version = "2.0" }
cw2             = { version = "2.0" }
cw20            = { version = "2.0" }
cw20-base       = { version = "2.0", features = ["library"] }

cw-address-like = { version = "2.0" }
cw-asset        = { version = "4.0" }
cw-clearable    = { version = "0.2.0" }
cw-ownable      = { version = "2.0" }
serde-cw-value  = "0.7.0"

anybuf    = { version = "0.5.0" }
protobuf  = { version = "2", features = ["with-bytes"] }
schemars  = "0.8"
serde     = { version = "1.0", default-features = false, features = ["derive"] }
thiserror = { version = "1.0.50" }

clap               = { version = "4.0.32", features = ["derive"] }
cw-orch            = { version = "0.27.0" }
cw-orch-interchain = { version = "0.8.1" }
semver             = "1.0"
tokio              = { version = "1.4", features = ["full"] }

cw-orch-polytone = { package = "abstract-cw-orch-polytone", version = "6.0.1" }
polytone         = { package = "abstract-polytone", version = "2.0.0" }
polytone-note    = { package = "abstract-polytone-note", version = "5.0.0" }


## crates in order of publishing ## see docs/Publishing.md

abstract-adapter    = { path = "packages/abstract-adapter", version = "0.26.1" }
abstract-app        = { path = "packages/abstract-app", version = "0.26.1" }
abstract-standalone = { path = "packages/abstract-standalone", version = "0.26.1" }

# Keep these as path, creates cirular dependency otherwise
# Only need to re-publish all contracts if a re-publish of abstract-interface is required
abstract-interface = { path = "packages/abstract-interface" }
ans-host           = { package = "abstract-ans-host", path = "contracts/native/ans-host" }
module-factory     = { package = "abstract-module-factory", path = "contracts/native/module-factory" }
registry           = { package = "abstract-registry", path = "contracts/native/registry" }

# Ibc
ibc-client = { package = "abstract-ibc-client", path = "contracts/native/ibc-client" }
ibc-host   = { package = "abstract-ibc-host", path = "contracts/native/ibc-host" }

abstract-account = { path = "contracts/account", default-features = false }

abstract-ica     = { version = "0.26.1", path = "packages/abstract-ica" }
abstract-sdk     = { version = "0.26.1", path = "packages/abstract-sdk" }
abstract-std     = { version = "0.26.1", path = "packages/abstract-std" }
abstract-testing = { version = "0.26.1", path = "packages/abstract-testing" }
abstract-xion    = { package = "xion-account", version = "=0.1.1", features = ["library"] }

# These should remain fixed and don't need to be re-published (unless changes are made)
abstract-macros = { version = "0.26.1", path = "packages/abstract-macros" }

abstract-adapter-utils    = { version = "0.26.1", path = "packages/standards/utils" }
abstract-dex-standard     = { path = "packages/standards/dex" }
abstract-staking-standard = { path = "packages/standards/staking" }

abstract-integration-tests = { path = "packages/abstract-integration-tests" }

## Testing
anyhow          = "1"
coverage-helper = { version = "0.2.2" }
rstest          = "0.17.0"

# Predictable abstract addresses
cw-blob = { version = "=0.2.0", features = ["library"] }

[profile.dev]
opt-level = 1
[profile.dev.package."*"]
opt-level = 3

# Backup release profile, will result in warnings during optimization
[profile.release]
codegen-units    = 1
debug            = false
debug-assertions = false
incremental      = false
lto              = true
opt-level        = 's'
overflow-checks  = true
panic            = 'abort'
rpath            = false


[workspace.metadata.cargo-udeps.ignore]
# ensures CI doens't flag workspace-hack as unused dep
development = ["workspace-hack"]
normal      = ["workspace-hack"]

[workspace.lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage,coverage_nightly)'] }
