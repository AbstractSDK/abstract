{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "App execute messages",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "request_meeting"
      ],
      "properties": {
        "request_meeting": {
          "type": "object",
          "required": [
            "end_time",
            "start_time"
          ],
          "properties": {
            "end_time": {
              "$ref": "#/definitions/Int64"
            },
            "start_time": {
              "$ref": "#/definitions/Int64"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "slash_full_stake"
      ],
      "properties": {
        "slash_full_stake": {
          "type": "object",
          "required": [
            "day_datetime",
            "meeting_index"
          ],
          "properties": {
            "day_datetime": {
              "$ref": "#/definitions/Int64"
            },
            "meeting_index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "slash_partial_stake"
      ],
      "properties": {
        "slash_partial_stake": {
          "type": "object",
          "required": [
            "day_datetime",
            "meeting_index",
            "minutes_late"
          ],
          "properties": {
            "day_datetime": {
              "$ref": "#/definitions/Int64"
            },
            "meeting_index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "minutes_late": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "return_stake"
      ],
      "properties": {
        "return_stake": {
          "type": "object",
          "required": [
            "day_datetime",
            "meeting_index"
          ],
          "properties": {
            "day_datetime": {
              "$ref": "#/definitions/Int64"
            },
            "meeting_index": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "denom": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AssetEntry"
                },
                {
                  "type": "null"
                }
              ]
            },
            "price_per_minute": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "Int64": {
      "description": "An implementation of i64 that is using strings for JSON encoding/decoding, such that the full i64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `i64` to get the value out:\n\n``` # use cosmwasm_std::Int64; let a = Int64::from(258i64); assert_eq!(a.i64(), 258); ```",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
