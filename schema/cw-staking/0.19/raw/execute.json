{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "A request message that's sent to this staking adapter",
  "type": "object",
  "required": [
    "action",
    "provider"
  ],
  "properties": {
    "action": {
      "description": "the action to execute, see [StakingAction]",
      "allOf": [
        {
          "$ref": "#/definitions/StakingAction"
        }
      ]
    },
    "provider": {
      "description": "The name of the staking provider",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StakingAction": {
      "description": "Possible actions to perform on the staking contract All provide an asset [AnsAsset] information",
      "oneOf": [
        {
          "description": "Stakes/bonds a given token",
          "type": "object",
          "required": [
            "stake"
          ],
          "properties": {
            "stake": {
              "type": "object",
              "required": [
                "assets"
              ],
              "properties": {
                "assets": {
                  "description": "The ANS-resolvable asset information of the assets to stake.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnsAsset"
                  }
                },
                "unbonding_period": {
                  "description": "The unbonding period for the specified stake.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Duration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Unstake/unbond a given token",
          "type": "object",
          "required": [
            "unstake"
          ],
          "properties": {
            "unstake": {
              "type": "object",
              "required": [
                "assets"
              ],
              "properties": {
                "assets": {
                  "description": "The ANS-resolvable asset information of the assets to unstake.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnsAsset"
                  }
                },
                "unbonding_period": {
                  "description": "The unbonding period for the specified stake.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Duration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Claim rewards for a set of staked assets.",
          "type": "object",
          "required": [
            "claim_rewards"
          ],
          "properties": {
            "claim_rewards": {
              "type": "object",
              "required": [
                "assets"
              ],
              "properties": {
                "assets": {
                  "description": "Staked assets to claim rewards for.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetEntry"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Claim matured unbonding tokens",
          "type": "object",
          "required": [
            "claim"
          ],
          "properties": {
            "claim": {
              "type": "object",
              "required": [
                "assets"
              ],
              "properties": {
                "assets": {
                  "description": "Unbonded staking assets to claim.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetEntry"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
