{
  "contract_name": "abstract-version-control",
  "contract_version": "0.16.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Version Control Instantiate Msg",
    "type": "object",
    "required": [
      "namespace_limit"
    ],
    "properties": {
      "allow_direct_module_registration": {
        "type": [
          "boolean",
          "null"
        ]
      },
      "namespace_limit": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "namespace_registration_fee": {
        "anyOf": [
          {
            "$ref": "#/definitions/Coin"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Version Control Execute Msg",
    "oneOf": [
      {
        "description": "Remove some version of a module",
        "type": "object",
        "required": [
          "remove_module"
        ],
        "properties": {
          "remove_module": {
            "type": "object",
            "required": [
              "module"
            ],
            "properties": {
              "module": {
                "$ref": "#/definitions/ModuleInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Yank a version of a module so that it may not be installed Only callable by Admin",
        "type": "object",
        "required": [
          "yank_module"
        ],
        "properties": {
          "yank_module": {
            "type": "object",
            "required": [
              "module"
            ],
            "properties": {
              "module": {
                "$ref": "#/definitions/ModuleInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Propose new modules to the version registry Namespaces need to be claimed by the Account before proposing modules Once proposed, the modules need to be approved by the Admin via [`ExecuteMsg::ApproveOrRejectModules`]",
        "type": "object",
        "required": [
          "propose_modules"
        ],
        "properties": {
          "propose_modules": {
            "type": "object",
            "required": [
              "modules"
            ],
            "properties": {
              "modules": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/ModuleInfo"
                    },
                    {
                      "$ref": "#/definitions/ModuleReference"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Sets the monetization configuration for a module. The version doesn't matter here, but we keep it for compatibility purposes Only callable by namespace admin",
        "type": "object",
        "required": [
          "set_module_monetization"
        ],
        "properties": {
          "set_module_monetization": {
            "type": "object",
            "required": [
              "module_name",
              "monetization",
              "namespace"
            ],
            "properties": {
              "module_name": {
                "type": "string"
              },
              "monetization": {
                "$ref": "#/definitions/Monetization"
              },
              "namespace": {
                "$ref": "#/definitions/Namespace"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Approve or reject modules This takes the modules in the pending_modules map and moves them to the registered_modules map or yanked_modules map",
        "type": "object",
        "required": [
          "approve_or_reject_modules"
        ],
        "properties": {
          "approve_or_reject_modules": {
            "type": "object",
            "required": [
              "approves",
              "rejects"
            ],
            "properties": {
              "approves": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ModuleInfo"
                }
              },
              "rejects": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ModuleInfo"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim namespaces",
        "type": "object",
        "required": [
          "claim_namespaces"
        ],
        "properties": {
          "claim_namespaces": {
            "type": "object",
            "required": [
              "account_id",
              "namespaces"
            ],
            "properties": {
              "account_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              "namespaces": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove namespace claims Only admin or root user can call this",
        "type": "object",
        "required": [
          "remove_namespaces"
        ],
        "properties": {
          "remove_namespaces": {
            "type": "object",
            "required": [
              "namespaces"
            ],
            "properties": {
              "namespaces": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Register a new Account to the deployed Accounts. Only Factory can call this",
        "type": "object",
        "required": [
          "add_account"
        ],
        "properties": {
          "add_account": {
            "type": "object",
            "required": [
              "account_base",
              "account_id"
            ],
            "properties": {
              "account_base": {
                "$ref": "#/definitions/AccountBase"
              },
              "account_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates configuration of the VC contract. Available Config : 1. Whether the contract allows direct module registration 2. the number of namespaces an Account can claim",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "allow_direct_module_registration": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "namespace_limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "namespace_registration_fee": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Coin"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Sets a new Factory",
        "type": "object",
        "required": [
          "set_factory"
        ],
        "properties": {
          "set_factory": {
            "type": "object",
            "required": [
              "new_factory"
            ],
            "properties": {
              "new_factory": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the contract's ownership. The `action` to be provided can be either to propose transferring ownership to an account, accept a pending ownership transfer, or renounce the ownership permanently.",
        "type": "object",
        "required": [
          "update_ownership"
        ],
        "properties": {
          "update_ownership": {
            "$ref": "#/definitions/Action"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountBase": {
        "description": "Contains the minimal Abstract Account contract addresses.",
        "type": "object",
        "required": [
          "manager",
          "proxy"
        ],
        "properties": {
          "manager": {
            "$ref": "#/definitions/Addr"
          },
          "proxy": {
            "$ref": "#/definitions/Addr"
          }
        },
        "additionalProperties": false
      },
      "Action": {
        "description": "Actions that can be taken to alter the contract's ownership",
        "oneOf": [
          {
            "description": "Propose to transfer the contract's ownership to another account, optionally with an expiry time.\n\nCan only be called by the contract's current owner.\n\nAny existing pending ownership transfer is overwritten.",
            "type": "object",
            "required": [
              "transfer_ownership"
            ],
            "properties": {
              "transfer_ownership": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "expiry": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accept the pending ownership transfer.\n\nCan only be called by the pending owner.",
            "type": "string",
            "enum": [
              "accept_ownership"
            ]
          },
          {
            "description": "Give up the contract's ownership and the possibility of appointing a new owner.\n\nCan only be invoked by the contract's current owner.\n\nAny existing pending ownership transfer is canceled.",
            "type": "string",
            "enum": [
              "renounce_ownership"
            ]
          }
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FixedFee": {
        "description": "A wrapper around Coin to help handle fixed fees (with multiples).",
        "type": "object",
        "required": [
          "fee"
        ],
        "properties": {
          "fee": {
            "description": "Fee to be paid for a unit of a service",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ModuleInfo": {
        "description": "Stores the namespace, name, and version of an Abstract module.",
        "type": "object",
        "required": [
          "name",
          "namespace",
          "version"
        ],
        "properties": {
          "name": {
            "description": "Name of the contract",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the module",
            "allOf": [
              {
                "$ref": "#/definitions/Namespace"
              }
            ]
          },
          "version": {
            "description": "Version of the module",
            "allOf": [
              {
                "$ref": "#/definitions/ModuleVersion"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ModuleReference": {
        "oneOf": [
          {
            "description": "Core Abstract Contracts",
            "type": "object",
            "required": [
              "account_base"
            ],
            "properties": {
              "account_base": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Native Abstract Contracts",
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Installable adapters",
            "type": "object",
            "required": [
              "adapter"
            ],
            "properties": {
              "adapter": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Installable apps",
            "type": "object",
            "required": [
              "app"
            ],
            "properties": {
              "app": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A stand-alone contract",
            "type": "object",
            "required": [
              "standalone"
            ],
            "properties": {
              "standalone": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ModuleVersion": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "latest"
            ]
          },
          {
            "type": "object",
            "required": [
              "version"
            ],
            "properties": {
              "version": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Monetization": {
        "description": "Module Monetization",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "type": "object",
            "required": [
              "install_fee"
            ],
            "properties": {
              "install_fee": {
                "$ref": "#/definitions/FixedFee"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Namespace": {
        "description": "Represents an Abstract namespace for modules",
        "type": "string"
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Version Control Query Msg",
    "oneOf": [
      {
        "description": "Query Core of an Account Returns [`AccountBaseResponse`]",
        "type": "object",
        "required": [
          "account_base"
        ],
        "properties": {
          "account_base": {
            "type": "object",
            "required": [
              "account_id"
            ],
            "properties": {
              "account_id": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries module information Modules that are yanked are not returned Returns [`ModulesResponse`]",
        "type": "object",
        "required": [
          "modules"
        ],
        "properties": {
          "modules": {
            "type": "object",
            "required": [
              "infos"
            ],
            "properties": {
              "infos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ModuleInfo"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries namespaces for an account Returns [`NamespacesResponse`]",
        "type": "object",
        "required": [
          "namespaces"
        ],
        "properties": {
          "namespaces": {
            "type": "object",
            "required": [
              "accounts"
            ],
            "properties": {
              "accounts": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries information about the namespace Returns [`NamespaceResponse`]",
        "type": "object",
        "required": [
          "namespace"
        ],
        "properties": {
          "namespace": {
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "namespace": {
                "$ref": "#/definitions/Namespace"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`ConfigResponse`]",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`ModulesListResponse`]",
        "type": "object",
        "required": [
          "module_list"
        ],
        "properties": {
          "module_list": {
            "type": "object",
            "properties": {
              "filter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ModuleFilter"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ModuleInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`NamespaceListResponse`]",
        "type": "object",
        "required": [
          "namespace_list"
        ],
        "properties": {
          "namespace_list": {
            "type": "object",
            "properties": {
              "filter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/NamespaceFilter"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query the contract's ownership information",
        "type": "object",
        "required": [
          "ownership"
        ],
        "properties": {
          "ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ModuleFilter": {
        "description": "A ModuleFilter that mirrors the [`ModuleInfo`] struct.",
        "type": "object",
        "properties": {
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "namespace": {
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/definitions/ModuleStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "version": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "ModuleInfo": {
        "description": "Stores the namespace, name, and version of an Abstract module.",
        "type": "object",
        "required": [
          "name",
          "namespace",
          "version"
        ],
        "properties": {
          "name": {
            "description": "Name of the contract",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the module",
            "allOf": [
              {
                "$ref": "#/definitions/Namespace"
              }
            ]
          },
          "version": {
            "description": "Version of the module",
            "allOf": [
              {
                "$ref": "#/definitions/ModuleVersion"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ModuleStatus": {
        "description": "Module status",
        "oneOf": [
          {
            "description": "Modules in use",
            "type": "string",
            "enum": [
              "r_e_g_i_s_t_e_r_e_d"
            ]
          },
          {
            "description": "Pending modules",
            "type": "string",
            "enum": [
              "p_e_n_d_i_n_g"
            ]
          },
          {
            "description": "Yanked modules",
            "type": "string",
            "enum": [
              "y_a_n_k_e_d"
            ]
          }
        ]
      },
      "ModuleVersion": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "latest"
            ]
          },
          {
            "type": "object",
            "required": [
              "version"
            ],
            "properties": {
              "version": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Namespace": {
        "description": "Represents an Abstract namespace for modules",
        "type": "string"
      },
      "NamespaceFilter": {
        "description": "A NamespaceFilter for [`Namespaces`].",
        "type": "object",
        "properties": {
          "account_id": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "account_base": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountBaseResponse",
      "type": "object",
      "required": [
        "account_base"
      ],
      "properties": {
        "account_base": {
          "$ref": "#/definitions/AccountBase"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountBase": {
          "description": "Contains the minimal Abstract Account contract addresses.",
          "type": "object",
          "required": [
            "manager",
            "proxy"
          ],
          "properties": {
            "manager": {
              "$ref": "#/definitions/Addr"
            },
            "proxy": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "factory"
      ],
      "properties": {
        "factory": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "module_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ModulesListResponse",
      "type": "object",
      "required": [
        "modules"
      ],
      "properties": {
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Module"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Module": {
          "type": "object",
          "required": [
            "info",
            "reference"
          ],
          "properties": {
            "info": {
              "$ref": "#/definitions/ModuleInfo"
            },
            "reference": {
              "$ref": "#/definitions/ModuleReference"
            }
          },
          "additionalProperties": false
        },
        "ModuleInfo": {
          "description": "Stores the namespace, name, and version of an Abstract module.",
          "type": "object",
          "required": [
            "name",
            "namespace",
            "version"
          ],
          "properties": {
            "name": {
              "description": "Name of the contract",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the module",
              "allOf": [
                {
                  "$ref": "#/definitions/Namespace"
                }
              ]
            },
            "version": {
              "description": "Version of the module",
              "allOf": [
                {
                  "$ref": "#/definitions/ModuleVersion"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ModuleReference": {
          "oneOf": [
            {
              "description": "Core Abstract Contracts",
              "type": "object",
              "required": [
                "account_base"
              ],
              "properties": {
                "account_base": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native Abstract Contracts",
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Installable adapters",
              "type": "object",
              "required": [
                "adapter"
              ],
              "properties": {
                "adapter": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Installable apps",
              "type": "object",
              "required": [
                "app"
              ],
              "properties": {
                "app": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A stand-alone contract",
              "type": "object",
              "required": [
                "standalone"
              ],
              "properties": {
                "standalone": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ModuleVersion": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "latest"
              ]
            },
            {
              "type": "object",
              "required": [
                "version"
              ],
              "properties": {
                "version": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Namespace": {
          "description": "Represents an Abstract namespace for modules",
          "type": "string"
        }
      }
    },
    "modules": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ModulesResponse",
      "type": "object",
      "required": [
        "modules"
      ],
      "properties": {
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModuleResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "FixedFee": {
          "description": "A wrapper around Coin to help handle fixed fees (with multiples).",
          "type": "object",
          "required": [
            "fee"
          ],
          "properties": {
            "fee": {
              "description": "Fee to be paid for a unit of a service",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Module": {
          "type": "object",
          "required": [
            "info",
            "reference"
          ],
          "properties": {
            "info": {
              "$ref": "#/definitions/ModuleInfo"
            },
            "reference": {
              "$ref": "#/definitions/ModuleReference"
            }
          },
          "additionalProperties": false
        },
        "ModuleConfiguration": {
          "type": "object",
          "required": [
            "monetization"
          ],
          "properties": {
            "monetization": {
              "$ref": "#/definitions/Monetization"
            }
          },
          "additionalProperties": false
        },
        "ModuleInfo": {
          "description": "Stores the namespace, name, and version of an Abstract module.",
          "type": "object",
          "required": [
            "name",
            "namespace",
            "version"
          ],
          "properties": {
            "name": {
              "description": "Name of the contract",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace of the module",
              "allOf": [
                {
                  "$ref": "#/definitions/Namespace"
                }
              ]
            },
            "version": {
              "description": "Version of the module",
              "allOf": [
                {
                  "$ref": "#/definitions/ModuleVersion"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ModuleReference": {
          "oneOf": [
            {
              "description": "Core Abstract Contracts",
              "type": "object",
              "required": [
                "account_base"
              ],
              "properties": {
                "account_base": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native Abstract Contracts",
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Installable adapters",
              "type": "object",
              "required": [
                "adapter"
              ],
              "properties": {
                "adapter": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Installable apps",
              "type": "object",
              "required": [
                "app"
              ],
              "properties": {
                "app": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A stand-alone contract",
              "type": "object",
              "required": [
                "standalone"
              ],
              "properties": {
                "standalone": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ModuleResponse": {
          "type": "object",
          "required": [
            "config",
            "module"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/ModuleConfiguration"
            },
            "module": {
              "$ref": "#/definitions/Module"
            }
          },
          "additionalProperties": false
        },
        "ModuleVersion": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "latest"
              ]
            },
            {
              "type": "object",
              "required": [
                "version"
              ],
              "properties": {
                "version": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Monetization": {
          "description": "Module Monetization",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "object",
              "required": [
                "install_fee"
              ],
              "properties": {
                "install_fee": {
                  "$ref": "#/definitions/FixedFee"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Namespace": {
          "description": "Represents an Abstract namespace for modules",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "namespace": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NamespaceResponse",
      "type": "object",
      "required": [
        "account_base",
        "account_id"
      ],
      "properties": {
        "account_base": {
          "$ref": "#/definitions/AccountBase"
        },
        "account_id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountBase": {
          "description": "Contains the minimal Abstract Account contract addresses.",
          "type": "object",
          "required": [
            "manager",
            "proxy"
          ],
          "properties": {
            "manager": {
              "$ref": "#/definitions/Addr"
            },
            "proxy": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        },
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "namespace_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NamespaceListResponse",
      "type": "object",
      "required": [
        "namespaces"
      ],
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/Namespace"
              },
              {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Namespace": {
          "description": "Represents an Abstract namespace for modules",
          "type": "string"
        }
      }
    },
    "namespaces": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NamespacesResponse",
      "type": "object",
      "required": [
        "namespaces"
      ],
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/Namespace"
              },
              {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Namespace": {
          "description": "Represents an Abstract namespace for modules",
          "type": "string"
        }
      }
    },
    "ownership": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ownership_for_String",
      "description": "The contract's ownership info",
      "type": "object",
      "properties": {
        "owner": {
          "description": "The contract's current owner. `None` if the ownership has been renounced.",
          "type": [
            "string",
            "null"
          ]
        },
        "pending_expiry": {
          "description": "The deadline for the pending owner to accept the ownership. `None` if there isn't a pending ownership transfer, or if a transfer exists and it doesn't have a deadline.",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_owner": {
          "description": "The account who has been proposed to take over the ownership. `None` if there isn't a pending ownership transfer.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
