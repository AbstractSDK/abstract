{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Wrapper around all possible messages that can be sent to the module.",
  "oneOf": [
    {
      "description": "A configuration message, defined by the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "An app request defined by a base consumer.",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/ChallengeExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "IbcReceive to process IBC callbacks In order to trust this, the apps and adapters verify this comes from the ibc-client contract.",
      "type": "object",
      "required": [
        "ibc_callback"
      ],
      "properties": {
        "ibc_callback": {
          "$ref": "#/definitions/IbcResponseMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receive endpoint for CW20 / external service integrations",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Empty"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AccountId": {
      "description": "Unique identifier for an account. On each chain this is unique.",
      "type": "object",
      "required": [
        "seq",
        "trace"
      ],
      "properties": {
        "seq": {
          "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trace": {
          "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
          "allOf": [
            {
              "$ref": "#/definitions/AccountTrace"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AccountTrace": {
      "description": "The identifier of chain that triggered the account creation",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "local"
          ]
        },
        {
          "type": "object",
          "required": [
            "remote"
          ],
          "properties": {
            "remote": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "Attribute": {
      "description": "An key value pair that is used in the context of event attributes in logs",
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "BaseExecuteMsg": {
      "oneOf": [
        {
          "description": "Updates the base config",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "ans_host_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "version_control_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Callback": {
      "oneOf": [
        {
          "description": "Result of executing the requested query, or an error.\n\nresult[i] corresponds to the i'th query and contains the base64 encoded query response.",
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "query": {
              "$ref": "#/definitions/Result_of_Array_of_Binary_or_ErrorResponse"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Result of executing the requested messages, or an error.\n\n14/04/23: if a submessage errors the reply handler can see `codespace: wasm, code: 5`, but not the actual error. as a result, we can't return good errors for Execution and this error string will only tell you the error's codespace. for example, an out-of-gas error is code 11 and looks like `codespace: sdk, code: 11`.",
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "$ref": "#/definitions/Result_of_ExecutionResponse_or_String"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "An error occured that could not be recovered from. The only known way that this can occur is message handling running out of gas, in which case the error will be `codespace: sdk, code: 11`.\n\nThis error is not named becuase it could also occur due to a panic or unhandled error during message processing. We don't expect this to happen and have carefully written the code to avoid it.",
          "type": "object",
          "required": [
            "fatal_error"
          ],
          "properties": {
            "fatal_error": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ChainName": {
      "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
      "type": "string"
    },
    "ChallengeEntryUpdate": {
      "description": "Only this struct and these fields are allowed to be updated. The status cannot be externally updated, it is updated by the contract.",
      "type": "object",
      "properties": {
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ChallengeExecuteMsg": {
      "description": "Challenge execute messages",
      "oneOf": [
        {
          "description": "Update challenge config",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "required": [
                "new_vote_config"
              ],
              "properties": {
                "new_vote_config": {
                  "description": "New config for vote",
                  "allOf": [
                    {
                      "$ref": "#/definitions/VoteConfig"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Create new challenge",
          "type": "object",
          "required": [
            "create_challenge"
          ],
          "properties": {
            "create_challenge": {
              "type": "object",
              "required": [
                "challenge_req"
              ],
              "properties": {
                "challenge_req": {
                  "description": "New challenge arguments",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ChallengeRequest"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Update existing challenge",
          "type": "object",
          "required": [
            "update_challenge"
          ],
          "properties": {
            "update_challenge": {
              "type": "object",
              "required": [
                "challenge",
                "challenge_id"
              ],
              "properties": {
                "challenge": {
                  "description": "Updates to this challenge",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ChallengeEntryUpdate"
                    }
                  ]
                },
                "challenge_id": {
                  "description": "Id of the challenge to update",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Cancel challenge",
          "type": "object",
          "required": [
            "cancel_challenge"
          ],
          "properties": {
            "cancel_challenge": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Challenge Id to cancel",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Update list of friends for challenge",
          "type": "object",
          "required": [
            "update_friends_for_challenge"
          ],
          "properties": {
            "update_friends_for_challenge": {
              "type": "object",
              "required": [
                "challenge_id",
                "friends",
                "op_kind"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Id of the challenge to update",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "friends": {
                  "description": "List of added or removed Friends",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Friend_for_String"
                  }
                },
                "op_kind": {
                  "description": "Kind of operation: add or remove friends",
                  "allOf": [
                    {
                      "$ref": "#/definitions/UpdateFriendsOpKind"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Cast vote as a friend",
          "type": "object",
          "required": [
            "cast_vote"
          ],
          "properties": {
            "cast_vote": {
              "type": "object",
              "required": [
                "challenge_id",
                "vote_to_punish"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Challenge Id to cast vote on",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "vote_to_punish": {
                  "description": "Wether voter thinks admin deserves punishment",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Vote"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Count votes for challenge id",
          "type": "object",
          "required": [
            "count_votes"
          ],
          "properties": {
            "count_votes": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Challenge Id for counting votes",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Veto the last vote",
          "type": "object",
          "required": [
            "veto"
          ],
          "properties": {
            "veto": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Challenge id to do the veto",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ChallengeRequest": {
      "description": "Arguments for new challenge",
      "type": "object",
      "required": [
        "challenge_duration_seconds",
        "init_friends",
        "name",
        "proposal_duration_seconds",
        "strike_asset",
        "strike_strategy"
      ],
      "properties": {
        "challenge_duration_seconds": {
          "description": "In what duration challenge should end",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "description": {
          "description": "Description of the challenge",
          "type": [
            "string",
            "null"
          ]
        },
        "init_friends": {
          "description": "Initial list of friends",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Friend_for_String"
          }
        },
        "name": {
          "description": "Name of challenge",
          "type": "string"
        },
        "proposal_duration_seconds": {
          "description": "Duration set for each proposal Proposals starts after one vote initiated by any of the friends",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "strike_asset": {
          "description": "Asset for punishment for failing a challenge",
          "allOf": [
            {
              "$ref": "#/definitions/AssetEntry"
            }
          ]
        },
        "strike_strategy": {
          "description": "How strike will get distributed between friends",
          "allOf": [
            {
              "$ref": "#/definitions/StrikeStrategy"
            }
          ]
        },
        "strikes_limit": {
          "description": "Strike limit, defaults to 1",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "error",
        "message_index"
      ],
      "properties": {
        "error": {
          "description": "The error that occured executing the message.",
          "type": "string"
        },
        "message_index": {
          "description": "The index of the first message who's execution failed.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Event": {
      "description": "A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]), which then get magically converted to bytes for Tendermint somewhere between the Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/main/learn/advanced/events [*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70",
      "type": "object",
      "required": [
        "attributes",
        "type"
      ],
      "properties": {
        "attributes": {
          "description": "The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/main/learn/advanced/events",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "type": {
          "description": "The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.",
          "type": "string"
        }
      }
    },
    "ExecutionResponse": {
      "type": "object",
      "required": [
        "executed_by",
        "result"
      ],
      "properties": {
        "executed_by": {
          "description": "The address on the remote chain that executed the messages.",
          "type": "string"
        },
        "result": {
          "description": "Index `i` corresponds to the result of executing the `i`th message.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubMsgResponse"
          }
        }
      },
      "additionalProperties": false
    },
    "FriendByAddr_for_String": {
      "description": "Friend by address",
      "type": "object",
      "required": [
        "address",
        "name"
      ],
      "properties": {
        "address": {
          "description": "Address of the friend",
          "type": "string"
        },
        "name": {
          "description": "Name of the friend",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Friend_for_String": {
      "description": "Friend object",
      "oneOf": [
        {
          "description": "Friend with address and a name",
          "type": "object",
          "required": [
            "addr"
          ],
          "properties": {
            "addr": {
              "$ref": "#/definitions/FriendByAddr_for_String"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Abstract Account Id of the friend",
          "type": "object",
          "required": [
            "abstract_account"
          ],
          "properties": {
            "abstract_account": {
              "$ref": "#/definitions/AccountId"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcResponseMsg": {
      "description": "IbcResponseMsg should be de/serialized under `IbcCallback()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "id",
        "result"
      ],
      "properties": {
        "id": {
          "description": "The ID chosen by the caller in the `callback_info.id`",
          "type": "string"
        },
        "msg": {
          "description": "The msg sent with the callback request. This is usually used to provide information to the ibc callback function for context",
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "result": {
          "$ref": "#/definitions/Callback"
        }
      },
      "additionalProperties": false
    },
    "Result_of_Array_of_Binary_or_ErrorResponse": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Ok"
          ],
          "properties": {
            "Ok": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Binary"
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "Err"
          ],
          "properties": {
            "Err": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      ]
    },
    "Result_of_ExecutionResponse_or_String": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Ok"
          ],
          "properties": {
            "Ok": {
              "$ref": "#/definitions/ExecutionResponse"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "Err"
          ],
          "properties": {
            "Err": {
              "type": "string"
            }
          }
        }
      ]
    },
    "StrikeStrategy": {
      "description": "Strategy for striking the admin",
      "oneOf": [
        {
          "description": "Split amount between friends",
          "type": "object",
          "required": [
            "split"
          ],
          "properties": {
            "split": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Amount for every friend",
          "type": "object",
          "required": [
            "per_friend"
          ],
          "properties": {
            "per_friend": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SubMsgResponse": {
      "description": "The information we get back from a successful sub message execution, with full Cosmos SDK events.",
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "data": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        }
      }
    },
    "Threshold": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "majority"
          ],
          "properties": {
            "majority": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "percentage"
          ],
          "properties": {
            "percentage": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateFriendsOpKind": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "add"
          ],
          "properties": {
            "add": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "remove"
          ],
          "properties": {
            "remove": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Vote": {
      "description": "Vote struct",
      "type": "object",
      "required": [
        "vote"
      ],
      "properties": {
        "memo": {
          "description": "memo for the vote",
          "type": [
            "string",
            "null"
          ]
        },
        "vote": {
          "description": "true: Vote for false: Vote against",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "VoteConfig": {
      "type": "object",
      "required": [
        "threshold"
      ],
      "properties": {
        "threshold": {
          "$ref": "#/definitions/Threshold"
        },
        "veto_duration_seconds": {
          "description": "Veto duration after the first vote None disables veto",
          "anyOf": [
            {
              "$ref": "#/definitions/Uint64"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  }
}
