{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "App execute messages",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "create_challenge"
      ],
      "properties": {
        "create_challenge": {
          "type": "object",
          "required": [
            "challenge_req"
          ],
          "properties": {
            "challenge_req": {
              "$ref": "#/definitions/ChallengeRequest"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_challenge"
      ],
      "properties": {
        "update_challenge": {
          "type": "object",
          "required": [
            "challenge",
            "challenge_id"
          ],
          "properties": {
            "challenge": {
              "$ref": "#/definitions/ChallengeEntryUpdate"
            },
            "challenge_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "cancel_challenge"
      ],
      "properties": {
        "cancel_challenge": {
          "type": "object",
          "required": [
            "challenge_id"
          ],
          "properties": {
            "challenge_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_friends_for_challenge"
      ],
      "properties": {
        "update_friends_for_challenge": {
          "type": "object",
          "required": [
            "challenge_id",
            "friends",
            "op_kind"
          ],
          "properties": {
            "challenge_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "friends": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Friend_for_String"
              }
            },
            "op_kind": {
              "$ref": "#/definitions/UpdateFriendsOpKind"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "daily_check_in"
      ],
      "properties": {
        "daily_check_in": {
          "type": "object",
          "required": [
            "challenge_id"
          ],
          "properties": {
            "challenge_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "metadata": {
              "description": "metadata can be added for extra description of the check-in. For example, if the check-in is a photo, the metadata can be a link to the photo.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "cast_vote"
      ],
      "properties": {
        "cast_vote": {
          "type": "object",
          "required": [
            "challenge_id",
            "vote"
          ],
          "properties": {
            "challenge_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "vote": {
              "description": "If the vote.approval is None, we assume the voter approves, and the contract will internally set the approval field to Some(true). This is because we assume that if a friend didn't vote, the friend approves, otherwise the voter would Vote with approval set to Some(false).",
              "allOf": [
                {
                  "$ref": "#/definitions/Vote_for_String"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "ChallengeEntryUpdate": {
      "description": "Only this struct and these fields are allowed to be updated. The status cannot be externally updated, it is updated by the contract.",
      "type": "object",
      "properties": {
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ChallengeRequest": {
      "type": "object",
      "required": [
        "collateral",
        "description",
        "end",
        "name"
      ],
      "properties": {
        "collateral": {
          "$ref": "#/definitions/AnsAsset"
        },
        "description": {
          "type": "string"
        },
        "end": {
          "$ref": "#/definitions/DurationChoice"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "DurationChoice": {
      "type": "string",
      "enum": [
        "week",
        "month",
        "quarter",
        "year",
        "one_hundred_years"
      ]
    },
    "Friend_for_String": {
      "type": "object",
      "required": [
        "address",
        "name"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "UpdateFriendsOpKind": {
      "type": "string",
      "enum": [
        "add",
        "remove"
      ]
    },
    "Vote_for_String": {
      "type": "object",
      "required": [
        "voter"
      ],
      "properties": {
        "approval": {
          "description": "The vote result",
          "type": [
            "boolean",
            "null"
          ]
        },
        "for_check_in": {
          "description": "Correlates to the last_checked_in field of the CheckIn struct.",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "voter": {
          "description": "The address of the voter",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
