{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "A query to the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseQueryMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Custom query",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/ChallengeQueryMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "BaseQueryMsg": {
      "oneOf": [
        {
          "description": "Returns [`AppConfigResponse`]",
          "type": "object",
          "required": [
            "base_config"
          ],
          "properties": {
            "base_config": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns the admin. Returns [`AdminResponse`]",
          "type": "object",
          "required": [
            "base_admin"
          ],
          "properties": {
            "base_admin": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns module data Returns [`ModuleDataResponse`]",
          "type": "object",
          "required": [
            "module_data"
          ],
          "properties": {
            "module_data": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns top level owner Returns [`TopLevelOwnerResponse`]",
          "type": "object",
          "required": [
            "top_level_owner"
          ],
          "properties": {
            "top_level_owner": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ChallengeQueryMsg": {
      "description": "Challenge query messages",
      "oneOf": [
        {
          "description": "Get challenge info, will return null if there was no challenge by Id Returns [`ChallengeResponse`]",
          "type": "object",
          "required": [
            "challenge"
          ],
          "properties": {
            "challenge": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Id of requested challenge",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Get list of challenges Returns [`ChallengesResponse`]",
          "type": "object",
          "required": [
            "challenges"
          ],
          "properties": {
            "challenges": {
              "type": "object",
              "properties": {
                "limit": {
                  "description": "Max amount of challenges in response",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                },
                "start_after": {
                  "description": "start after challenge Id",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "List of friends by Id Returns [`FriendsResponse`]",
          "type": "object",
          "required": [
            "friends"
          ],
          "properties": {
            "friends": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Id of requested challenge",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Get vote of friend Returns [`VoteResponse`]",
          "type": "object",
          "required": [
            "vote"
          ],
          "properties": {
            "vote": {
              "type": "object",
              "required": [
                "challenge_id",
                "voter_addr"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Id of requested challenge",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "proposal_id": {
                  "description": "Proposal id of previous proposal Providing None requests last proposal results",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                },
                "voter_addr": {
                  "description": "Addr of the friend",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Get votes of challenge Returns [`VotesResponse`]",
          "type": "object",
          "required": [
            "votes"
          ],
          "properties": {
            "votes": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Id of requested challenge",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "limit": {
                  "description": "Max amount of challenges in response",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                },
                "proposal_id": {
                  "description": "Proposal id of previous proposal Providing None requests last proposal results",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                },
                "start_after": {
                  "description": "start after Addr",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Get results of previous votes for this challenge Returns [`ProposalsResponse`]",
          "type": "object",
          "required": [
            "proposals"
          ],
          "properties": {
            "proposals": {
              "type": "object",
              "required": [
                "challenge_id"
              ],
              "properties": {
                "challenge_id": {
                  "description": "Challenge Id for previous votes",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "limit": {
                  "description": "Max amount of proposals in response",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                },
                "start_after": {
                  "description": "start after ProposalId",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
