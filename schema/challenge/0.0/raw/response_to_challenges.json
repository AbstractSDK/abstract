{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ChallengesResponse",
  "type": "array",
  "items": {
    "$ref": "#/definitions/ChallengeEntry"
  },
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "ChallengeEntry": {
      "type": "object",
      "required": [
        "admin_strikes",
        "collateral",
        "description",
        "end",
        "name",
        "status",
        "total_check_ins"
      ],
      "properties": {
        "admin_strikes": {
          "$ref": "#/definitions/StrikeConfig"
        },
        "collateral": {
          "$ref": "#/definitions/AnsAsset"
        },
        "description": {
          "type": "string"
        },
        "end": {
          "$ref": "#/definitions/Timestamp"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ChallengeStatus"
        },
        "total_check_ins": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "ChallengeStatus": {
      "description": "The status of a challenge. This can be used to trigger an automated Croncat job based on the value of the status",
      "oneOf": [
        {
          "description": "The challenge has not been initialized yet. This is the default state.",
          "type": "string",
          "enum": [
            "uninitialized"
          ]
        },
        {
          "description": "The challenge is active and can be voted on.",
          "type": "string",
          "enum": [
            "active"
          ]
        },
        {
          "description": "The challenge was cancelled and no collateral was paid out.",
          "type": "string",
          "enum": [
            "cancelled"
          ]
        },
        {
          "description": "The challenge has pased the end time.",
          "type": "string",
          "enum": [
            "over"
          ]
        }
      ]
    },
    "StrikeConfig": {
      "type": "object",
      "required": [
        "limit",
        "num_strikes"
      ],
      "properties": {
        "limit": {
          "description": "When num_strikes reached the limit, the challenge will be cancelled.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "num_strikes": {
          "description": "The number of striked the admin has incurred.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
