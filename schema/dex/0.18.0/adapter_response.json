{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AdapterResponse",
  "type": "object",
  "required": [
    "commission",
    "pool",
    "return_amount",
    "spread_amount",
    "usage_fee"
  ],
  "properties": {
    "commission": {
      "description": "Commission charged for the swap",
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/AssetEntry"
        },
        {
          "$ref": "#/definitions/Uint128"
        }
      ],
      "maxItems": 2,
      "minItems": 2
    },
    "pool": {
      "$ref": "#/definitions/DexAssetPairing"
    },
    "return_amount": {
      "description": "Amount you would receive when performing the swap.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "spread_amount": {
      "description": "Spread in ask_asset for this swap",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "usage_fee": {
      "description": "Adapter fee charged for the swap (paid in offer asset)",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "DexAssetPairing": {
      "description": "The key for an asset pairing Consists of the two assets and the dex name TODO: what if we made keys equal based on the two assets either way?",
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/AssetEntry"
        },
        {
          "$ref": "#/definitions/AssetEntry"
        },
        {
          "type": "string"
        }
      ],
      "maxItems": 3,
      "minItems": 3
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
