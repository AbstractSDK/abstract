{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "description": "Query messages for the dex adapter",
  "oneOf": [
    {
      "description": "Simulate a swap between two assets",
      "type": "object",
      "required": [
        "simulate_swap"
      ],
      "properties": {
        "simulate_swap": {
          "type": "object",
          "required": [
            "ask_asset",
            "offer_asset"
          ],
          "properties": {
            "ask_asset": {
              "description": "The asset to receive",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetEntry"
                }
              ]
            },
            "dex": {
              "description": "Name of the dex to simulate the swap on",
              "type": [
                "string",
                "null"
              ]
            },
            "offer_asset": {
              "description": "The asset to offer",
              "allOf": [
                {
                  "$ref": "#/definitions/AnsAsset"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Endpoint can be used by front-end to easily interact with contracts.",
      "type": "object",
      "required": [
        "generate_messages"
      ],
      "properties": {
        "generate_messages": {
          "type": "object",
          "required": [
            "message"
          ],
          "properties": {
            "message": {
              "description": "Execute message to generate messages for",
              "allOf": [
                {
                  "$ref": "#/definitions/DexExecuteMsg"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DexAction": {
      "description": "Possible actions to perform on the DEX",
      "oneOf": [
        {
          "description": "Provide arbitrary liquidity",
          "type": "object",
          "required": [
            "provide_liquidity"
          ],
          "properties": {
            "provide_liquidity": {
              "type": "object",
              "required": [
                "assets"
              ],
              "properties": {
                "assets": {
                  "description": "Assets to add",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnsAsset"
                  }
                },
                "max_spread": {
                  "description": "Max spread to accept, is a percentage represented as a decimal.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Provide liquidity equally between assets to a pool",
          "type": "object",
          "required": [
            "provide_liquidity_symmetric"
          ],
          "properties": {
            "provide_liquidity_symmetric": {
              "type": "object",
              "required": [
                "offer_asset",
                "paired_assets"
              ],
              "properties": {
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                },
                "paired_assets": {
                  "description": "Assets that are paired with the offered asset Should exclude the offer asset",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetEntry"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Withdraw liquidity from a pool",
          "type": "object",
          "required": [
            "withdraw_liquidity"
          ],
          "properties": {
            "withdraw_liquidity": {
              "type": "object",
              "required": [
                "amount",
                "lp_token"
              ],
              "properties": {
                "amount": {
                  "description": "The amount of LP tokens to redeem.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ]
                },
                "lp_token": {
                  "description": "The asset LP token name that is provided.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetEntry"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Standard swap between one asset to another",
          "type": "object",
          "required": [
            "swap"
          ],
          "properties": {
            "swap": {
              "type": "object",
              "required": [
                "ask_asset",
                "offer_asset"
              ],
              "properties": {
                "ask_asset": {
                  "description": "The asset to receive",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetEntry"
                    }
                  ]
                },
                "belief_price": {
                  "description": "The belief price when submitting the transaction.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "max_spread": {
                  "description": "The percentage of spread compared to pre-swap price or belief price (if provided)",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DexExecuteMsg": {
      "description": "Dex Execute msg",
      "oneOf": [
        {
          "description": "Update the fee",
          "type": "object",
          "required": [
            "update_fee"
          ],
          "properties": {
            "update_fee": {
              "type": "object",
              "properties": {
                "recipient_account": {
                  "description": "New recipient account for fees",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "swap_fee": {
                  "description": "New fee to set",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Action to perform on the DEX",
          "type": "object",
          "required": [
            "action"
          ],
          "properties": {
            "action": {
              "type": "object",
              "required": [
                "action",
                "dex"
              ],
              "properties": {
                "action": {
                  "description": "The action to perform",
                  "allOf": [
                    {
                      "$ref": "#/definitions/DexAction"
                    }
                  ]
                },
                "dex": {
                  "description": "The name of the dex to interact with",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
