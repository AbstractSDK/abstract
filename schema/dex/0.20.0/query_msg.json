{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "A query to the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseQueryMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Custom query",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/DexQueryMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetBase_for_String": {
      "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Specifies the asset's amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Specifies the asset's type (CW20 or native)",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "AssetInfoBase_for_String": {
      "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BaseQueryMsg": {
      "description": "Query adapter message",
      "oneOf": [
        {
          "description": "Returns [`AdapterConfigResponse`].",
          "type": "object",
          "required": [
            "base_config"
          ],
          "properties": {
            "base_config": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns [`AuthorizedAddressesResponse`].",
          "type": "object",
          "required": [
            "authorized_addresses"
          ],
          "properties": {
            "authorized_addresses": {
              "type": "object",
              "required": [
                "proxy_address"
              ],
              "properties": {
                "proxy_address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns module data Returns [`ModuleDataResponse`].",
          "type": "object",
          "required": [
            "module_data"
          ],
          "properties": {
            "module_data": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "DexAnsAction": {
      "description": "Possible actions to perform on the DEX",
      "oneOf": [
        {
          "description": "Provide arbitrary liquidity",
          "type": "object",
          "required": [
            "provide_liquidity"
          ],
          "properties": {
            "provide_liquidity": {
              "type": "object",
              "required": [
                "assets"
              ],
              "properties": {
                "assets": {
                  "description": "Assets to add",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AnsAsset"
                  }
                },
                "max_spread": {
                  "description": "Max spread to accept, is a percentage represented as a decimal.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Provide liquidity equally between assets to a pool",
          "type": "object",
          "required": [
            "provide_liquidity_symmetric"
          ],
          "properties": {
            "provide_liquidity_symmetric": {
              "type": "object",
              "required": [
                "offer_asset",
                "paired_assets"
              ],
              "properties": {
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                },
                "paired_assets": {
                  "description": "Assets that are paired with the offered asset Should exclude the offer asset",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetEntry"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Withdraw liquidity from a pool",
          "type": "object",
          "required": [
            "withdraw_liquidity"
          ],
          "properties": {
            "withdraw_liquidity": {
              "type": "object",
              "required": [
                "lp_token"
              ],
              "properties": {
                "lp_token": {
                  "description": "The asset LP token that is provided.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Standard swap between one asset to another",
          "type": "object",
          "required": [
            "swap"
          ],
          "properties": {
            "swap": {
              "type": "object",
              "required": [
                "ask_asset",
                "offer_asset"
              ],
              "properties": {
                "ask_asset": {
                  "description": "The asset to receive",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetEntry"
                    }
                  ]
                },
                "belief_price": {
                  "description": "The belief price when submitting the transaction.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "max_spread": {
                  "description": "The percentage of spread compared to pre-swap price or belief price (if provided)",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DexExecuteMsg": {
      "description": "Dex Execute msg",
      "oneOf": [
        {
          "description": "Update the fee",
          "type": "object",
          "required": [
            "update_fee"
          ],
          "properties": {
            "update_fee": {
              "type": "object",
              "properties": {
                "recipient_account": {
                  "description": "New recipient account for fees",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "swap_fee": {
                  "description": "New fee to set",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Action to perform on the DEX with ans asset denomination",
          "type": "object",
          "required": [
            "ans_action"
          ],
          "properties": {
            "ans_action": {
              "type": "object",
              "required": [
                "action",
                "dex"
              ],
              "properties": {
                "action": {
                  "description": "The action to perform",
                  "allOf": [
                    {
                      "$ref": "#/definitions/DexAnsAction"
                    }
                  ]
                },
                "dex": {
                  "description": "The name of the dex to interact with",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Action to perform on the DEX with raw asset denominations",
          "type": "object",
          "required": [
            "raw_action"
          ],
          "properties": {
            "raw_action": {
              "type": "object",
              "required": [
                "action",
                "dex"
              ],
              "properties": {
                "action": {
                  "description": "The action to perform",
                  "allOf": [
                    {
                      "$ref": "#/definitions/DexRawAction"
                    }
                  ]
                },
                "dex": {
                  "description": "The name of the dex to interact with",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DexQueryMsg": {
      "description": "Query messages for the dex adapter",
      "oneOf": [
        {
          "description": "Simulate a swap between two assets Returns [`SimulateSwapResponse`]",
          "type": "object",
          "required": [
            "simulate_swap"
          ],
          "properties": {
            "simulate_swap": {
              "type": "object",
              "required": [
                "ask_asset",
                "dex",
                "offer_asset"
              ],
              "properties": {
                "ask_asset": {
                  "description": "The asset to receive",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetEntry"
                    }
                  ]
                },
                "dex": {
                  "description": "Name of the dex to simulate the swap on",
                  "type": "string"
                },
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Simulate a swap between two assets Returns [`SimulateSwapResponse`]",
          "type": "object",
          "required": [
            "simulate_swap_raw"
          ],
          "properties": {
            "simulate_swap_raw": {
              "type": "object",
              "required": [
                "ask_asset",
                "dex",
                "offer_asset",
                "pool"
              ],
              "properties": {
                "ask_asset": {
                  "description": "The asset to receive",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetInfoBase_for_String"
                    }
                  ]
                },
                "dex": {
                  "description": "Name of the dex to simulate the swap on",
                  "type": "string"
                },
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetBase_for_String"
                    }
                  ]
                },
                "pool": {
                  "description": "Identifies of the pool to simulate the swap on.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Endpoint can be used by front-end to easily interact with contracts. Returns [`GenerateMessagesResponse`]",
          "type": "object",
          "required": [
            "generate_messages"
          ],
          "properties": {
            "generate_messages": {
              "type": "object",
              "required": [
                "addr_as_sender",
                "message"
              ],
              "properties": {
                "addr_as_sender": {
                  "description": "Sender Addr generate messages for",
                  "type": "string"
                },
                "message": {
                  "description": "Execute message to generate messages for",
                  "allOf": [
                    {
                      "$ref": "#/definitions/DexExecuteMsg"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Fee info for using the different dex actions",
          "type": "object",
          "required": [
            "fees"
          ],
          "properties": {
            "fees": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DexRawAction": {
      "description": "Possible raw actions to perform on the DEX",
      "oneOf": [
        {
          "description": "Provide arbitrary liquidity",
          "type": "object",
          "required": [
            "provide_liquidity"
          ],
          "properties": {
            "provide_liquidity": {
              "type": "object",
              "required": [
                "assets",
                "pool"
              ],
              "properties": {
                "assets": {
                  "description": "Assets to add",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetBase_for_String"
                  }
                },
                "max_spread": {
                  "description": "Max spread to accept, is a percentage represented as a decimal.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "pool": {
                  "description": "Pool to provide liquidity to",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Provide liquidity equally between assets to a pool",
          "type": "object",
          "required": [
            "provide_liquidity_symmetric"
          ],
          "properties": {
            "provide_liquidity_symmetric": {
              "type": "object",
              "required": [
                "offer_asset",
                "paired_assets",
                "pool"
              ],
              "properties": {
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetBase_for_String"
                    }
                  ]
                },
                "paired_assets": {
                  "description": "Assets that are paired with the offered asset Should exclude the offer asset",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AssetInfoBase_for_String"
                  }
                },
                "pool": {
                  "description": "Pool to provide liquidity to",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Withdraw liquidity from a pool",
          "type": "object",
          "required": [
            "withdraw_liquidity"
          ],
          "properties": {
            "withdraw_liquidity": {
              "type": "object",
              "required": [
                "lp_token",
                "pool"
              ],
              "properties": {
                "lp_token": {
                  "description": "The asset LP token that is provided.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetBase_for_String"
                    }
                  ]
                },
                "pool": {
                  "description": "Pool to withdraw liquidity from",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Standard swap between one asset to another",
          "type": "object",
          "required": [
            "swap"
          ],
          "properties": {
            "swap": {
              "type": "object",
              "required": [
                "ask_asset",
                "offer_asset",
                "pool"
              ],
              "properties": {
                "ask_asset": {
                  "description": "The asset to receive",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetInfoBase_for_String"
                    }
                  ]
                },
                "belief_price": {
                  "description": "The belief price when submitting the transaction.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "max_spread": {
                  "description": "The percentage of spread compared to pre-swap price or belief price (if provided)",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "offer_asset": {
                  "description": "The asset to offer",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetBase_for_String"
                    }
                  ]
                },
                "pool": {
                  "description": "Pool used to swap",
                  "allOf": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PoolAddressBase_for_String": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "separate_addresses"
          ],
          "properties": {
            "separate_addresses": {
              "type": "object",
              "required": [
                "liquidity",
                "swap"
              ],
              "properties": {
                "liquidity": {
                  "type": "string"
                },
                "swap": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract"
          ],
          "properties": {
            "contract": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
