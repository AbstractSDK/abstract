{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "A configuration message to the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseQueryMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Custom query",
      "type": "object",
      "required": [
        "app"
      ],
      "properties": {
        "app": {
          "$ref": "#/definitions/DexQueryMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "May key to retrieve information on an asset",
      "type": "string"
    },
    "BaseQueryMsg": {
      "description": "Query api message",
      "oneOf": [
        {
          "description": "Returns [`ApiConfigResponse`].",
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns [`TradersResponse`]. TODO: enable pagination",
          "type": "object",
          "required": [
            "traders"
          ],
          "properties": {
            "traders": {
              "type": "object",
              "required": [
                "proxy_address"
              ],
              "properties": {
                "proxy_address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DexQueryMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "simulate_swap"
          ],
          "properties": {
            "simulate_swap": {
              "type": "object",
              "required": [
                "ask_asset",
                "offer_asset"
              ],
              "properties": {
                "ask_asset": {
                  "$ref": "#/definitions/AssetEntry"
                },
                "dex": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "offer_asset": {
                  "$ref": "#/definitions/AnsAsset"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
