{
  "contract_name": "module-schema",
  "contract_version": "0.5.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Dex Execute msg",
    "type": "object",
    "required": [
      "action",
      "dex"
    ],
    "properties": {
      "action": {
        "$ref": "#/definitions/DexAction"
      },
      "dex": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AnsAsset": {
        "type": "object",
        "required": [
          "amount",
          "name"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "name": {
            "$ref": "#/definitions/AssetEntry"
          }
        }
      },
      "AssetEntry": {
        "description": "May key to retrieve information on an asset",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DexAction": {
        "description": "Possible actions to perform on the DEX",
        "oneOf": [
          {
            "description": "Provide arbitrary liquidity",
            "type": "object",
            "required": [
              "provide_liquidity"
            ],
            "properties": {
              "provide_liquidity": {
                "type": "object",
                "required": [
                  "assets"
                ],
                "properties": {
                  "assets": {
                    "description": "Assets to add",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  },
                  "max_spread": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Provide liquidity equally between assets to a pool",
            "type": "object",
            "required": [
              "provide_liquidity_symmetric"
            ],
            "properties": {
              "provide_liquidity_symmetric": {
                "type": "object",
                "required": [
                  "offer_asset",
                  "paired_assets"
                ],
                "properties": {
                  "offer_asset": {
                    "$ref": "#/definitions/AnsAsset"
                  },
                  "paired_assets": {
                    "description": "Assets that are paired with the offered asset",
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AssetEntry"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Withdraw liquidity from a pool",
            "type": "object",
            "required": [
              "withdraw_liquidity"
            ],
            "properties": {
              "withdraw_liquidity": {
                "type": "object",
                "required": [
                  "amount",
                  "lp_token"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "lp_token": {
                    "$ref": "#/definitions/AssetEntry"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Standard swap between one asset to another",
            "type": "object",
            "required": [
              "swap"
            ],
            "properties": {
              "swap": {
                "type": "object",
                "required": [
                  "ask_asset",
                  "offer_asset"
                ],
                "properties": {
                  "ask_asset": {
                    "$ref": "#/definitions/AssetEntry"
                  },
                  "belief_price": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "max_spread": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "offer_asset": {
                    "$ref": "#/definitions/AnsAsset"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Allow alternative swap routers and methods",
            "type": "object",
            "required": [
              "custom_swap"
            ],
            "properties": {
              "custom_swap": {
                "type": "object",
                "required": [
                  "ask_assets",
                  "offer_assets"
                ],
                "properties": {
                  "ask_assets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  },
                  "max_spread": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "offer_assets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  },
                  "router": {
                    "description": "Optionally supply a router to use",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/SwapRouter"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SwapRouter": {
        "oneOf": [
          {
            "description": "Matrix router",
            "type": "string",
            "enum": [
              "matrix"
            ]
          },
          {
            "description": "Use a custom router (using String type for cross-chain compatibility)",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "simulate_swap"
        ],
        "properties": {
          "simulate_swap": {
            "type": "object",
            "required": [
              "ask_asset",
              "offer_asset"
            ],
            "properties": {
              "ask_asset": {
                "$ref": "#/definitions/AssetEntry"
              },
              "dex": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "offer_asset": {
                "$ref": "#/definitions/AnsAsset"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AnsAsset": {
        "type": "object",
        "required": [
          "amount",
          "name"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "name": {
            "$ref": "#/definitions/AssetEntry"
          }
        }
      },
      "AssetEntry": {
        "description": "May key to retrieve information on an asset",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "sudo": null,
  "responses": {
    "simulate_swap": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SimulateSwapResponse",
      "type": "object",
      "required": [
        "commission",
        "pool",
        "return_amount",
        "spread_amount"
      ],
      "properties": {
        "commission": {
          "description": "Commission charged for the swap",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "$ref": "#/definitions/Uint128"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "pool": {
          "$ref": "#/definitions/DexAssetPairing"
        },
        "return_amount": {
          "description": "Amount you would receive when performing the swap.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "spread_amount": {
          "description": "Spread in ask_asset for this swap",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "DexAssetPairing": {
          "description": "The key for an asset pairing Consists of the two assets and the dex name TODO: what if we made keys equal based on the two assets either way?",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 3,
          "minItems": 3
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
