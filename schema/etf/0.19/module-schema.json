{
  "contract_name": "module-schema",
  "contract_version": "0.19.2",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Init msg",
    "type": "object",
    "required": [
      "fee",
      "manager_addr",
      "token_code_id"
    ],
    "properties": {
      "fee": {
        "description": "Fee charged on withdrawal",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "manager_addr": {
        "description": "Address of the ETFs manager which receives the fee.",
        "type": "string"
      },
      "token_code_id": {
        "description": "Code-id used to create the LP token",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "token_name": {
        "description": "Name of the etf token",
        "type": [
          "string",
          "null"
        ]
      },
      "token_symbol": {
        "description": "Symbol of the etf token",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Execute Msg",
    "oneOf": [
      {
        "description": "Deposit asset into the ETF",
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "required": [
              "asset"
            ],
            "properties": {
              "asset": {
                "description": "Asset to deposit",
                "allOf": [
                  {
                    "$ref": "#/definitions/AssetBase_for_String"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Set the withdraw fee",
        "type": "object",
        "required": [
          "set_fee"
        ],
        "properties": {
          "set_fee": {
            "type": "object",
            "required": [
              "fee"
            ],
            "properties": {
              "fee": {
                "description": "New fee",
                "allOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetBase_for_String": {
        "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
        "type": "object",
        "required": [
          "amount",
          "info"
        ],
        "properties": {
          "amount": {
            "description": "Specifies the asset's amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "info": {
            "description": "Specifies the asset's type (CW20 or native)",
            "allOf": [
              {
                "$ref": "#/definitions/AssetInfoBase_for_String"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetInfoBase_for_String": {
        "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Query Msg",
    "oneOf": [
      {
        "description": "Returns [`StateResponse`]",
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "sudo": null,
  "responses": {
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "description": "State query response",
      "type": "object",
      "required": [
        "fee",
        "share_token_address"
      ],
      "properties": {
        "fee": {
          "description": "Fee charged on withdrawal",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "share_token_address": {
          "description": "Address of the LP token",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    }
  }
}
