{
  "contract_name": "ans-host",
  "contract_version": "0.5.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "AnsHost Instantiate msg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "AnsHost Execute msg",
    "oneOf": [
      {
        "description": "Updates the contract addressbook",
        "type": "object",
        "required": [
          "update_contract_addresses"
        ],
        "properties": {
          "update_contract_addresses": {
            "type": "object",
            "required": [
              "to_add",
              "to_remove"
            ],
            "properties": {
              "to_add": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/UncheckedContractEntry"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "to_remove": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UncheckedContractEntry"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the Asset addressbook",
        "type": "object",
        "required": [
          "update_asset_addresses"
        ],
        "properties": {
          "update_asset_addresses": {
            "type": "object",
            "required": [
              "to_add",
              "to_remove"
            ],
            "properties": {
              "to_add": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/AssetInfoBase_for_String"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "to_remove": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the Asset addressbook",
        "type": "object",
        "required": [
          "update_channels"
        ],
        "properties": {
          "update_channels": {
            "type": "object",
            "required": [
              "to_add",
              "to_remove"
            ],
            "properties": {
              "to_add": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/UncheckedChannelEntry"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "to_remove": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UncheckedChannelEntry"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Registers a dex",
        "type": "object",
        "required": [
          "update_dexes"
        ],
        "properties": {
          "update_dexes": {
            "type": "object",
            "required": [
              "to_add",
              "to_remove"
            ],
            "properties": {
              "to_add": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "to_remove": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the pools",
        "type": "object",
        "required": [
          "update_pools"
        ],
        "properties": {
          "update_pools": {
            "type": "object",
            "required": [
              "to_add",
              "to_remove"
            ],
            "properties": {
              "to_add": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/PoolAddressBase_for_String"
                    },
                    {
                      "$ref": "#/definitions/PoolMetadata"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "to_remove": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UniquePoolId"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Sets a new Admin",
        "type": "object",
        "required": [
          "set_admin"
        ],
        "properties": {
          "set_admin": {
            "type": "object",
            "required": [
              "admin"
            ],
            "properties": {
              "admin": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetEntry": {
        "description": "May key to retrieve information on an asset",
        "type": "string"
      },
      "AssetInfoBase_for_String": {
        "description": "Represents the type of an fungible asset\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address. - CW1155 tokens. To create an **asset info** instance of this type, provide the contract address and token ID.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw1155"
            ],
            "properties": {
              "cw1155": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolAddressBase_for_String": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "contract"
            ],
            "properties": {
              "contract": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolMetadata": {
        "type": "object",
        "required": [
          "assets",
          "dex",
          "pool_type"
        ],
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssetEntry"
            }
          },
          "dex": {
            "type": "string"
          },
          "pool_type": {
            "$ref": "#/definitions/PoolType"
          }
        }
      },
      "PoolType": {
        "type": "string",
        "enum": [
          "ConstantProduct",
          "Stable",
          "Weighted",
          "LiquidityBootstrap"
        ]
      },
      "UncheckedChannelEntry": {
        "description": "Key to get the Address of a connected_chain",
        "type": "object",
        "required": [
          "connected_chain",
          "protocol"
        ],
        "properties": {
          "connected_chain": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          }
        }
      },
      "UncheckedContractEntry": {
        "description": "Key to get the Address of a contract",
        "type": "object",
        "required": [
          "contract",
          "protocol"
        ],
        "properties": {
          "contract": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          }
        }
      },
      "UniquePoolId": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "AnsHost smart-query",
    "oneOf": [
      {
        "description": "Query the config Returns [`ConfigResponse`]",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries assets based on name returns [`AssetsResponse`]",
        "type": "object",
        "required": [
          "assets"
        ],
        "properties": {
          "assets": {
            "type": "object",
            "required": [
              "names"
            ],
            "properties": {
              "names": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Page over assets returns [`AssetListResponse`]",
        "type": "object",
        "required": [
          "asset_list"
        ],
        "properties": {
          "asset_list": {
            "type": "object",
            "properties": {
              "page_size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "page_token": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries contracts based on name returns [`ContractsResponse`]",
        "type": "object",
        "required": [
          "contracts"
        ],
        "properties": {
          "contracts": {
            "type": "object",
            "required": [
              "names"
            ],
            "properties": {
              "names": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ContractEntry"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Page over contracts returns [`ContractListResponse`]",
        "type": "object",
        "required": [
          "contract_list"
        ],
        "properties": {
          "contract_list": {
            "type": "object",
            "properties": {
              "page_size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "page_token": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ContractEntry"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Queries contracts based on name returns [`ChannelsResponse`]",
        "type": "object",
        "required": [
          "channels"
        ],
        "properties": {
          "channels": {
            "type": "object",
            "required": [
              "names"
            ],
            "properties": {
              "names": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ChannelEntry"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Page over contracts returns [`ChannelListResponse`]",
        "type": "object",
        "required": [
          "channel_list"
        ],
        "properties": {
          "channel_list": {
            "type": "object",
            "properties": {
              "page_size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "page_token": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/ChannelEntry"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieve the registered dexes returns [`RegisteredDexesResponse`]",
        "type": "object",
        "required": [
          "registered_dexes"
        ],
        "properties": {
          "registered_dexes": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieve the pools with the specified keys returns [`PoolsResponse`] TODO: this may need to take a page_token and page_size for the return",
        "type": "object",
        "required": [
          "pools"
        ],
        "properties": {
          "pools": {
            "type": "object",
            "required": [
              "keys"
            ],
            "properties": {
              "keys": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DexAssetPairing"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieve the (optionally-filtered) list of pools. returns [`PoolAddressListResponse`]",
        "type": "object",
        "required": [
          "pool_list"
        ],
        "properties": {
          "pool_list": {
            "type": "object",
            "properties": {
              "filter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AssetPairingFilter"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "page_size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "page_token": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/DexAssetPairing"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the pool metadatas for given pool ids returns [`PoolMetadatasResponse`]",
        "type": "object",
        "required": [
          "pool_metadatas"
        ],
        "properties": {
          "pool_metadatas": {
            "type": "object",
            "required": [
              "keys"
            ],
            "properties": {
              "keys": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UniquePoolId"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Retrieve the (optionally-filtered) list of pool metadatas returns [`PoolMetadataListResponse`]",
        "type": "object",
        "required": [
          "pool_metadata_list"
        ],
        "properties": {
          "pool_metadata_list": {
            "type": "object",
            "properties": {
              "filter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PoolMetadataFilter"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "page_size": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "page_token": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/UniquePoolId"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetEntry": {
        "description": "May key to retrieve information on an asset",
        "type": "string"
      },
      "AssetPairingFilter": {
        "type": "object",
        "properties": {
          "asset_pair": {
            "description": "Filter by asset pair",
            "type": [
              "array",
              "null"
            ],
            "items": [
              {
                "$ref": "#/definitions/AssetEntry"
              },
              {
                "$ref": "#/definitions/AssetEntry"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          },
          "dex": {
            "description": "Filter by dex",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "ChannelEntry": {
        "description": "Key to get the Address of a connected_chain Use [`UncheckedChannelEntry`] to construct this type.",
        "type": "object",
        "required": [
          "connected_chain",
          "protocol"
        ],
        "properties": {
          "connected_chain": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          }
        }
      },
      "ContractEntry": {
        "description": "Key to get the Address of a contract Use [`UncheckedContractEntry`] to construct this type.",
        "type": "object",
        "required": [
          "contract",
          "protocol"
        ],
        "properties": {
          "contract": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          }
        }
      },
      "DexAssetPairing": {
        "description": "The key for an asset pairing Consists of the two assets and the dex name TODO: what if we made keys equal based on the two assets either way?",
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/AssetEntry"
          },
          {
            "$ref": "#/definitions/AssetEntry"
          },
          {
            "type": "string"
          }
        ],
        "maxItems": 3,
        "minItems": 3
      },
      "PoolMetadataFilter": {
        "description": "Filter on the pool metadatas",
        "type": "object",
        "properties": {
          "pool_type": {
            "description": "Filter by pool type",
            "anyOf": [
              {
                "$ref": "#/definitions/PoolType"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "PoolType": {
        "type": "string",
        "enum": [
          "ConstantProduct",
          "Stable",
          "Weighted",
          "LiquidityBootstrap"
        ]
      },
      "UniquePoolId": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "asset_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetListResponse",
      "description": "Query response",
      "type": "object",
      "required": [
        "assets"
      ],
      "properties": {
        "assets": {
          "description": "Assets (name, assetinfo)",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetEntry"
              },
              {
                "$ref": "#/definitions/AssetInfoBase_for_Addr"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "AssetInfoBase_for_Addr": {
          "description": "Represents the type of an fungible asset\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address. - CW1155 tokens. To create an **asset info** instance of this type, provide the contract address and token ID.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw1155"
              ],
              "properties": {
                "cw1155": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "assets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsResponse",
      "description": "Query response",
      "type": "object",
      "required": [
        "assets"
      ],
      "properties": {
        "assets": {
          "description": "Assets (name, assetinfo)",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetEntry"
              },
              {
                "$ref": "#/definitions/AssetInfoBase_for_Addr"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "AssetInfoBase_for_Addr": {
          "description": "Represents the type of an fungible asset\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address. - CW1155 tokens. To create an **asset info** instance of this type, provide the contract address and token ID.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw1155"
              ],
              "properties": {
                "cw1155": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "channel_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChannelListResponse",
      "type": "object",
      "required": [
        "channels"
      ],
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/ChannelEntry"
              },
              {
                "type": "string"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChannelEntry": {
          "description": "Key to get the Address of a connected_chain Use [`UncheckedChannelEntry`] to construct this type.",
          "type": "object",
          "required": [
            "connected_chain",
            "protocol"
          ],
          "properties": {
            "connected_chain": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            }
          }
        }
      }
    },
    "channels": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChannelsResponse",
      "type": "object",
      "required": [
        "channels"
      ],
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/ChannelEntry"
              },
              {
                "type": "string"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChannelEntry": {
          "description": "Key to get the Address of a connected_chain Use [`UncheckedChannelEntry`] to construct this type.",
          "type": "object",
          "required": [
            "connected_chain",
            "protocol"
          ],
          "properties": {
            "connected_chain": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            }
          }
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "admin",
        "next_unique_pool_id"
      ],
      "properties": {
        "admin": {
          "$ref": "#/definitions/Addr"
        },
        "next_unique_pool_id": {
          "$ref": "#/definitions/UniquePoolId"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "UniquePoolId": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "contract_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractListResponse",
      "type": "object",
      "required": [
        "contracts"
      ],
      "properties": {
        "contracts": {
          "description": "Contracts (name, address)",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/ContractEntry"
              },
              {
                "type": "string"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ContractEntry": {
          "description": "Key to get the Address of a contract Use [`UncheckedContractEntry`] to construct this type.",
          "type": "object",
          "required": [
            "contract",
            "protocol"
          ],
          "properties": {
            "contract": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            }
          }
        }
      }
    },
    "contracts": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractsResponse",
      "type": "object",
      "required": [
        "contracts"
      ],
      "properties": {
        "contracts": {
          "description": "Contracts (name, address)",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/ContractEntry"
              },
              {
                "type": "string"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ContractEntry": {
          "description": "Key to get the Address of a contract Use [`UncheckedContractEntry`] to construct this type.",
          "type": "object",
          "required": [
            "contract",
            "protocol"
          ],
          "properties": {
            "contract": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            }
          }
        }
      }
    },
    "pool_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolAddressListResponse",
      "type": "object",
      "required": [
        "pools"
      ],
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/DexAssetPairing"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PoolReference"
                }
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "DexAssetPairing": {
          "description": "The key for an asset pairing Consists of the two assets and the dex name TODO: what if we made keys equal based on the two assets either way?",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 3,
          "minItems": 3
        },
        "PoolAddressBase_for_Addr": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "contract"
              ],
              "properties": {
                "contract": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolReference": {
          "type": "object",
          "required": [
            "pool_address",
            "unique_id"
          ],
          "properties": {
            "pool_address": {
              "$ref": "#/definitions/PoolAddressBase_for_Addr"
            },
            "unique_id": {
              "$ref": "#/definitions/UniquePoolId"
            }
          },
          "additionalProperties": false
        },
        "UniquePoolId": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "pool_metadata_list": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolMetadataListResponse",
      "type": "object",
      "required": [
        "metadatas"
      ],
      "properties": {
        "metadatas": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/UniquePoolId"
              },
              {
                "$ref": "#/definitions/PoolMetadata"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "PoolMetadata": {
          "type": "object",
          "required": [
            "assets",
            "dex",
            "pool_type"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetEntry"
              }
            },
            "dex": {
              "type": "string"
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            }
          }
        },
        "PoolType": {
          "type": "string",
          "enum": [
            "ConstantProduct",
            "Stable",
            "Weighted",
            "LiquidityBootstrap"
          ]
        },
        "UniquePoolId": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "pool_metadatas": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolMetadatasResponse",
      "type": "object",
      "required": [
        "metadatas"
      ],
      "properties": {
        "metadatas": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/UniquePoolId"
              },
              {
                "$ref": "#/definitions/PoolMetadata"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "PoolMetadata": {
          "type": "object",
          "required": [
            "assets",
            "dex",
            "pool_type"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetEntry"
              }
            },
            "dex": {
              "type": "string"
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            }
          }
        },
        "PoolType": {
          "type": "string",
          "enum": [
            "ConstantProduct",
            "Stable",
            "Weighted",
            "LiquidityBootstrap"
          ]
        },
        "UniquePoolId": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "pools": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolsResponse",
      "type": "object",
      "required": [
        "pools"
      ],
      "properties": {
        "pools": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/DexAssetPairing"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/PoolReference"
                }
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "DexAssetPairing": {
          "description": "The key for an asset pairing Consists of the two assets and the dex name TODO: what if we made keys equal based on the two assets either way?",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 3,
          "minItems": 3
        },
        "PoolAddressBase_for_Addr": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "contract"
              ],
              "properties": {
                "contract": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolReference": {
          "type": "object",
          "required": [
            "pool_address",
            "unique_id"
          ],
          "properties": {
            "pool_address": {
              "$ref": "#/definitions/PoolAddressBase_for_Addr"
            },
            "unique_id": {
              "$ref": "#/definitions/UniquePoolId"
            }
          },
          "additionalProperties": false
        },
        "UniquePoolId": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "registered_dexes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RegisteredDexesResponse",
      "type": "object",
      "required": [
        "dexes"
      ],
      "properties": {
        "dexes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
