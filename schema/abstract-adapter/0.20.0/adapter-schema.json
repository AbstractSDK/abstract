{
  "contract_name": "adapter-schema",
  "contract_version": "0.20.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "base",
      "module"
    ],
    "properties": {
      "base": {
        "description": "base instantiate information",
        "allOf": [
          {
            "$ref": "#/definitions/BaseInstantiateMsg"
          }
        ]
      },
      "module": {
        "description": "custom instantiate msg",
        "allOf": [
          {
            "$ref": "#/definitions/Empty"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "BaseInstantiateMsg": {
        "description": "Used by Abstract to instantiate the contract The contract is then registered on the version control contract using [`crate::version_control::ExecuteMsg::ProposeModules`].",
        "type": "object",
        "required": [
          "ans_host_address",
          "version_control_address"
        ],
        "properties": {
          "ans_host_address": {
            "description": "Used to easily perform address translation",
            "type": "string"
          },
          "version_control_address": {
            "description": "Used to verify senders",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Wrapper around all possible messages that can be sent to the module.",
    "oneOf": [
      {
        "description": "A configuration message, defined by the base.",
        "type": "object",
        "required": [
          "base"
        ],
        "properties": {
          "base": {
            "$ref": "#/definitions/BaseExecuteMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "An app request defined by a base consumer.",
        "type": "object",
        "required": [
          "module"
        ],
        "properties": {
          "module": {
            "$ref": "#/definitions/AdapterRequestMsg_for_Empty"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "IbcReceive to process IBC callbacks In order to trust this, the apps and adapters verify this comes from the ibc-client contract.",
        "type": "object",
        "required": [
          "ibc_callback"
        ],
        "properties": {
          "ibc_callback": {
            "$ref": "#/definitions/IbcResponseMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Receive endpoint for CW20 / external service integrations",
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Empty"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AdapterBaseMsg": {
        "description": "Configuration message for the adapter",
        "oneOf": [
          {
            "description": "Add or remove authorized addresses If an authorized address is both in to_add and to_remove, it will be removed.",
            "type": "object",
            "required": [
              "update_authorized_addresses"
            ],
            "properties": {
              "update_authorized_addresses": {
                "type": "object",
                "required": [
                  "to_add",
                  "to_remove"
                ],
                "properties": {
                  "to_add": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "to_remove": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AdapterRequestMsg_for_Empty": {
        "description": "An adapter request. If proxy is None, then the sender must be an Account manager and the proxy address is extrapolated from the Account id.",
        "type": "object",
        "required": [
          "request"
        ],
        "properties": {
          "proxy_address": {
            "type": [
              "string",
              "null"
            ]
          },
          "request": {
            "description": "The actual request",
            "allOf": [
              {
                "$ref": "#/definitions/Empty"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Attribute": {
        "description": "An key value pair that is used in the context of event attributes in logs",
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "BaseExecuteMsg": {
        "type": "object",
        "required": [
          "msg"
        ],
        "properties": {
          "msg": {
            "$ref": "#/definitions/AdapterBaseMsg"
          },
          "proxy_address": {
            "description": "The Proxy address for which to apply the configuration If None, the sender must be an Account manager and the configuration is applied to its associated proxy. If Some, the sender must be a direct or indirect owner (through sub-accounts) of the specified proxy.",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Callback": {
        "oneOf": [
          {
            "description": "Result of executing the requested query, or an error.\n\nresult[i] corresponds to the i'th query and contains the base64 encoded query response.",
            "type": "object",
            "required": [
              "query"
            ],
            "properties": {
              "query": {
                "$ref": "#/definitions/Result_of_Array_of_Binary_or_ErrorResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Result of executing the requested messages, or an error.\n\n14/04/23: if a submessage errors the reply handler can see `codespace: wasm, code: 5`, but not the actual error. as a result, we can't return good errors for Execution and this error string will only tell you the error's codespace. for example, an out-of-gas error is code 11 and looks like `codespace: sdk, code: 11`.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "$ref": "#/definitions/Result_of_ExecutionResponse_or_String"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An error occured that could not be recovered from. The only known way that this can occur is message handling running out of gas, in which case the error will be `codespace: sdk, code: 11`.\n\nThis error is not named becuase it could also occur due to a panic or unhandled error during message processing. We don't expect this to happen and have carefully written the code to avoid it.",
            "type": "object",
            "required": [
              "fatal_error"
            ],
            "properties": {
              "fatal_error": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "message_index"
        ],
        "properties": {
          "error": {
            "description": "The error that occured executing the message.",
            "type": "string"
          },
          "message_index": {
            "description": "The index of the first message who's execution failed.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Event": {
        "description": "A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]), which then get magically converted to bytes for Tendermint somewhere between the Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/main/learn/advanced/events [*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70",
        "type": "object",
        "required": [
          "attributes",
          "type"
        ],
        "properties": {
          "attributes": {
            "description": "The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/main/learn/advanced/events",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "type": {
            "description": "The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.",
            "type": "string"
          }
        }
      },
      "ExecutionResponse": {
        "type": "object",
        "required": [
          "executed_by",
          "result"
        ],
        "properties": {
          "executed_by": {
            "description": "The address on the remote chain that executed the messages.",
            "type": "string"
          },
          "result": {
            "description": "Index `i` corresponds to the result of executing the `i`th message.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubMsgResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "IbcResponseMsg": {
        "description": "IbcResponseMsg should be de/serialized under `IbcCallback()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "id",
          "result"
        ],
        "properties": {
          "id": {
            "description": "The ID chosen by the caller in the `callback_info.id`",
            "type": "string"
          },
          "msg": {
            "description": "The msg sent with the callback request. This is usually used to provide information to the ibc callback function for context",
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "result": {
            "$ref": "#/definitions/Callback"
          }
        },
        "additionalProperties": false
      },
      "Result_of_Array_of_Binary_or_ErrorResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Binary"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        ]
      },
      "Result_of_ExecutionResponse_or_String": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "$ref": "#/definitions/ExecutionResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SubMsgResponse": {
        "description": "The information we get back from a successful sub message execution, with full Cosmos SDK events.",
        "type": "object",
        "required": [
          "events"
        ],
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "A query to the base.",
        "type": "object",
        "required": [
          "base"
        ],
        "properties": {
          "base": {
            "$ref": "#/definitions/BaseQueryMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Custom query",
        "type": "object",
        "required": [
          "module"
        ],
        "properties": {
          "module": {
            "$ref": "#/definitions/EmptyQuery"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "BaseQueryMsg": {
        "description": "Query adapter message",
        "oneOf": [
          {
            "description": "Returns [`AdapterConfigResponse`].",
            "type": "object",
            "required": [
              "base_config"
            ],
            "properties": {
              "base_config": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns [`AuthorizedAddressesResponse`].",
            "type": "object",
            "required": [
              "authorized_addresses"
            ],
            "properties": {
              "authorized_addresses": {
                "type": "object",
                "required": [
                  "proxy_address"
                ],
                "properties": {
                  "proxy_address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns module data",
            "type": "object",
            "required": [
              "module_data"
            ],
            "properties": {
              "module_data": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EmptyQuery": {
        "type": "string",
        "enum": []
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "sudo": null,
  "responses": {
    "authorized_addresses": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuthorizedAddressesResponse",
      "type": "object",
      "required": [
        "addresses"
      ],
      "properties": {
        "addresses": {
          "description": "Contains all authorized addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "base_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdapterConfigResponse",
      "type": "object",
      "required": [
        "ans_host_address",
        "dependencies",
        "version_control_address"
      ],
      "properties": {
        "ans_host_address": {
          "$ref": "#/definitions/Addr"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version_control_address": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "module_data": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ModuleDataResponse",
      "type": "object",
      "required": [
        "dependencies",
        "module_id",
        "version"
      ],
      "properties": {
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyResponse"
          }
        },
        "metadata": {
          "type": [
            "string",
            "null"
          ]
        },
        "module_id": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "DependencyResponse": {
          "type": "object",
          "required": [
            "id",
            "version_req"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "version_req": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
