{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InfoResponse",
  "type": "object",
  "required": [
    "info"
  ],
  "properties": {
    "info": {
      "$ref": "#/definitions/AccountInfo_for_Addr"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AccountInfo_for_Addr": {
      "description": "Abstract Account details.",
      "type": "object",
      "required": [
        "chain_id",
        "governance_details",
        "name"
      ],
      "properties": {
        "chain_id": {
          "type": "string"
        },
        "description": {
          "type": [
            "string",
            "null"
          ]
        },
        "governance_details": {
          "$ref": "#/definitions/GovernanceDetails_for_Addr"
        },
        "link": {
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "GovernanceDetails_for_Addr": {
      "description": "Governance types",
      "oneOf": [
        {
          "description": "A single address is admin",
          "type": "object",
          "required": [
            "Monarchy"
          ],
          "properties": {
            "Monarchy": {
              "type": "object",
              "required": [
                "monarch"
              ],
              "properties": {
                "monarch": {
                  "description": "The monarch's address",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Used when the account is a sub-account of another account.",
          "type": "object",
          "required": [
            "SubAccount"
          ],
          "properties": {
            "SubAccount": {
              "type": "object",
              "required": [
                "manager",
                "proxy"
              ],
              "properties": {
                "manager": {
                  "description": "The manager of the account of which this account is the sub-account.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "proxy": {
                  "description": "The proxy of the account of which this account is the sub-account.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "An external governance source",
          "type": "object",
          "required": [
            "External"
          ],
          "properties": {
            "External": {
              "type": "object",
              "required": [
                "governance_address",
                "governance_type"
              ],
              "properties": {
                "governance_address": {
                  "description": "The external contract address",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                },
                "governance_type": {
                  "description": "Governance type used for doing extra off-chain queries depending on the type.",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
