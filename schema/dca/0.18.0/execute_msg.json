{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Wrapper around all possible messages that can be sent to the module.",
  "oneOf": [
    {
      "description": "A configuration message, defined by the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "An app request defined by a base consumer.",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/DCAExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "IbcReceive to process IBC callbacks",
      "type": "object",
      "required": [
        "ibc_callback"
      ],
      "properties": {
        "ibc_callback": {
          "$ref": "#/definitions/IbcResponseMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receive endpoint for CW20 / external service integrations",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Empty"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AnsAsset": {
      "type": "object",
      "required": [
        "amount",
        "name"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "name": {
          "$ref": "#/definitions/AssetEntry"
        }
      }
    },
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "BaseExecuteMsg": {
      "oneOf": [
        {
          "description": "Updates the base config",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "ans_host_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "DCAExecuteMsg": {
      "description": "App execute messages",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "new_dca_creation_amount": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "new_max_spread": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "new_native_denom": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "new_refill_threshold": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Used to create a new DCA",
          "type": "object",
          "required": [
            "create_d_c_a"
          ],
          "properties": {
            "create_d_c_a": {
              "type": "object",
              "required": [
                "dex",
                "frequency",
                "source_asset",
                "target_asset"
              ],
              "properties": {
                "dex": {
                  "description": "The DEX to be used for the swap",
                  "type": "string"
                },
                "frequency": {
                  "description": "The frequency of purchase",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Frequency"
                    }
                  ]
                },
                "source_asset": {
                  "description": "The name of the asset to be used for purchasing",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    }
                  ]
                },
                "target_asset": {
                  "description": "The name of the asset to be purchased",
                  "allOf": [
                    {
                      "$ref": "#/definitions/AssetEntry"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Used to update an existing DCA",
          "type": "object",
          "required": [
            "update_d_c_a"
          ],
          "properties": {
            "update_d_c_a": {
              "type": "object",
              "required": [
                "dca_id"
              ],
              "properties": {
                "dca_id": {
                  "description": "Unique identifier for the DCA",
                  "type": "string"
                },
                "new_dex": {
                  "description": "Optional new DEX to be used for the swap",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "new_frequency": {
                  "description": "Optional new frequency of purchase",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Frequency"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "new_source_asset": {
                  "description": "Optional new name of the asset to be used for purchasing",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AnsAsset"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "new_target_asset": {
                  "description": "Optional new name of the asset to be purchased",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AssetEntry"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Used to cancel an existing DCA",
          "type": "object",
          "required": [
            "cancel_d_c_a"
          ],
          "properties": {
            "cancel_d_c_a": {
              "type": "object",
              "required": [
                "dca_id"
              ],
              "properties": {
                "dca_id": {
                  "description": "Unique identifier for the DCA",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Internal method for triggering swap. It can be called only by the Croncat Manager",
          "type": "object",
          "required": [
            "convert"
          ],
          "properties": {
            "convert": {
              "type": "object",
              "required": [
                "dca_id"
              ],
              "properties": {
                "dca_id": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Empty": {
      "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
      "type": "object"
    },
    "Frequency": {
      "oneOf": [
        {
          "description": "Blocks will schedule the next DCA purchase every `n` blocks.",
          "type": "object",
          "required": [
            "every_n_blocks"
          ],
          "properties": {
            "every_n_blocks": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time will schedule the next DCA purchase using crontab.",
          "type": "object",
          "required": [
            "cron"
          ],
          "properties": {
            "cron": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcResponseMsg": {
      "description": "IbcResponseMsg should be de/serialized under `IbcCallback()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "id",
        "msg"
      ],
      "properties": {
        "id": {
          "description": "The ID chosen by the caller in the `callback_id`",
          "type": "string"
        },
        "msg": {
          "$ref": "#/definitions/StdAck"
        }
      },
      "additionalProperties": false
    },
    "StdAck": {
      "description": "This is a generic ICS acknowledgement format. Proto defined [here](https://github.com/cosmos/cosmos-sdk/blob/v0.42.0/proto/ibc/core/channel/v1/channel.proto#L141-L147) If ibc_receive_packet returns Err(), then x/wasm runtime will rollback the state and return an error message in this format",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "result"
          ],
          "properties": {
            "result": {
              "$ref": "#/definitions/Binary"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "error"
          ],
          "properties": {
            "error": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
