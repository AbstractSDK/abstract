{
  "contract_name": "abstract-ibc-host",
  "contract_version": "0.22.1",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Used by Abstract to instantiate the contract The contract is then registered on the version control contract using [`crate::version_control::ExecuteMsg::ProposeModules`].",
    "type": "object",
    "required": [
      "account_factory_address",
      "ans_host_address",
      "version_control_address"
    ],
    "properties": {
      "account_factory_address": {
        "description": "Used to create remote abstract accounts",
        "type": "string"
      },
      "ans_host_address": {
        "description": "Used to easily perform address translation on the app chain",
        "type": "string"
      },
      "version_control_address": {
        "description": "Version control address",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Interface to the Host.",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_ownership"
        ],
        "properties": {
          "update_ownership": {
            "$ref": "#/definitions/Action"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "account_factory_address": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "ans_host_address": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "version_control_address": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Register the Polytone proxy for a specific chain. proxy should be a local address (will be validated)",
        "type": "object",
        "required": [
          "register_chain_proxy"
        ],
        "properties": {
          "register_chain_proxy": {
            "type": "object",
            "required": [
              "chain",
              "proxy"
            ],
            "properties": {
              "chain": {
                "$ref": "#/definitions/ChainName"
              },
              "proxy": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Remove the Polytone proxy for a specific chain.",
        "type": "object",
        "required": [
          "remove_chain_proxy"
        ],
        "properties": {
          "remove_chain_proxy": {
            "type": "object",
            "required": [
              "chain"
            ],
            "properties": {
              "chain": {
                "$ref": "#/definitions/ChainName"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows for remote execution from the Polytone implementation",
        "type": "object",
        "required": [
          "execute"
        ],
        "properties": {
          "execute": {
            "type": "object",
            "required": [
              "account_id",
              "action",
              "proxy_address"
            ],
            "properties": {
              "account_id": {
                "$ref": "#/definitions/AccountId"
              },
              "action": {
                "$ref": "#/definitions/HostAction"
              },
              "proxy_address": {
                "description": "The address of the calling account id. This is used purely for the send-all-back method. We include it in all messages none-the-less to simplify the users life",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Performs an execution on a local module",
        "type": "object",
        "required": [
          "module_execute"
        ],
        "properties": {
          "module_execute": {
            "type": "object",
            "required": [
              "msg",
              "source_module",
              "target_module"
            ],
            "properties": {
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "source_module": {
                "$ref": "#/definitions/InstalledModuleIdentification"
              },
              "target_module": {
                "$ref": "#/definitions/ModuleInfo"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ChainName"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Action": {
        "description": "Actions that can be taken to alter the contract's ownership",
        "oneOf": [
          {
            "description": "Propose to transfer the contract's ownership to another account, optionally with an expiry time.\n\nCan only be called by the contract's current owner.\n\nAny existing pending ownership transfer is overwritten.",
            "type": "object",
            "required": [
              "transfer_ownership"
            ],
            "properties": {
              "transfer_ownership": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "expiry": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accept the pending ownership transfer.\n\nCan only be called by the pending owner.",
            "type": "string",
            "enum": [
              "accept_ownership"
            ]
          },
          {
            "description": "Give up the contract's ownership and the possibility of appointing a new owner.\n\nCan only be invoked by the contract's current owner.\n\nAny existing pending ownership transfer is canceled.",
            "type": "string",
            "enum": [
              "renounce_ownership"
            ]
          }
        ]
      },
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CallbackMsg": {
        "description": "Callback message to set the dependencies after module upgrades.",
        "type": "object",
        "additionalProperties": false
      },
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "ExecuteMsg": {
        "description": "Manager execute messages",
        "oneOf": [
          {
            "description": "Forward execution message to module",
            "type": "object",
            "required": [
              "exec_on_module"
            ],
            "properties": {
              "exec_on_module": {
                "type": "object",
                "required": [
                  "exec_msg",
                  "module_id"
                ],
                "properties": {
                  "exec_msg": {
                    "$ref": "#/definitions/Binary"
                  },
                  "module_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update Abstract-specific configuration of the module. Only callable by the account factory or owner.",
            "type": "object",
            "required": [
              "update_internal_config"
            ],
            "properties": {
              "update_internal_config": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Install module using module factory, callable by Owner",
            "type": "object",
            "required": [
              "install_modules"
            ],
            "properties": {
              "install_modules": {
                "type": "object",
                "required": [
                  "modules"
                ],
                "properties": {
                  "modules": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModuleInstallConfig"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Uninstall a module given its ID.",
            "type": "object",
            "required": [
              "uninstall_module"
            ],
            "properties": {
              "uninstall_module": {
                "type": "object",
                "required": [
                  "module_id"
                ],
                "properties": {
                  "module_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Upgrade the module to a new version If module is `abstract::manager` then the contract will do a self-migration.",
            "type": "object",
            "required": [
              "upgrade"
            ],
            "properties": {
              "upgrade": {
                "type": "object",
                "required": [
                  "modules"
                ],
                "properties": {
                  "modules": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "$ref": "#/definitions/ModuleInfo"
                        },
                        {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/Binary"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      ],
                      "maxItems": 2,
                      "minItems": 2
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Creates a sub-account on the account",
            "type": "object",
            "required": [
              "create_sub_account"
            ],
            "properties": {
              "create_sub_account": {
                "type": "object",
                "required": [
                  "install_modules",
                  "name"
                ],
                "properties": {
                  "account_id": {
                    "description": "If `None`, will create a new local account without asserting account-id.\n\nWhen provided sequence in 0..2147483648 range: The tx will error When provided sequence in 2147483648..u32::MAX range: Signals use of unclaimed Account Id in this range. The tx will error if this account-id already claimed. Useful for instantiate2 address prediction.",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "base_asset": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AssetEntry"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "install_modules": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModuleInstallConfig"
                    }
                  },
                  "link": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update info",
            "type": "object",
            "required": [
              "update_info"
            ],
            "properties": {
              "update_info": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "link": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Proposes a new Owner The new owner has to claim ownership through the [`ExecuteMsg::UpdateOwnership`] message. The claim action can be called by the new owner directly OR by the owner of a top-level account if the new ownership structure is a sub-account.",
            "type": "object",
            "required": [
              "propose_owner"
            ],
            "properties": {
              "propose_owner": {
                "type": "object",
                "required": [
                  "owner"
                ],
                "properties": {
                  "owner": {
                    "$ref": "#/definitions/GovernanceDetails_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update account statuses",
            "type": "object",
            "required": [
              "update_status"
            ],
            "properties": {
              "update_status": {
                "type": "object",
                "properties": {
                  "is_suspended": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Actions called by internal or external sub-accounts",
            "type": "object",
            "required": [
              "update_sub_account"
            ],
            "properties": {
              "update_sub_account": {
                "$ref": "#/definitions/UpdateSubAccountAction"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Callback endpoint",
            "type": "object",
            "required": [
              "callback"
            ],
            "properties": {
              "callback": {
                "$ref": "#/definitions/CallbackMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update the contract's ownership. The `action` to be provided can be either to propose transferring ownership to an account, accept a pending ownership transfer, or renounce the ownership permanently.",
            "type": "object",
            "required": [
              "update_ownership"
            ],
            "properties": {
              "update_ownership": {
                "$ref": "#/definitions/Action"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GovernanceDetails_for_String": {
        "description": "Governance types",
        "oneOf": [
          {
            "description": "A single address is admin",
            "type": "object",
            "required": [
              "Monarchy"
            ],
            "properties": {
              "Monarchy": {
                "type": "object",
                "required": [
                  "monarch"
                ],
                "properties": {
                  "monarch": {
                    "description": "The monarch's address",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Used when the account is a sub-account of another account.",
            "type": "object",
            "required": [
              "SubAccount"
            ],
            "properties": {
              "SubAccount": {
                "type": "object",
                "required": [
                  "manager",
                  "proxy"
                ],
                "properties": {
                  "manager": {
                    "description": "The manager of the account of which this account is the sub-account.",
                    "type": "string"
                  },
                  "proxy": {
                    "description": "The proxy of the account of which this account is the sub-account.",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An external governance source",
            "type": "object",
            "required": [
              "External"
            ],
            "properties": {
              "External": {
                "type": "object",
                "required": [
                  "governance_address",
                  "governance_type"
                ],
                "properties": {
                  "governance_address": {
                    "description": "The external contract address",
                    "type": "string"
                  },
                  "governance_type": {
                    "description": "Governance type used for doing extra off-chain queries depending on the type.",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Renounced account This account no longer has an owner and cannot be used.",
            "type": "object",
            "required": [
              "Renounced"
            ],
            "properties": {
              "Renounced": {
                "type": "object"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HelperAction": {
        "oneOf": [
          {
            "description": "What do we need here ? TODO",
            "type": "string",
            "enum": [
              "send_all_back"
            ]
          }
        ]
      },
      "HostAction": {
        "description": "Callable actions on a remote host",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "dispatch"
            ],
            "properties": {
              "dispatch": {
                "type": "object",
                "required": [
                  "manager_msgs"
                ],
                "properties": {
                  "manager_msgs": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ExecuteMsg"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Can't be called by an account directly. These are permissioned messages that only the IBC Client is allowed to call by itself.",
            "type": "object",
            "required": [
              "internal"
            ],
            "properties": {
              "internal": {
                "$ref": "#/definitions/InternalAction"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Some helpers that allow calling dispatch messages faster (for actions that are called regularly)",
            "type": "object",
            "required": [
              "helpers"
            ],
            "properties": {
              "helpers": {
                "$ref": "#/definitions/HelperAction"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "InstalledModuleIdentification": {
        "description": "This is used for identifying calling modules For adapters, we don't need the account id because it's independent of an account For apps and standalone, the account id is used to identify the calling module",
        "type": "object",
        "required": [
          "module_info"
        ],
        "properties": {
          "account_id": {
            "anyOf": [
              {
                "$ref": "#/definitions/AccountId"
              },
              {
                "type": "null"
              }
            ]
          },
          "module_info": {
            "$ref": "#/definitions/ModuleInfo"
          }
        },
        "additionalProperties": false
      },
      "InternalAction": {
        "oneOf": [
          {
            "description": "Registers a new account from a remote chain",
            "type": "object",
            "required": [
              "register"
            ],
            "properties": {
              "register": {
                "type": "object",
                "required": [
                  "install_modules",
                  "name"
                ],
                "properties": {
                  "base_asset": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AssetEntry"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "install_modules": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModuleInstallConfig"
                    }
                  },
                  "link": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ModuleInfo": {
        "description": "Stores the namespace, name, and version of an Abstract module.",
        "type": "object",
        "required": [
          "name",
          "namespace",
          "version"
        ],
        "properties": {
          "name": {
            "description": "Name of the contract",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the module",
            "allOf": [
              {
                "$ref": "#/definitions/Namespace"
              }
            ]
          },
          "version": {
            "description": "Version of the module",
            "allOf": [
              {
                "$ref": "#/definitions/ModuleVersion"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ModuleInstallConfig": {
        "description": "Module info and init message",
        "type": "object",
        "required": [
          "module"
        ],
        "properties": {
          "init_msg": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "module": {
            "$ref": "#/definitions/ModuleInfo"
          }
        },
        "additionalProperties": false
      },
      "ModuleVersion": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "latest"
            ]
          },
          {
            "type": "object",
            "required": [
              "version"
            ],
            "properties": {
              "version": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Namespace": {
        "description": "Represents an Abstract namespace for modules",
        "type": "string"
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UpdateSubAccountAction": {
        "oneOf": [
          {
            "description": "Unregister sub-account It will unregister sub-account from the state Could be called only by the sub-account itself",
            "type": "object",
            "required": [
              "unregister_sub_account"
            ],
            "properties": {
              "unregister_sub_account": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Register sub-account It will register new sub-account into the state Could be called by the sub-account manager Note: since it happens after the claim by this manager state won't have spam accounts",
            "type": "object",
            "required": [
              "register_sub_account"
            ],
            "properties": {
              "register_sub_account": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Query Host message",
    "oneOf": [
      {
        "description": "Queries the ownership of the ibc client contract Returns [`cw_ownable::Ownership<Addr>`]",
        "type": "object",
        "required": [
          "ownership"
        ],
        "properties": {
          "ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`ConfigResponse`].",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Lists all the polytone proxy contracts and their respective client chain registered with the host. Returns [`ClientProxiesResponse`].",
        "type": "object",
        "required": [
          "client_proxies"
        ],
        "properties": {
          "client_proxies": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the polytone proxy contract address for a specific client chain. Returns [`ClientProxyResponse`].",
        "type": "object",
        "required": [
          "client_proxy"
        ],
        "properties": {
          "client_proxy": {
            "type": "object",
            "required": [
              "chain"
            ],
            "properties": {
              "chain": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Performs an query on a local module",
        "type": "object",
        "required": [
          "module_query"
        ],
        "properties": {
          "module_query": {
            "type": "object",
            "required": [
              "msg",
              "target_module"
            ],
            "properties": {
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "target_module": {
                "$ref": "#/definitions/InstalledModuleIdentification"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ChainName"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "InstalledModuleIdentification": {
        "description": "This is used for identifying calling modules For adapters, we don't need the account id because it's independent of an account For apps and standalone, the account id is used to identify the calling module",
        "type": "object",
        "required": [
          "module_info"
        ],
        "properties": {
          "account_id": {
            "anyOf": [
              {
                "$ref": "#/definitions/AccountId"
              },
              {
                "type": "null"
              }
            ]
          },
          "module_info": {
            "$ref": "#/definitions/ModuleInfo"
          }
        },
        "additionalProperties": false
      },
      "ModuleInfo": {
        "description": "Stores the namespace, name, and version of an Abstract module.",
        "type": "object",
        "required": [
          "name",
          "namespace",
          "version"
        ],
        "properties": {
          "name": {
            "description": "Name of the contract",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the module",
            "allOf": [
              {
                "$ref": "#/definitions/Namespace"
              }
            ]
          },
          "version": {
            "description": "Version of the module",
            "allOf": [
              {
                "$ref": "#/definitions/ModuleVersion"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ModuleVersion": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "latest"
            ]
          },
          {
            "type": "object",
            "required": [
              "version"
            ],
            "properties": {
              "version": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Namespace": {
        "description": "Represents an Abstract namespace for modules",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "client_proxies": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ClientProxiesResponse",
      "type": "object",
      "required": [
        "chains"
      ],
      "properties": {
        "chains": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/ChainName"
              },
              {
                "$ref": "#/definitions/Addr"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        }
      }
    },
    "client_proxy": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ClientProxyResponse",
      "type": "object",
      "required": [
        "proxy"
      ],
      "properties": {
        "proxy": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "account_factory_address",
        "ans_host_address",
        "version_control_address"
      ],
      "properties": {
        "account_factory_address": {
          "$ref": "#/definitions/Addr"
        },
        "ans_host_address": {
          "$ref": "#/definitions/Addr"
        },
        "version_control_address": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "module_query": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Binary",
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ownership": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ownership_for_Addr",
      "description": "The contract's ownership info",
      "type": "object",
      "properties": {
        "owner": {
          "description": "The contract's current owner. `None` if the ownership has been renounced.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_expiry": {
          "description": "The deadline for the pending owner to accept the ownership. `None` if there isn't a pending ownership transfer, or if a transfer exists and it doesn't have a deadline.",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_owner": {
          "description": "The account who has been proposed to take over the ownership. `None` if there isn't a pending ownership transfer.",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
