{
  "contract_name": "module-schema",
  "contract_version": "0.23.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Subscription instantiation message",
    "type": "object",
    "required": [
      "income_averaging_period",
      "payment_asset",
      "subscription_cost_per_second",
      "subscription_per_second_emissions"
    ],
    "properties": {
      "income_averaging_period": {
        "description": "How often update income average",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "payment_asset": {
        "description": "Asset for payment",
        "allOf": [
          {
            "$ref": "#/definitions/AssetInfoBase_for_String"
          }
        ]
      },
      "subscription_cost_per_second": {
        "description": "Cost of the subscription on a per-second basis.",
        "allOf": [
          {
            "$ref": "#/definitions/Decimal"
          }
        ]
      },
      "subscription_per_second_emissions": {
        "description": "Subscription emissions per second",
        "allOf": [
          {
            "$ref": "#/definitions/EmissionType_for_String"
          }
        ]
      },
      "unsubscribe_hook_addr": {
        "description": "Unsubscription hook addr to send [unsubscribe message](`crate::msg::UnsubscribedHookMsg`)",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetInfoBase_for_String": {
        "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "EmissionType_for_String": {
        "description": "Setting for protocol token emissions",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "description": "A fixed number of tokens are distributed to users on a per-second basis. emission = second_shared / total_subscribers",
            "type": "object",
            "required": [
              "second_shared"
            ],
            "properties": {
              "second_shared": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "$ref": "#/definitions/AssetInfoBase_for_String"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Each user receives a fixed number of tokens on a per-second basis. emission = second_per_user",
            "type": "object",
            "required": [
              "second_per_user"
            ],
            "properties": {
              "second_per_user": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "$ref": "#/definitions/AssetInfoBase_for_String"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "App execution messages",
    "oneOf": [
      {
        "description": "Subscriber payment",
        "type": "object",
        "required": [
          "pay"
        ],
        "properties": {
          "pay": {
            "type": "object",
            "properties": {
              "subscriber_addr": {
                "description": "Address of new subscriber defaults to the sender",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Unsubscribe inactive accounts",
        "type": "object",
        "required": [
          "unsubscribe"
        ],
        "properties": {
          "unsubscribe": {
            "type": "object",
            "required": [
              "unsubscribe_addrs"
            ],
            "properties": {
              "unsubscribe_addrs": {
                "description": "List of inactive accounts to move to the `DORMANT_SUBSCRIBERS` list",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim the emissions for subscriber",
        "type": "object",
        "required": [
          "claim_emissions"
        ],
        "properties": {
          "claim_emissions": {
            "type": "object",
            "required": [
              "addr"
            ],
            "properties": {
              "addr": {
                "description": "Address of subscriber",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update config of subscription",
        "type": "object",
        "required": [
          "update_subscription_config"
        ],
        "properties": {
          "update_subscription_config": {
            "type": "object",
            "properties": {
              "payment_asset": {
                "description": "New asset for payment",
                "anyOf": [
                  {
                    "$ref": "#/definitions/AssetInfoBase_for_String"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "subscription_cost_per_second": {
                "description": "new subscription_cost_per_second",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "subscription_per_second_emissions": {
                "description": "Subscription emissions per second",
                "anyOf": [
                  {
                    "$ref": "#/definitions/EmissionType_for_String"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "unsubscribe_hook_addr": {
                "description": "New unsubscribe_hook_addr",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Clearable_for_String"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Refresh TWA value",
        "type": "object",
        "required": [
          "refresh_t_w_a"
        ],
        "properties": {
          "refresh_t_w_a": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetInfoBase_for_String": {
        "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Clearable_for_String": {
        "description": "A type representing a value that can either be cleared or set with a value of type `C`. ``` use cosmwasm_std::{StdResult, Response, DepsMut}; use cw_storage_plus::Item; use cw_clearable::Clearable;\n\nconst FOO: Item<Option<u32>> = Item::new(\"foo\");\n\npub fn update_config(deps: DepsMut, foo: Option<Clearable<u32>>) -> StdResult<Response>{ if let Some(foo) = foo { FOO.save(deps.storage, &foo.into()); } Ok(Response::new()) } ```",
        "oneOf": [
          {
            "description": "Clear the current state.",
            "type": "string",
            "enum": [
              "clear"
            ]
          },
          {
            "description": "Set state with a value of type `C`.",
            "type": "object",
            "required": [
              "set"
            ],
            "properties": {
              "set": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "EmissionType_for_String": {
        "description": "Setting for protocol token emissions",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "description": "A fixed number of tokens are distributed to users on a per-second basis. emission = second_shared / total_subscribers",
            "type": "object",
            "required": [
              "second_shared"
            ],
            "properties": {
              "second_shared": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "$ref": "#/definitions/AssetInfoBase_for_String"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Each user receives a fixed number of tokens on a per-second basis. emission = second_per_user",
            "type": "object",
            "required": [
              "second_per_user"
            ],
            "properties": {
              "second_per_user": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "$ref": "#/definitions/AssetInfoBase_for_String"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Subscriptions query messages",
    "oneOf": [
      {
        "description": "Get state of subscriptions and contributors Returns [`StateResponse`]",
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get config of subscriptions and contributors Returns [`SubscriptionConfig`]",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get minimum of one month's worth to (re)-subscribe. Returns [`SubscriptionFeeResponse`]",
        "type": "object",
        "required": [
          "fee"
        ],
        "properties": {
          "fee": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get state of the subscriber Returns [`SubscriberResponse`]",
        "type": "object",
        "required": [
          "subscriber"
        ],
        "properties": {
          "subscriber": {
            "type": "object",
            "required": [
              "addr"
            ],
            "properties": {
              "addr": {
                "description": "Address of subscriber",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get list of subscribers Returns [`SubscribersResponse`]",
        "type": "object",
        "required": [
          "subscribers"
        ],
        "properties": {
          "subscribers": {
            "type": "object",
            "properties": {
              "expired_subs": {
                "description": "Get list of expired(inactive) subscribers instead",
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "limit": {
                "description": "Limit",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0
              },
              "start_after": {
                "description": "Start after subscriber address",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "Subscription migration message",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SubscriptionConfig",
      "description": "Config for subscriber functionality",
      "type": "object",
      "required": [
        "payment_asset",
        "subscription_cost_per_second",
        "subscription_per_second_emissions"
      ],
      "properties": {
        "payment_asset": {
          "description": "Asset that's accepted as payment",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfoBase_for_Addr"
            }
          ]
        },
        "subscription_cost_per_second": {
          "description": "Cost of the subscription on a per-second basis.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "subscription_per_second_emissions": {
          "description": "Subscription emissions per second",
          "allOf": [
            {
              "$ref": "#/definitions/EmissionType_for_Addr"
            }
          ]
        },
        "unsubscribe_hook_addr": {
          "description": "Unsubscription hook addr",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetInfoBase_for_Addr": {
          "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "EmissionType_for_Addr": {
          "description": "Setting for protocol token emissions",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "description": "A fixed number of tokens are distributed to users on a per-second basis. emission = second_shared / total_subscribers",
              "type": "object",
              "required": [
                "second_shared"
              ],
              "properties": {
                "second_shared": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "$ref": "#/definitions/AssetInfoBase_for_Addr"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Each user receives a fixed number of tokens on a per-second basis. emission = second_per_user",
              "type": "object",
              "required": [
                "second_per_user"
              ],
              "properties": {
                "second_per_user": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "$ref": "#/definitions/AssetInfoBase_for_Addr"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "fee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SubscriptionFeeResponse",
      "description": "Query response for [`SubscriptionQueryMsg::Fee`]",
      "type": "object",
      "required": [
        "fee"
      ],
      "properties": {
        "fee": {
          "description": "minimum of one month's worth to (re)-subscribe.",
          "allOf": [
            {
              "$ref": "#/definitions/AssetBase_for_Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetBase_for_Addr": {
          "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "Specifies the asset's amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Specifies the asset's type (CW20 or native)",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfoBase_for_Addr"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfoBase_for_Addr": {
          "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "description": "Query response for [`SubscriptionQueryMsg::State`]",
      "type": "object",
      "required": [
        "subscription"
      ],
      "properties": {
        "subscription": {
          "description": "State of subscribers",
          "allOf": [
            {
              "$ref": "#/definitions/SubscriptionState"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "SubscriptionState": {
          "description": "Keeps track of the active subscribers. Is updated each time a sub joins/leaves Used to calculate income.",
          "type": "object",
          "required": [
            "active_subs"
          ],
          "properties": {
            "active_subs": {
              "description": "amount of active subscribers",
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "subscriber": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SubscriberResponse",
      "description": "Query response for [`SubscriptionQueryMsg::Subscriber`]",
      "type": "object",
      "required": [
        "currently_subscribed"
      ],
      "properties": {
        "currently_subscribed": {
          "description": "If the user currently active subscriber",
          "type": "boolean"
        },
        "subscriber_details": {
          "description": "State of the subscription",
          "anyOf": [
            {
              "$ref": "#/definitions/Subscriber"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Subscriber": {
          "description": "Stored info for each subscriber.",
          "type": "object",
          "required": [
            "expiration_timestamp",
            "last_emission_claim_timestamp"
          ],
          "properties": {
            "expiration_timestamp": {
              "description": "When the subscription ends",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            },
            "last_emission_claim_timestamp": {
              "description": "last time emissions were claimed",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "subscribers": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SubscribersResponse",
      "description": "Query response for [`SubscriptionQueryMsg::Subscribers`]",
      "type": "object",
      "required": [
        "subscribers"
      ],
      "properties": {
        "subscribers": {
          "description": "list of subscribers",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "$ref": "#/definitions/SubscriberResponse"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Subscriber": {
          "description": "Stored info for each subscriber.",
          "type": "object",
          "required": [
            "expiration_timestamp",
            "last_emission_claim_timestamp"
          ],
          "properties": {
            "expiration_timestamp": {
              "description": "When the subscription ends",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            },
            "last_emission_claim_timestamp": {
              "description": "last time emissions were claimed",
              "allOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "SubscriberResponse": {
          "description": "Query response for [`SubscriptionQueryMsg::Subscriber`]",
          "type": "object",
          "required": [
            "currently_subscribed"
          ],
          "properties": {
            "currently_subscribed": {
              "description": "If the user currently active subscriber",
              "type": "boolean"
            },
            "subscriber_details": {
              "description": "State of the subscription",
              "anyOf": [
                {
                  "$ref": "#/definitions/Subscriber"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
