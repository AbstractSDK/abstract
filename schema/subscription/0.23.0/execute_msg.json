{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "Custom execute handler",
  "oneOf": [
    {
      "description": "A configuration message, defined by the base.",
      "type": "object",
      "required": [
        "base"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/BaseExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "An app request defined by a base consumer.",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "$ref": "#/definitions/SubscriptionExecuteMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Custom msg type",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetInfoBase_for_String": {
      "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "BaseExecuteMsg": {
      "oneOf": [
        {
          "description": "Updates the base config",
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "ans_host_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "version_control_address": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Clearable_for_String": {
      "description": "A type representing a value that can either be cleared or set with a value of type `C`. ``` use cosmwasm_std::{StdResult, Response, DepsMut}; use cw_storage_plus::Item; use cw_clearable::Clearable;\n\nconst FOO: Item<Option<u32>> = Item::new(\"foo\");\n\npub fn update_config(deps: DepsMut, foo: Option<Clearable<u32>>) -> StdResult<Response>{ if let Some(foo) = foo { FOO.save(deps.storage, &foo.into()); } Ok(Response::new()) } ```",
      "oneOf": [
        {
          "description": "Clear the current state.",
          "type": "string",
          "enum": [
            "clear"
          ]
        },
        {
          "description": "Set state with a value of type `C`.",
          "type": "object",
          "required": [
            "set"
          ],
          "properties": {
            "set": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "EmissionType_for_String": {
      "description": "Setting for protocol token emissions",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "description": "A fixed number of tokens are distributed to users on a per-second basis. emission = second_shared / total_subscribers",
          "type": "object",
          "required": [
            "second_shared"
          ],
          "properties": {
            "second_shared": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "$ref": "#/definitions/AssetInfoBase_for_String"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Each user receives a fixed number of tokens on a per-second basis. emission = second_per_user",
          "type": "object",
          "required": [
            "second_per_user"
          ],
          "properties": {
            "second_per_user": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "$ref": "#/definitions/AssetInfoBase_for_String"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SubscriptionExecuteMsg": {
      "description": "App execution messages",
      "oneOf": [
        {
          "description": "Subscriber payment",
          "type": "object",
          "required": [
            "pay"
          ],
          "properties": {
            "pay": {
              "type": "object",
              "properties": {
                "subscriber_addr": {
                  "description": "Address of new subscriber defaults to the sender",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Unsubscribe inactive accounts",
          "type": "object",
          "required": [
            "unsubscribe"
          ],
          "properties": {
            "unsubscribe": {
              "type": "object",
              "required": [
                "unsubscribe_addrs"
              ],
              "properties": {
                "unsubscribe_addrs": {
                  "description": "List of inactive accounts to move to the `DORMANT_SUBSCRIBERS` list",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Claim the emissions for subscriber",
          "type": "object",
          "required": [
            "claim_emissions"
          ],
          "properties": {
            "claim_emissions": {
              "type": "object",
              "required": [
                "addr"
              ],
              "properties": {
                "addr": {
                  "description": "Address of subscriber",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Update config of subscription",
          "type": "object",
          "required": [
            "update_subscription_config"
          ],
          "properties": {
            "update_subscription_config": {
              "type": "object",
              "properties": {
                "payment_asset": {
                  "description": "New asset for payment",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/AssetInfoBase_for_String"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "subscription_cost_per_second": {
                  "description": "new subscription_cost_per_second",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "subscription_per_second_emissions": {
                  "description": "Subscription emissions per second",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/EmissionType_for_String"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "unsubscribe_hook_addr": {
                  "description": "New unsubscribe_hook_addr",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Clearable_for_String"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Refresh TWA value",
          "type": "object",
          "required": [
            "refresh_t_w_a"
          ],
          "properties": {
            "refresh_t_w_a": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
