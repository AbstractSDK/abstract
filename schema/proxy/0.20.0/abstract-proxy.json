{
  "contract_name": "abstract-proxy",
  "contract_version": "0.20.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "account_id",
      "ans_host_address",
      "manager_addr"
    ],
    "properties": {
      "account_id": {
        "$ref": "#/definitions/AccountId"
      },
      "ans_host_address": {
        "type": "string"
      },
      "base_asset": {
        "anyOf": [
          {
            "$ref": "#/definitions/AssetEntry"
          },
          {
            "type": "null"
          }
        ]
      },
      "manager_addr": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AccountId": {
        "description": "Unique identifier for an account. On each chain this is unique.",
        "type": "object",
        "required": [
          "seq",
          "trace"
        ],
        "properties": {
          "seq": {
            "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "trace": {
            "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
            "allOf": [
              {
                "$ref": "#/definitions/AccountTrace"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AccountTrace": {
        "description": "The identifier of chain that triggered the account creation",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "local"
            ]
          },
          {
            "type": "object",
            "required": [
              "remote"
            ],
            "properties": {
              "remote": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ChainName"
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Sets the admin",
        "type": "object",
        "required": [
          "set_admin"
        ],
        "properties": {
          "set_admin": {
            "type": "object",
            "required": [
              "admin"
            ],
            "properties": {
              "admin": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Executes the provided messages if sender is whitelisted",
        "type": "object",
        "required": [
          "module_action"
        ],
        "properties": {
          "module_action": {
            "type": "object",
            "required": [
              "msgs"
            ],
            "properties": {
              "msgs": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CosmosMsg_for_Empty"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Execute a message and forward the Response data",
        "type": "object",
        "required": [
          "module_action_with_data"
        ],
        "properties": {
          "module_action_with_data": {
            "type": "object",
            "required": [
              "msg"
            ],
            "properties": {
              "msg": {
                "$ref": "#/definitions/CosmosMsg_for_Empty"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Execute IBC action on Client",
        "type": "object",
        "required": [
          "ibc_action"
        ],
        "properties": {
          "ibc_action": {
            "type": "object",
            "required": [
              "msgs"
            ],
            "properties": {
              "msgs": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExecuteMsg"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds the provided address to whitelisted dapps",
        "type": "object",
        "required": [
          "add_modules"
        ],
        "properties": {
          "add_modules": {
            "type": "object",
            "required": [
              "modules"
            ],
            "properties": {
              "modules": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Removes the provided address from the whitelisted dapps",
        "type": "object",
        "required": [
          "remove_module"
        ],
        "properties": {
          "remove_module": {
            "type": "object",
            "required": [
              "module"
            ],
            "properties": {
              "module": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the VAULT_ASSETS map",
        "type": "object",
        "required": [
          "update_assets"
        ],
        "properties": {
          "update_assets": {
            "type": "object",
            "required": [
              "to_add",
              "to_remove"
            ],
            "properties": {
              "to_add": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/AssetEntry"
                    },
                    {
                      "$ref": "#/definitions/UncheckedPriceSource"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "to_remove": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AssetEntry"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Action": {
        "description": "Actions that can be taken to alter the contract's ownership",
        "oneOf": [
          {
            "description": "Propose to transfer the contract's ownership to another account, optionally with an expiry time.\n\nCan only be called by the contract's current owner.\n\nAny existing pending ownership transfer is overwritten.",
            "type": "object",
            "required": [
              "transfer_ownership"
            ],
            "properties": {
              "transfer_ownership": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "expiry": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accept the pending ownership transfer.\n\nCan only be called by the pending owner.",
            "type": "string",
            "enum": [
              "accept_ownership"
            ]
          },
          {
            "description": "Give up the contract's ownership and the possibility of appointing a new owner.\n\nCan only be invoked by the contract's current owner.\n\nAny existing pending ownership transfer is canceled.",
            "type": "string",
            "enum": [
              "renounce_ownership"
            ]
          }
        ]
      },
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "Attribute": {
        "description": "An key value pair that is used in the context of event attributes in logs",
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "BankMsg": {
        "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "send"
            ],
            "properties": {
              "send": {
                "type": "object",
                "required": [
                  "amount",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "to_address": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
            "type": "object",
            "required": [
              "burn"
            ],
            "properties": {
              "burn": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "BankQuery": {
        "oneOf": [
          {
            "description": "This calls into the native bank module for querying the total supply of one denomination. It does the same as the SupplyOf call in Cosmos SDK's RPC API. Return value is of type SupplyResponse.",
            "type": "object",
            "required": [
              "supply"
            ],
            "properties": {
              "supply": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This calls into the native bank module for one denomination Return value is BalanceResponse",
            "type": "object",
            "required": [
              "balance"
            ],
            "properties": {
              "balance": {
                "type": "object",
                "required": [
                  "address",
                  "denom"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "denom": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This calls into the native bank module for all denominations. Note that this may be much more expensive than Balance and should be avoided if possible. Return value is AllBalanceResponse.",
            "type": "object",
            "required": [
              "all_balances"
            ],
            "properties": {
              "all_balances": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Callback": {
        "oneOf": [
          {
            "description": "Result of executing the requested query, or an error.\n\nresult[i] corresponds to the i'th query and contains the base64 encoded query response.",
            "type": "object",
            "required": [
              "query"
            ],
            "properties": {
              "query": {
                "$ref": "#/definitions/Result_of_Array_of_Binary_or_ErrorResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Result of executing the requested messages, or an error.\n\n14/04/23: if a submessage errors the reply handler can see `codespace: wasm, code: 5`, but not the actual error. as a result, we can't return good errors for Execution and this error string will only tell you the error's codespace. for example, an out-of-gas error is code 11 and looks like `codespace: sdk, code: 11`.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "$ref": "#/definitions/Result_of_ExecutionResponse_or_String"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An error occured that could not be recovered from. The only known way that this can occur is message handling running out of gas, in which case the error will be `codespace: sdk, code: 11`.\n\nThis error is not named becuase it could also occur due to a panic or unhandled error during message processing. We don't expect this to happen and have carefully written the code to avoid it.",
            "type": "object",
            "required": [
              "fatal_error"
            ],
            "properties": {
              "fatal_error": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CallbackInfo": {
        "type": "object",
        "required": [
          "id",
          "receiver"
        ],
        "properties": {
          "id": {
            "description": "Used to identify the callback that is sent (acts like the reply ID)",
            "type": "string"
          },
          "msg": {
            "description": "Used to add information to the callback. This is usually used to provide information to the ibc callback function for context",
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "receiver": {
            "description": "Contract that will be called with the callback message",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CallbackMessage": {
        "description": "Executed on the callback receiver upon message completion. When being executed, the message will be tagged with \"callback\":\n\n```json {\"callback\": { \"initiator\": ..., \"initiator_msg\": ..., \"result\": ..., }} ```",
        "type": "object",
        "required": [
          "initiator",
          "initiator_msg",
          "result"
        ],
        "properties": {
          "initiator": {
            "description": "Initaitor on the note chain.",
            "allOf": [
              {
                "$ref": "#/definitions/Addr"
              }
            ]
          },
          "initiator_msg": {
            "description": "Message sent by the initaitor. This _must_ be base64 encoded or execution will fail.",
            "allOf": [
              {
                "$ref": "#/definitions/Binary"
              }
            ]
          },
          "result": {
            "description": "Data from the host chain.",
            "allOf": [
              {
                "$ref": "#/definitions/Callback"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "CallbackMsg": {
        "description": "Callback message to set the dependencies after module upgrades.",
        "type": "object",
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CosmosMsg_for_Empty": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/definitions/BankMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "$ref": "#/definitions/StakingMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "distribution"
            ],
            "properties": {
              "distribution": {
                "$ref": "#/definitions/DistributionMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A Stargate message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto). This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
            "type": "object",
            "required": [
              "stargate"
            ],
            "properties": {
              "stargate": {
                "type": "object",
                "required": [
                  "type_url",
                  "value"
                ],
                "properties": {
                  "type_url": {
                    "type": "string"
                  },
                  "value": {
                    "$ref": "#/definitions/Binary"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ibc"
            ],
            "properties": {
              "ibc": {
                "$ref": "#/definitions/IbcMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "wasm"
            ],
            "properties": {
              "wasm": {
                "$ref": "#/definitions/WasmMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "gov"
            ],
            "properties": {
              "gov": {
                "$ref": "#/definitions/GovMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DexAssetPairing": {
        "description": "The key for an asset pairing Consists of the two assets and the dex name TODO: what if we made keys equal based on the two assets either way?",
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/AssetEntry"
          },
          {
            "$ref": "#/definitions/AssetEntry"
          },
          {
            "type": "string"
          }
        ],
        "maxItems": 3,
        "minItems": 3
      },
      "DistributionMsg": {
        "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "set_withdraw_address"
            ],
            "properties": {
              "set_withdraw_address": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "description": "The `withdraw_address`",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "withdraw_delegator_reward"
            ],
            "properties": {
              "withdraw_delegator_reward": {
                "type": "object",
                "required": [
                  "validator"
                ],
                "properties": {
                  "validator": {
                    "description": "The `validator_address`",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error",
          "message_index"
        ],
        "properties": {
          "error": {
            "description": "The error that occured executing the message.",
            "type": "string"
          },
          "message_index": {
            "description": "The index of the first message who's execution failed.",
            "allOf": [
              {
                "$ref": "#/definitions/Uint64"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Event": {
        "description": "A full [*Cosmos SDK* event].\n\nThis version uses string attributes (similar to [*Cosmos SDK* StringEvent]), which then get magically converted to bytes for Tendermint somewhere between the Rust-Go interface, JSON deserialization and the `NewEvent` call in Cosmos SDK.\n\n[*Cosmos SDK* event]: https://docs.cosmos.network/main/learn/advanced/events [*Cosmos SDK* StringEvent]: https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/base/abci/v1beta1/abci.proto#L56-L70",
        "type": "object",
        "required": [
          "attributes",
          "type"
        ],
        "properties": {
          "attributes": {
            "description": "The attributes to be included in the event.\n\nYou can learn more about these from [*Cosmos SDK* docs].\n\n[*Cosmos SDK* docs]: https://docs.cosmos.network/main/learn/advanced/events",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "type": {
            "description": "The event type. This is renamed to \"ty\" because \"type\" is reserved in Rust. This sucks, we know.",
            "type": "string"
          }
        }
      },
      "ExecuteMsg": {
        "oneOf": [
          {
            "description": "Update the ownership.",
            "type": "object",
            "required": [
              "update_ownership"
            ],
            "properties": {
              "update_ownership": {
                "$ref": "#/definitions/Action"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "register_infrastructure"
            ],
            "properties": {
              "register_infrastructure": {
                "type": "object",
                "required": [
                  "chain",
                  "host",
                  "note"
                ],
                "properties": {
                  "chain": {
                    "description": "Chain to register the infrastructure for (\"juno\", \"osmosis\", etc.)",
                    "type": "string"
                  },
                  "host": {
                    "description": "Address of the abstract host deployed on the remote chain",
                    "type": "string"
                  },
                  "note": {
                    "description": "Polytone note (locally deployed)",
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Changes the config",
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "ans_host": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "version_control": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Only callable by Account proxy Will attempt to forward the specified funds to the corresponding address on the remote chain.",
            "type": "object",
            "required": [
              "send_funds"
            ],
            "properties": {
              "send_funds": {
                "type": "object",
                "required": [
                  "funds",
                  "host_chain"
                ],
                "properties": {
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "host_chain": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Register an Account on a remote chain over IBC This action creates a proxy for them on the remote chain.",
            "type": "object",
            "required": [
              "register"
            ],
            "properties": {
              "register": {
                "type": "object",
                "required": [
                  "host_chain",
                  "install_modules"
                ],
                "properties": {
                  "base_asset": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AssetEntry"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "host_chain": {
                    "type": "string"
                  },
                  "install_modules": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModuleInstallConfig"
                    }
                  },
                  "namespace": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "remote_action"
            ],
            "properties": {
              "remote_action": {
                "type": "object",
                "required": [
                  "action",
                  "host_chain"
                ],
                "properties": {
                  "action": {
                    "$ref": "#/definitions/HostAction"
                  },
                  "callback_info": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/CallbackInfo"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "host_chain": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Allows to query something on a remote contract and act on that query result This has to be an Execute variant for IBC queries",
            "type": "object",
            "required": [
              "remote_queries"
            ],
            "properties": {
              "remote_queries": {
                "type": "object",
                "required": [
                  "callback_info",
                  "host_chain",
                  "queries"
                ],
                "properties": {
                  "callback_info": {
                    "$ref": "#/definitions/CallbackInfo"
                  },
                  "host_chain": {
                    "type": "string"
                  },
                  "queries": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/QueryRequest_for_Empty"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "remove_host"
            ],
            "properties": {
              "remove_host": {
                "type": "object",
                "required": [
                  "host_chain"
                ],
                "properties": {
                  "host_chain": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Callback from the Polytone implementation This is only triggered when a contract execution is succesful",
            "type": "object",
            "required": [
              "callback"
            ],
            "properties": {
              "callback": {
                "$ref": "#/definitions/CallbackMessage"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ExecuteMsg2": {
        "description": "Manager execute messages",
        "oneOf": [
          {
            "description": "Forward execution message to module",
            "type": "object",
            "required": [
              "exec_on_module"
            ],
            "properties": {
              "exec_on_module": {
                "type": "object",
                "required": [
                  "exec_msg",
                  "module_id"
                ],
                "properties": {
                  "exec_msg": {
                    "$ref": "#/definitions/Binary"
                  },
                  "module_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update Abstract-specific configuration of the module. Only callable by the account factory or owner.",
            "type": "object",
            "required": [
              "update_internal_config"
            ],
            "properties": {
              "update_internal_config": {
                "$ref": "#/definitions/Binary"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Install module using module factory, callable by Owner",
            "type": "object",
            "required": [
              "install_modules"
            ],
            "properties": {
              "install_modules": {
                "type": "object",
                "required": [
                  "modules"
                ],
                "properties": {
                  "modules": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModuleInstallConfig"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Uninstall a module given its ID.",
            "type": "object",
            "required": [
              "uninstall_module"
            ],
            "properties": {
              "uninstall_module": {
                "type": "object",
                "required": [
                  "module_id"
                ],
                "properties": {
                  "module_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Upgrade the module to a new version If module is `abstract::manager` then the contract will do a self-migration.",
            "type": "object",
            "required": [
              "upgrade"
            ],
            "properties": {
              "upgrade": {
                "type": "object",
                "required": [
                  "modules"
                ],
                "properties": {
                  "modules": {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "$ref": "#/definitions/ModuleInfo"
                        },
                        {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/Binary"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      ],
                      "maxItems": 2,
                      "minItems": 2
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Creates a sub-account on the account",
            "type": "object",
            "required": [
              "create_sub_account"
            ],
            "properties": {
              "create_sub_account": {
                "type": "object",
                "required": [
                  "install_modules",
                  "name"
                ],
                "properties": {
                  "base_asset": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AssetEntry"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "install_modules": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModuleInstallConfig"
                    }
                  },
                  "link": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update info",
            "type": "object",
            "required": [
              "update_info"
            ],
            "properties": {
              "update_info": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "link": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Proposes a new Owner The new owner has to claim ownership through the [`ExecuteMsg::UpdateOwnership`] message. The claim action can be called by the new owner directly OR by the owner of a top-level account if the new ownership structure is a sub-account.",
            "type": "object",
            "required": [
              "propose_owner"
            ],
            "properties": {
              "propose_owner": {
                "type": "object",
                "required": [
                  "owner"
                ],
                "properties": {
                  "owner": {
                    "$ref": "#/definitions/GovernanceDetails_for_String"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update account statuses",
            "type": "object",
            "required": [
              "update_status"
            ],
            "properties": {
              "update_status": {
                "type": "object",
                "properties": {
                  "is_suspended": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update settings for the Account, including IBC enabled, etc.",
            "type": "object",
            "required": [
              "update_settings"
            ],
            "properties": {
              "update_settings": {
                "type": "object",
                "properties": {
                  "ibc_enabled": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Actions called by internal or external sub-accounts",
            "type": "object",
            "required": [
              "update_sub_account"
            ],
            "properties": {
              "update_sub_account": {
                "$ref": "#/definitions/UpdateSubAccountAction"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Callback endpoint",
            "type": "object",
            "required": [
              "callback"
            ],
            "properties": {
              "callback": {
                "$ref": "#/definitions/CallbackMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Update the contract's ownership. The `action` to be provided can be either to propose transferring ownership to an account, accept a pending ownership transfer, or renounce the ownership permanently.",
            "type": "object",
            "required": [
              "update_ownership"
            ],
            "properties": {
              "update_ownership": {
                "$ref": "#/definitions/Action"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ExecutionResponse": {
        "type": "object",
        "required": [
          "executed_by",
          "result"
        ],
        "properties": {
          "executed_by": {
            "description": "The address on the remote chain that executed the messages.",
            "type": "string"
          },
          "result": {
            "description": "Index `i` corresponds to the result of executing the `i`th message.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubMsgResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GovMsg": {
        "description": "This message type allows the contract interact with the [x/gov] module in order to cast votes.\n\n[x/gov]: https://github.com/cosmos/cosmos-sdk/tree/v0.45.12/x/gov\n\n## Examples\n\nCast a simple vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); use cosmwasm_std::{GovMsg, VoteOption};\n\n#[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::Vote { proposal_id: 4, vote: VoteOption::Yes, })) } ```\n\nCast a weighted vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); # #[cfg(feature = \"cosmwasm_1_2\")] use cosmwasm_std::{Decimal, GovMsg, VoteOption, WeightedVoteOption};\n\n# #[cfg(feature = \"cosmwasm_1_2\")] #[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::VoteWeighted { proposal_id: 4, options: vec![ WeightedVoteOption { option: VoteOption::Yes, weight: Decimal::percent(65), }, WeightedVoteOption { option: VoteOption::Abstain, weight: Decimal::percent(35), }, ], })) } ```",
        "oneOf": [
          {
            "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
            "type": "object",
            "required": [
              "vote"
            ],
            "properties": {
              "vote": {
                "type": "object",
                "required": [
                  "proposal_id",
                  "vote"
                ],
                "properties": {
                  "proposal_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "vote": {
                    "description": "The vote option.\n\nThis should be called \"option\" for consistency with Cosmos SDK. Sorry for that. See <https://github.com/CosmWasm/cosmwasm/issues/1571>.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/VoteOption"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This maps directly to [MsgVoteWeighted](https://github.com/cosmos/cosmos-sdk/blob/v0.45.8/proto/cosmos/gov/v1beta1/tx.proto#L66-L78) in the Cosmos SDK with voter set to the contract address.",
            "type": "object",
            "required": [
              "vote_weighted"
            ],
            "properties": {
              "vote_weighted": {
                "type": "object",
                "required": [
                  "options",
                  "proposal_id"
                ],
                "properties": {
                  "options": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/WeightedVoteOption"
                    }
                  },
                  "proposal_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GovernanceDetails_for_String": {
        "description": "Governance types",
        "oneOf": [
          {
            "description": "A single address is admin",
            "type": "object",
            "required": [
              "Monarchy"
            ],
            "properties": {
              "Monarchy": {
                "type": "object",
                "required": [
                  "monarch"
                ],
                "properties": {
                  "monarch": {
                    "description": "The monarch's address",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Used when the account is a sub-account of another account.",
            "type": "object",
            "required": [
              "SubAccount"
            ],
            "properties": {
              "SubAccount": {
                "type": "object",
                "required": [
                  "manager",
                  "proxy"
                ],
                "properties": {
                  "manager": {
                    "description": "The manager of the account of which this account is the sub-account.",
                    "type": "string"
                  },
                  "proxy": {
                    "description": "The proxy of the account of which this account is the sub-account.",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "An external governance source",
            "type": "object",
            "required": [
              "External"
            ],
            "properties": {
              "External": {
                "type": "object",
                "required": [
                  "governance_address",
                  "governance_type"
                ],
                "properties": {
                  "governance_address": {
                    "description": "The external contract address",
                    "type": "string"
                  },
                  "governance_type": {
                    "description": "Governance type used for doing extra off-chain queries depending on the type.",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HelperAction": {
        "oneOf": [
          {
            "description": "What do we need here ? TODO",
            "type": "string",
            "enum": [
              "send_all_back"
            ]
          }
        ]
      },
      "HostAction": {
        "description": "Callable actions on a remote host",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "dispatch"
            ],
            "properties": {
              "dispatch": {
                "type": "object",
                "required": [
                  "manager_msg"
                ],
                "properties": {
                  "manager_msg": {
                    "$ref": "#/definitions/ExecuteMsg2"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Can't be called by an account directly. These are permissioned messages that only the IBC Client is allowed to call by itself.",
            "type": "object",
            "required": [
              "internal"
            ],
            "properties": {
              "internal": {
                "$ref": "#/definitions/InternalAction"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Some helpers that allow calling dispatch messages faster (for actions that are called regularly)",
            "type": "object",
            "required": [
              "helpers"
            ],
            "properties": {
              "helpers": {
                "$ref": "#/definitions/HelperAction"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcMsg": {
        "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
        "oneOf": [
          {
            "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
            "type": "object",
            "required": [
              "transfer"
            ],
            "properties": {
              "transfer": {
                "type": "object",
                "required": [
                  "amount",
                  "channel_id",
                  "timeout",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Coin"
                      }
                    ]
                  },
                  "channel_id": {
                    "description": "existing channel to send the tokens over",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "when packet times out, measured on remote chain",
                    "allOf": [
                      {
                        "$ref": "#/definitions/IbcTimeout"
                      }
                    ]
                  },
                  "to_address": {
                    "description": "address on the remote chain to receive these tokens",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
            "type": "object",
            "required": [
              "send_packet"
            ],
            "properties": {
              "send_packet": {
                "type": "object",
                "required": [
                  "channel_id",
                  "data",
                  "timeout"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  },
                  "data": {
                    "$ref": "#/definitions/Binary"
                  },
                  "timeout": {
                    "description": "when packet times out, measured on remote chain",
                    "allOf": [
                      {
                        "$ref": "#/definitions/IbcTimeout"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
            "type": "object",
            "required": [
              "close_channel"
            ],
            "properties": {
              "close_channel": {
                "type": "object",
                "required": [
                  "channel_id"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcQuery": {
        "description": "These are queries to the various IBC modules to see the state of the contract's IBC connection. These will return errors if the contract is not \"ibc enabled\"",
        "oneOf": [
          {
            "description": "Gets the Port ID the current contract is bound to.\n\nReturns a `PortIdResponse`.",
            "type": "object",
            "required": [
              "port_id"
            ],
            "properties": {
              "port_id": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Lists all channels that are bound to a given port. If `port_id` is omitted, this list all channels bound to the contract's port.\n\nReturns a `ListChannelsResponse`.",
            "type": "object",
            "required": [
              "list_channels"
            ],
            "properties": {
              "list_channels": {
                "type": "object",
                "properties": {
                  "port_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Lists all information for a (portID, channelID) pair. If port_id is omitted, it will default to the contract's own channel. (To save a PortId{} call)\n\nReturns a `ChannelResponse`.",
            "type": "object",
            "required": [
              "channel"
            ],
            "properties": {
              "channel": {
                "type": "object",
                "required": [
                  "channel_id"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  },
                  "port_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcTimeout": {
        "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
        "type": "object",
        "properties": {
          "block": {
            "anyOf": [
              {
                "$ref": "#/definitions/IbcTimeoutBlock"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp": {
            "anyOf": [
              {
                "$ref": "#/definitions/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "IbcTimeoutBlock": {
        "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
        "type": "object",
        "required": [
          "height",
          "revision"
        ],
        "properties": {
          "height": {
            "description": "block height after which the packet times out. the height within the given revision",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "revision": {
            "description": "the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "InternalAction": {
        "oneOf": [
          {
            "description": "Registers a new account from a remote chain",
            "type": "object",
            "required": [
              "register"
            ],
            "properties": {
              "register": {
                "type": "object",
                "required": [
                  "install_modules",
                  "name"
                ],
                "properties": {
                  "base_asset": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/AssetEntry"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "install_modules": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModuleInstallConfig"
                    }
                  },
                  "link": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "namespace": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ModuleInfo": {
        "description": "Stores the namespace, name, and version of an Abstract module.",
        "type": "object",
        "required": [
          "name",
          "namespace",
          "version"
        ],
        "properties": {
          "name": {
            "description": "Name of the contract",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the module",
            "allOf": [
              {
                "$ref": "#/definitions/Namespace"
              }
            ]
          },
          "version": {
            "description": "Version of the module",
            "allOf": [
              {
                "$ref": "#/definitions/ModuleVersion"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ModuleInstallConfig": {
        "description": "Module info and init message",
        "type": "object",
        "required": [
          "module"
        ],
        "properties": {
          "init_msg": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "module": {
            "$ref": "#/definitions/ModuleInfo"
          }
        },
        "additionalProperties": false
      },
      "ModuleVersion": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "latest"
            ]
          },
          {
            "type": "object",
            "required": [
              "version"
            ],
            "properties": {
              "version": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Namespace": {
        "description": "Represents an Abstract namespace for modules",
        "type": "string"
      },
      "QueryRequest_for_Empty": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/definitions/BankQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "$ref": "#/definitions/StakingQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A Stargate query is encoded the same way as abci_query, with path and protobuf encoded request data. The format is defined in [ADR-21](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-021-protobuf-query-encoding.md). The response is protobuf encoded data directly without a JSON response wrapper. The caller is responsible for compiling the proper protobuf definitions for both requests and responses.",
            "type": "object",
            "required": [
              "stargate"
            ],
            "properties": {
              "stargate": {
                "type": "object",
                "required": [
                  "data",
                  "path"
                ],
                "properties": {
                  "data": {
                    "description": "this is the expected protobuf message type (not any), binary encoded",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "path": {
                    "description": "this is the fully qualified service path used for routing, eg. custom/cosmos_sdk.x.bank.v1.Query/QueryBalance",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ibc"
            ],
            "properties": {
              "ibc": {
                "$ref": "#/definitions/IbcQuery"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "wasm"
            ],
            "properties": {
              "wasm": {
                "$ref": "#/definitions/WasmQuery"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Result_of_Array_of_Binary_or_ErrorResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Binary"
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "$ref": "#/definitions/ErrorResponse"
              }
            }
          }
        ]
      },
      "Result_of_ExecutionResponse_or_String": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Ok"
            ],
            "properties": {
              "Ok": {
                "$ref": "#/definitions/ExecutionResponse"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "Err"
            ],
            "properties": {
              "Err": {
                "type": "string"
              }
            }
          }
        ]
      },
      "StakingMsg": {
        "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "delegate"
            ],
            "properties": {
              "delegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "undelegate"
            ],
            "properties": {
              "undelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "redelegate"
            ],
            "properties": {
              "redelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "dst_validator",
                  "src_validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "dst_validator": {
                    "type": "string"
                  },
                  "src_validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "StakingQuery": {
        "oneOf": [
          {
            "description": "Returns the denomination that can be bonded (if there are multiple native tokens on the chain)",
            "type": "object",
            "required": [
              "bonded_denom"
            ],
            "properties": {
              "bonded_denom": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AllDelegations will return all delegations by the delegator",
            "type": "object",
            "required": [
              "all_delegations"
            ],
            "properties": {
              "all_delegations": {
                "type": "object",
                "required": [
                  "delegator"
                ],
                "properties": {
                  "delegator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Delegation will return more detailed info on a particular delegation, defined by delegator/validator pair",
            "type": "object",
            "required": [
              "delegation"
            ],
            "properties": {
              "delegation": {
                "type": "object",
                "required": [
                  "delegator",
                  "validator"
                ],
                "properties": {
                  "delegator": {
                    "type": "string"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns all validators in the currently active validator set.\n\nThe query response type is `AllValidatorsResponse`.",
            "type": "object",
            "required": [
              "all_validators"
            ],
            "properties": {
              "all_validators": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns the validator at the given address. Returns None if the validator is not part of the currently active validator set.\n\nThe query response type is `ValidatorResponse`.",
            "type": "object",
            "required": [
              "validator"
            ],
            "properties": {
              "validator": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "description": "The validator's address (e.g. (e.g. cosmosvaloper1...))",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SubMsgResponse": {
        "description": "The information we get back from a successful sub message execution, with full Cosmos SDK events.",
        "type": "object",
        "required": [
          "events"
        ],
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UncheckedPriceSource": {
        "description": "Provides information on how to calculate the value of an asset",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "None"
            ]
          },
          {
            "description": "A pool address of an asset/asset pair Both assets must be defined in the Proxy_assets state",
            "type": "object",
            "required": [
              "Pair"
            ],
            "properties": {
              "Pair": {
                "$ref": "#/definitions/DexAssetPairing"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "LiquidityToken"
            ],
            "properties": {
              "LiquidityToken": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ValueAs"
            ],
            "properties": {
              "ValueAs": {
                "type": "object",
                "required": [
                  "asset",
                  "multiplier"
                ],
                "properties": {
                  "asset": {
                    "$ref": "#/definitions/AssetEntry"
                  },
                  "multiplier": {
                    "$ref": "#/definitions/Decimal"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UpdateSubAccountAction": {
        "oneOf": [
          {
            "description": "Unregister sub-account It will unregister sub-account from the state Could be called only by the sub-account itself",
            "type": "object",
            "required": [
              "unregister_sub_account"
            ],
            "properties": {
              "unregister_sub_account": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Register sub-account It will register new sub-account into the state Could be called by the sub-account manager Note: since it happens after the claim by this manager state won't have spam accounts",
            "type": "object",
            "required": [
              "register_sub_account"
            ],
            "properties": {
              "register_sub_account": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "VoteOption": {
        "type": "string",
        "enum": [
          "yes",
          "no",
          "abstain",
          "no_with_veto"
        ]
      },
      "WasmMsg": {
        "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
        "oneOf": [
          {
            "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "funds",
                  "msg"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "msg": {
                    "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "instantiate"
            ],
            "properties": {
              "instantiate": {
                "type": "object",
                "required": [
                  "code_id",
                  "funds",
                  "label",
                  "msg"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "label": {
                    "description": "A human-readable label for the contract.\n\nValid values should: - not be empty - not be bigger than 128 bytes (or some chain-specific limit) - not start / end with whitespace",
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Instantiates a new contracts from previously uploaded Wasm code using a predictable address derivation algorithm implemented in [`cosmwasm_std::instantiate2_address`].\n\nThis is translated to a [MsgInstantiateContract2](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L73-L96). `sender` is automatically filled with the current contract's address. `fix_msg` is automatically set to false.",
            "type": "object",
            "required": [
              "instantiate2"
            ],
            "properties": {
              "instantiate2": {
                "type": "object",
                "required": [
                  "code_id",
                  "funds",
                  "label",
                  "msg",
                  "salt"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "label": {
                    "description": "A human-readable label for the contract.\n\nValid values should: - not be empty - not be bigger than 128 bytes (or some chain-specific limit) - not start / end with whitespace",
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "salt": {
                    "$ref": "#/definitions/Binary"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "migrate"
            ],
            "properties": {
              "migrate": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "msg",
                  "new_code_id"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "new_code_id": {
                    "description": "the code_id of the new logic to place in the given contract",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "update_admin"
            ],
            "properties": {
              "update_admin": {
                "type": "object",
                "required": [
                  "admin",
                  "contract_addr"
                ],
                "properties": {
                  "admin": {
                    "type": "string"
                  },
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "clear_admin"
            ],
            "properties": {
              "clear_admin": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WasmQuery": {
        "oneOf": [
          {
            "description": "this queries the public API of another contract at a known address (with known ABI) Return value is whatever the contract returns (caller should know), wrapped in a ContractResult that is JSON encoded.",
            "type": "object",
            "required": [
              "smart"
            ],
            "properties": {
              "smart": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "msg"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the json-encoded QueryMsg struct",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "this queries the raw kv-store of the contract. returns the raw, unparsed data stored at that key, which may be an empty vector if not present",
            "type": "object",
            "required": [
              "raw"
            ],
            "properties": {
              "raw": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "key"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the raw key used in the contracts Storage",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns a [`ContractInfoResponse`] with metadata on the contract from the runtime",
            "type": "object",
            "required": [
              "contract_info"
            ],
            "properties": {
              "contract_info": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Returns a [`CodeInfoResponse`] with metadata of the code",
            "type": "object",
            "required": [
              "code_info"
            ],
            "properties": {
              "code_info": {
                "type": "object",
                "required": [
                  "code_id"
                ],
                "properties": {
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "WeightedVoteOption": {
        "type": "object",
        "required": [
          "option",
          "weight"
        ],
        "properties": {
          "option": {
            "$ref": "#/definitions/VoteOption"
          },
          "weight": {
            "$ref": "#/definitions/Decimal"
          }
        }
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Contains the enabled modules Returns [`ConfigResponse`]",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the total value of the assets held by this account [`AccountValue`]",
        "type": "object",
        "required": [
          "total_value"
        ],
        "properties": {
          "total_value": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the value of one token with an optional amount set. If amount is not set, the account's balance of the token is used. [`TokenValueResponse`]",
        "type": "object",
        "required": [
          "token_value"
        ],
        "properties": {
          "token_value": {
            "type": "object",
            "required": [
              "identifier"
            ],
            "properties": {
              "identifier": {
                "$ref": "#/definitions/AssetEntry"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the amount of specified tokens this contract holds [`HoldingAmountResponse`]",
        "type": "object",
        "required": [
          "holding_amount"
        ],
        "properties": {
          "holding_amount": {
            "type": "object",
            "required": [
              "identifier"
            ],
            "properties": {
              "identifier": {
                "$ref": "#/definitions/AssetEntry"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the oracle configuration value for the specified key [`AssetConfigResponse`]",
        "type": "object",
        "required": [
          "asset_config"
        ],
        "properties": {
          "asset_config": {
            "type": "object",
            "required": [
              "identifier"
            ],
            "properties": {
              "identifier": {
                "$ref": "#/definitions/AssetEntry"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`AssetsConfigResponse`] Human readable",
        "type": "object",
        "required": [
          "assets_config"
        ],
        "properties": {
          "assets_config": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AssetEntry"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`AssetsInfoResponse`] Not human readable",
        "type": "object",
        "required": [
          "assets_info"
        ],
        "properties": {
          "assets_info": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "start_after": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AssetInfoBase_for_Addr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns [`BaseAssetResponse`]",
        "type": "object",
        "required": [
          "base_asset"
        ],
        "properties": {
          "base_asset": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "AssetInfoBase_for_Addr": {
        "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "native"
            ],
            "properties": {
              "native": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "cw20"
            ],
            "properties": {
              "cw20": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "asset_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetConfigResponse",
      "description": "Human readable config for a single asset",
      "type": "object",
      "required": [
        "price_source"
      ],
      "properties": {
        "price_source": {
          "$ref": "#/definitions/UncheckedPriceSource"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "DexAssetPairing": {
          "description": "The key for an asset pairing Consists of the two assets and the dex name TODO: what if we made keys equal based on the two assets either way?",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 3,
          "minItems": 3
        },
        "UncheckedPriceSource": {
          "description": "Provides information on how to calculate the value of an asset",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "None"
              ]
            },
            {
              "description": "A pool address of an asset/asset pair Both assets must be defined in the Proxy_assets state",
              "type": "object",
              "required": [
                "Pair"
              ],
              "properties": {
                "Pair": {
                  "$ref": "#/definitions/DexAssetPairing"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "LiquidityToken"
              ],
              "properties": {
                "LiquidityToken": {
                  "type": "object"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ValueAs"
              ],
              "properties": {
                "ValueAs": {
                  "type": "object",
                  "required": [
                    "asset",
                    "multiplier"
                  ],
                  "properties": {
                    "asset": {
                      "$ref": "#/definitions/AssetEntry"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "assets_config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsConfigResponse",
      "description": "Human readable asset configuration",
      "type": "object",
      "required": [
        "assets"
      ],
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetEntry"
              },
              {
                "$ref": "#/definitions/UncheckedPriceSource"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "DexAssetPairing": {
          "description": "The key for an asset pairing Consists of the two assets and the dex name TODO: what if we made keys equal based on the two assets either way?",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "$ref": "#/definitions/AssetEntry"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 3,
          "minItems": 3
        },
        "UncheckedPriceSource": {
          "description": "Provides information on how to calculate the value of an asset",
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "None"
              ]
            },
            {
              "description": "A pool address of an asset/asset pair Both assets must be defined in the Proxy_assets state",
              "type": "object",
              "required": [
                "Pair"
              ],
              "properties": {
                "Pair": {
                  "$ref": "#/definitions/DexAssetPairing"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "LiquidityToken"
              ],
              "properties": {
                "LiquidityToken": {
                  "type": "object"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "ValueAs"
              ],
              "properties": {
                "ValueAs": {
                  "type": "object",
                  "required": [
                    "asset",
                    "multiplier"
                  ],
                  "properties": {
                    "asset": {
                      "$ref": "#/definitions/AssetEntry"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "assets_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsInfoResponse",
      "description": "non-human readable asset configuration",
      "type": "object",
      "required": [
        "assets"
      ],
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetInfoBase_for_Addr"
              },
              {
                "$ref": "#/definitions/OracleAsset"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetInfoBase_for_Addr": {
          "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "OracleAsset": {
          "type": "object",
          "required": [
            "complexity",
            "price_source"
          ],
          "properties": {
            "complexity": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            },
            "price_source": {
              "$ref": "#/definitions/PriceSource"
            }
          },
          "additionalProperties": false
        },
        "PoolAddressBase_for_Addr": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "separate_addresses"
              ],
              "properties": {
                "separate_addresses": {
                  "type": "object",
                  "required": [
                    "liquidity",
                    "swap"
                  ],
                  "properties": {
                    "liquidity": {
                      "$ref": "#/definitions/Addr"
                    },
                    "swap": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "contract"
              ],
              "properties": {
                "contract": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PriceSource": {
          "description": "Provides information on how to calculate the value of an asset",
          "oneOf": [
            {
              "description": "Should only be used for the base asset",
              "type": "string",
              "enum": [
                "None"
              ]
            },
            {
              "description": "A pool name of an asset/asset pair Both assets must be defined in the Vault_assets state",
              "type": "object",
              "required": [
                "Pool"
              ],
              "properties": {
                "Pool": {
                  "type": "object",
                  "required": [
                    "address",
                    "pair"
                  ],
                  "properties": {
                    "address": {
                      "$ref": "#/definitions/PoolAddressBase_for_Addr"
                    },
                    "pair": {
                      "description": "two assets that make up a pair in the pool",
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/AssetInfoBase_for_Addr"
                      }
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Liquidity pool token",
              "type": "object",
              "required": [
                "LiquidityToken"
              ],
              "properties": {
                "LiquidityToken": {
                  "type": "object",
                  "required": [
                    "pool_address",
                    "pool_assets"
                  ],
                  "properties": {
                    "pool_address": {
                      "$ref": "#/definitions/PoolAddressBase_for_Addr"
                    },
                    "pool_assets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/AssetInfoBase_for_Addr"
                      }
                    }
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Asset will be valued as if they are ValueAs.asset tokens",
              "type": "object",
              "required": [
                "ValueAs"
              ],
              "properties": {
                "ValueAs": {
                  "type": "object",
                  "required": [
                    "asset",
                    "multiplier"
                  ],
                  "properties": {
                    "asset": {
                      "$ref": "#/definitions/AssetInfoBase_for_Addr"
                    },
                    "multiplier": {
                      "$ref": "#/definitions/Decimal"
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "base_asset": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BaseAssetResponse",
      "type": "object",
      "required": [
        "base_asset"
      ],
      "properties": {
        "base_asset": {
          "$ref": "#/definitions/AssetInfoBase_for_Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetInfoBase_for_Addr": {
          "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "modules"
      ],
      "properties": {
        "modules": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "holding_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "HoldingAmountResponse",
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "token_value": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokenValueResponse",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "total_value": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountValue",
      "type": "object",
      "required": [
        "breakdown",
        "total_value"
      ],
      "properties": {
        "breakdown": {
          "description": "Vec of asset information and their value in the base asset denomination",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/AssetInfoBase_for_Addr"
              },
              {
                "$ref": "#/definitions/Uint128"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "total_value": {
          "description": "the total value of this account in the base denomination",
          "allOf": [
            {
              "$ref": "#/definitions/AssetBase_for_Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetBase_for_Addr": {
          "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "Specifies the asset's amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Specifies the asset's type (CW20 or native)",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfoBase_for_Addr"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfoBase_for_Addr": {
          "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
